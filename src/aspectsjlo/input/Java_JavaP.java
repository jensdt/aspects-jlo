// $ANTLR 3.3 Nov 30, 2010 12:45:30 JavaP.g 2011-05-19 23:04:20

package aspectsjlo.input;

import chameleon.exception.ModelException;
import chameleon.exception.ChameleonProgrammerException;

import chameleon.core.lookup.LookupStrategyFactory;

import chameleon.core.compilationunit.CompilationUnit;

import chameleon.core.declaration.DeclarationWithParametersHeader;
import chameleon.core.declaration.SimpleNameDeclarationWithParametersHeader;
import chameleon.core.declaration.SimpleNameSignature;
import chameleon.core.declaration.TargetDeclaration;

import chameleon.core.element.Element;

import chameleon.core.expression.Expression;
import chameleon.core.expression.MethodInvocation;
import chameleon.core.expression.Literal;
import chameleon.core.expression.Assignable;
import chameleon.core.expression.NamedTarget;
import chameleon.core.expression.NamedTargetExpression;
import chameleon.core.expression.InvocationTarget;
import chameleon.core.expression.TargetedExpression;
import chameleon.core.expression.VariableReference;

import chameleon.core.language.Language;

import chameleon.core.member.Member;

import chameleon.core.method.Method;
import chameleon.core.method.Implementation;
import chameleon.core.method.RegularImplementation;

import chameleon.core.method.exception.ExceptionClause;
import chameleon.core.method.exception.TypeExceptionDeclaration;

import chameleon.core.modifier.Modifier;

import chameleon.core.namespace.Namespace;
import chameleon.core.namespace.RootNamespace;
import chameleon.core.namespace.NamespaceOrTypeReference;
import chameleon.core.namespace.NamespaceReference;

import chameleon.core.namespacepart.NamespacePart;
import chameleon.core.namespacepart.Import;
import chameleon.core.namespacepart.TypeImport;
import chameleon.core.namespacepart.DemandImport;

import chameleon.core.reference.CrossReference;

import chameleon.core.statement.Block;
import chameleon.core.statement.Statement;

import chameleon.core.variable.VariableDeclaration;
import chameleon.core.variable.VariableDeclarator;

import chameleon.oo.type.ClassBody;
import chameleon.oo.type.RegularType;
import chameleon.oo.type.Type;
import chameleon.oo.type.TypeWithBody;
import chameleon.oo.type.TypeReference;
import chameleon.oo.type.TypeElement;

import chameleon.oo.type.generics.TypeParameter;
import chameleon.oo.type.generics.FormalTypeParameter;
import chameleon.oo.type.generics.ActualTypeArgument;
import chameleon.oo.type.generics.BasicTypeArgument;
import chameleon.oo.type.generics.TypeConstraint;
import chameleon.oo.type.generics.ExtendsConstraint;
import chameleon.oo.type.generics.ExtendsWildcard;
import chameleon.oo.type.generics.SuperWildcard;

import chameleon.oo.type.inheritance.SubtypeRelation;

import chameleon.core.variable.Variable;
import chameleon.core.variable.FormalParameter;

import chameleon.input.InputProcessor;
import chameleon.input.Position2D;

import chameleon.support.expression.RegularLiteral;
import chameleon.support.expression.NullLiteral;
import chameleon.support.expression.AssignmentExpression;
import chameleon.support.expression.ConditionalExpression;
import chameleon.support.expression.ConditionalAndExpression;
import chameleon.support.expression.ConditionalOrExpression;
import chameleon.support.expression.InstanceofExpression;
import chameleon.support.expression.ThisLiteral;
import chameleon.support.expression.FilledArrayIndex;
import chameleon.support.expression.EmptyArrayIndex;
import chameleon.support.expression.ArrayIndex;
import chameleon.support.expression.ClassCastExpression;
import chameleon.support.expression.SuperTarget;

import chameleon.support.member.simplename.method.NormalMethod;

import chameleon.support.member.simplename.variable.MemberVariableDeclarator;
import chameleon.support.member.simplename.operator.infix.InfixOperatorInvocation;
import chameleon.support.member.simplename.operator.prefix.PrefixOperatorInvocation;
import chameleon.support.member.simplename.operator.postfix.PostfixOperatorInvocation;
import chameleon.support.member.simplename.method.RegularMethodInvocation;

import chameleon.support.modifier.Abstract;
import chameleon.support.modifier.Final;
import chameleon.support.modifier.Private;
import chameleon.support.modifier.Protected;
import chameleon.support.modifier.Public;
import chameleon.support.modifier.Static;
import chameleon.support.modifier.Native;
import chameleon.support.modifier.Enum;
import chameleon.support.modifier.Interface;

import chameleon.support.statement.StatementExpression;
import chameleon.support.statement.LocalClassStatement;
import chameleon.support.statement.AssertStatement;
import chameleon.support.statement.IfThenElseStatement;
import chameleon.support.statement.ForStatement;
import chameleon.support.statement.ForControl;
import chameleon.support.statement.ForInit;
import chameleon.support.statement.SimpleForControl;
import chameleon.support.statement.EnhancedForControl;
import chameleon.support.statement.StatementExprList;
import chameleon.support.statement.TryStatement;
import chameleon.support.statement.CatchClause;
import chameleon.support.statement.FinallyClause;
import chameleon.support.statement.DoStatement;
import chameleon.support.statement.WhileStatement;
import chameleon.support.statement.SwitchStatement;
import chameleon.support.statement.SwitchCase;
import chameleon.support.statement.SwitchLabel;
import chameleon.support.statement.CaseLabel;
import chameleon.support.statement.DefaultLabel;
import chameleon.support.statement.EnumLabel;
import chameleon.support.statement.ReturnStatement;
import chameleon.support.statement.ThrowStatement;
import chameleon.support.statement.BreakStatement;
import chameleon.support.statement.ContinueStatement;
import chameleon.support.statement.SynchronizedStatement;
import chameleon.support.statement.EmptyStatement;
import chameleon.support.statement.LabeledStatement;

import chameleon.support.type.EmptyTypeElement;
import chameleon.support.type.StaticInitializer;

import chameleon.support.variable.LocalVariableDeclarator;

import chameleon.support.input.ChameleonParser;

import chameleon.util.Util;

import jnome.core.expression.ArrayInitializer;
import jnome.core.expression.ClassLiteral;
import jnome.core.expression.ArrayAccessExpression;
import jnome.core.expression.ArrayCreationExpression;
import jnome.core.expression.invocation.ConstructorInvocation;
import jnome.core.expression.invocation.JavaMethodInvocation;
import jnome.core.expression.invocation.ThisConstructorDelegation;
import jnome.core.expression.invocation.SuperConstructorDelegation;

import jnome.core.imports.SingleStaticImport;

import jnome.core.language.Java;

import jnome.core.modifier.StrictFP;
import jnome.core.modifier.Transient;
import jnome.core.modifier.Volatile;
import jnome.core.modifier.Synchronized;
import jnome.core.modifier.JavaConstructor;
import jnome.core.modifier.Implements;
import jnome.core.modifier.AnnotationModifier;
import jnome.core.modifier.AnnotationType;

import jnome.core.type.JavaTypeReference;
import jnome.core.type.ArrayTypeReference;
import jnome.core.type.BasicJavaTypeReference;
import jnome.core.type.JavaIntersectionTypeReference;
import jnome.core.type.PureWildcard;

import jnome.core.enumeration.EnumConstant;

import jnome.core.variable.JavaVariableDeclaration;
import jnome.core.variable.MultiFormalParameter;

import jnome.input.JavaFactory;

import java.util.List;
import java.util.ArrayList;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g 
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created 
 *          elementValuePair and elementValuePairs rules, then used them in the 
 *          annotation rule.  Allows it to recognize annotation references with 
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the identifierRule portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which 
 *          has the identifierRule portion in it, the parser would fail on constants in 
 *          annotation definitions because it expected two identifiers.  
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to 
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing 
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 *      
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *  Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *  and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *  --a[i].foo didn't work. Fixed unaryExpression
 *
 *  Version 1.0.6 -- John Ridgway, March 17, 2008
 *      Made "assert" a switchable keyword like "enum".
 *      Fixed compilationUnit to disallow "annotation importDeclaration ...".
 *      Changed "identifierRule ('.' identifierRule)*" to "qualifiedName" in more 
 *          places.
 *      Changed modifier* and/or variableModifier* to classOrInterfaceModifiers,
 *          modifiers or variableModifiers, as appropriate.
 *      Renamed "bound" to "typeBound" to better match language in the JLS.
 *      Added "memberDeclaration" which rewrites to methodDeclaration or 
 *      fieldDeclaration and pulled type into memberDeclaration.  So we parse 
 *          type and then move on to decide whether we're dealing with a field
 *          or a method.
 *      Modified "constructorDeclaration" to use "constructorBody" instead of
 *          "methodBody".  constructorBody starts with explicitConstructorInvocation,
 *          then goes on to blockStatement*.  Pulling explicitConstructorInvocation
 *          out of expressions allowed me to simplify "primary".
 *      Changed variableDeclarator to simplify it.
 *      Changed type to use classOrInterfaceType, thus simplifying it; of course
 *          I then had to add classOrInterfaceType, but it is used in several 
 *          places.
 *      Fixed annotations, old version allowed "@X(y,z)", which is illegal.
 *      Added optional comma to end of "elementValueArrayInitializer"; as per JLS.
 *      Changed annotationTypeElementRest to use normalClassDeclaration and 
 *          normalInterfaceDeclaration rather than classDeclaration and 
 *          interfaceDeclaration, thus getting rid of a couple of grammar ambiguities.
 *      Split localVariableDeclaration into localVariableDeclarationStatement
 *          (includes the terminating semi-colon) and localVariableDeclaration.  
 *          This allowed me to use localVariableDeclaration in "forInit" clauses,
 *           simplifying them.
 *      Changed switchBlockStatementGroup to use multiple labels.  This adds an
 *          ambiguity, but if one uses appropriately greedy parsing it yields the
 *           parse that is closest to the meaning of the switch statement.
 *      Renamed "forVarControl" to "enhancedForControl" -- JLS language.
 *      Added semantic predicates to test for shift operations rather than other
 *          things.  Thus, for instance, the string "< <" will never be treated
 *          as a left-shift operator.
 *      In "creator" we rule out "nonWildcardTypeArguments" on arrayCreation, 
 *          which are illegal.
 *      Moved "nonWildcardTypeArguments into innerCreator.
 *      Removed 'super' superSuffix from explicitGenericInvocation, since that
 *          is only used in explicitConstructorInvocation at the beginning of a
 *           constructorBody.  (This is part of the simplification of expressions
 *           mentioned earlier.)
 *      Simplified primary (got rid of those things that are only used in
 *          explicitConstructorInvocation).
 *      Lexer -- removed "Exponent?" from FloatingPointLiteral choice 4, since it
 *          led to an ambiguity.
 *
 *      This grammar successfully parses every .java file in the JDK 1.5 source 
 *          tree (excluding those whose file names include '-', which are not
 *          valid Java compilation units).
 *
 *  Known remaining problems:
 *      "Letter" and "JavaIDDigit" are wrong.  The actual specification of
 *      "Letter" should be "a character for which the method
 *      Character.isJavaidentifierRuleStart(int) returns true."  A "Java 
 *      letter-or-digit is a character for which the method 
 *      Character.isJavaidentifierRulePart(int) returns true."
 */
public class Java_JavaP extends ChameleonParser {
    public static final int EOF=-1;
    public static final int T__25=25;
    public static final int T__26=26;
    public static final int T__27=27;
    public static final int T__28=28;
    public static final int T__29=29;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int T__33=33;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__42=42;
    public static final int T__43=43;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__50=50;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__59=59;
    public static final int T__60=60;
    public static final int T__61=61;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__70=70;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__73=73;
    public static final int T__74=74;
    public static final int T__75=75;
    public static final int T__76=76;
    public static final int T__77=77;
    public static final int T__78=78;
    public static final int T__79=79;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__84=84;
    public static final int T__85=85;
    public static final int T__86=86;
    public static final int T__87=87;
    public static final int T__88=88;
    public static final int T__89=89;
    public static final int T__90=90;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__95=95;
    public static final int T__96=96;
    public static final int T__97=97;
    public static final int T__98=98;
    public static final int T__99=99;
    public static final int T__100=100;
    public static final int T__101=101;
    public static final int T__102=102;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__110=110;
    public static final int T__111=111;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int HexDigit=4;
    public static final int IntegerTypeSuffix=5;
    public static final int HexLiteral=6;
    public static final int DecimalLiteral=7;
    public static final int OctalLiteral=8;
    public static final int Exponent=9;
    public static final int FloatTypeSuffix=10;
    public static final int FloatingPointLiteral=11;
    public static final int EscapeSequence=12;
    public static final int CharacterLiteral=13;
    public static final int StringLiteral=14;
    public static final int UnicodeEscape=15;
    public static final int OctalEscape=16;
    public static final int ENUM=17;
    public static final int ASSERT=18;
    public static final int Letter=19;
    public static final int JavaIDDigit=20;
    public static final int Identifier=21;
    public static final int WS=22;
    public static final int COMMENT=23;
    public static final int LINE_COMMENT=24;

    // delegates
    // delegators
    public JavaParser gJava;
    public JavaParser gParent;

    protected static class TargetScope_scope {
        InvocationTarget target;
        Token start;
    }
    protected Stack TargetScope_stack = new Stack();
    protected static class MethodScope_scope {
        Method method;
        Token start;
    }
    protected Stack MethodScope_stack = new Stack();


        public Java_JavaP(TokenStream input, JavaParser gJava) {
            this(input, new RecognizerSharedState(), gJava);
        }
        public Java_JavaP(TokenStream input, RecognizerSharedState state, JavaParser gJava) {
            super(input, state);
            this.gJava = gJava;
             
            gParent = gJava;
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "JavaP.g"; }



      public RegularMethodInvocation invocation(String name, InvocationTarget target) {
        return new JavaMethodInvocation(name, target);
      }

      private JavaFactory _javaFactory = new JavaFactory();
      
      public JavaFactory factory() {
        return _javaFactory;
      }
      
      public void setFactory(JavaFactory factory) {
        _javaFactory = factory;
      }

      public InvocationTarget cloneTargetOfTarget(NamedTarget target) {
        InvocationTarget result = null;
        if(target != null) {
          InvocationTarget targetOfTarget = target.getTarget();
          if(targetOfTarget != null) {
            result = targetOfTarget.clone();
          }
        }
        return result;
      }
      
      public RegularType createType(SimpleNameSignature signature) {
         return factory().createRegularType(signature);
      }
      
      public NormalMethod createNormalMethod(SimpleNameDeclarationWithParametersHeader header, TypeReference returnType) {
         return factory().createNormalMethod(header, returnType);
      }

      public InvocationTarget cloneTarget(InvocationTarget target) {
        InvocationTarget result = null;
        if(target != null) {
            result = target.clone();
        }
        return result;
      }

      public static class ClassCreatorRest {
        public ClassCreatorRest(List<Expression> args) {
          _args = args; // NO ENCAPSULATION, BUT IT IS JUST THE PARSER.
        }
        
        public List<Expression> arguments() {
          return _args;
        }
        
        private List<Expression> _args;
        
        public void setBody(ClassBody body) {
          _body = body;
        }
        
        public ClassBody body() {
          return _body;
        }
        
        private ClassBody _body;
      }
      

      public static class StupidVariableDeclaratorId {
           public StupidVariableDeclaratorId(String name, int dimension, CommonToken nameToken) {
             _name = name;
             _dimension = dimension;
             _token = nameToken;
           }
           private final String _name;
           private final int _dimension;
           
           public CommonToken nameToken() {
             return _token;
           }
           
           private CommonToken _token;
           
           public String name() {
             return _name;
           }
           
           public int dimension() {
             return _dimension;
           }
      }
      

      public void processType(NamespacePart np, Type type){
        if(np == null) {throw new IllegalArgumentException("namespace part given to processType is null.");}
        if(type == null) {return;}  //throw new IllegalArgumentException("type given to processType is null.");}
        np.add(type);
        // inherit from java.lang.Object if there is no explicit extends relation
        String fqn = type.getFullyQualifiedName();
        if(fqn != null) {
          if(type.nonMemberInheritanceRelations().isEmpty() && (! fqn.equals("java.lang.Object"))){
            type.addInheritanceRelation(new SubtypeRelation(createTypeReference(new NamespaceOrTypeReference("java.lang"),"Object")));
          }
        }

      }
      
      public JavaTypeReference myToArray(JavaTypeReference ref, StupidVariableDeclaratorId id) {
        int dim = id.dimension(); 
        if(dim > 0) {
          return new ArrayTypeReference(ref,dim);
        } else {
          return ref;
        }
      }
      
      public void addNonTopLevelObjectInheritance(Type type) {
        if(type.nonMemberInheritanceRelations().isEmpty()){
          type.addInheritanceRelation(new SubtypeRelation(createTypeReference(new NamespaceOrTypeReference("java.lang"),"Object")));
        }
      }
      
      public JavaTypeReference typeRef(String qn) {
        return ((Java)language()).createTypeReference(qn);
      }

      public JavaTypeReference createTypeReference(CrossReference<?, ? extends TargetDeclaration> target, String name) {
        return ((Java)language()).createTypeReference(target,name);
      }
      
      public JavaTypeReference createTypeReference(CrossReference<?, ? extends TargetDeclaration> target, SimpleNameSignature signature) {
        return ((Java)language()).createTypeReference(target,signature);
      }

      public JavaTypeReference createTypeReference(NamedTarget target) {
        return ((Java)language()).createTypeReference(target);
      }
      
      public Java java() {
        return (Java)language();
      }


    public static class identifierRule_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierRule"
    // JavaP.g:343:1: identifierRule returns [String element] : id= Identifier ;
    public final Java_JavaP.identifierRule_return identifierRule() throws RecognitionException {
        Java_JavaP.identifierRule_return retval = new Java_JavaP.identifierRule_return();
        retval.start = input.LT(1);
        int identifierRule_StartIndex = input.index();
        Object root_0 = null;

        Token id=null;

        Object id_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // JavaP.g:344:5: (id= Identifier )
            // JavaP.g:344:7: id= Identifier
            {
            root_0 = (Object)adaptor.nil();

            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_identifierRule103); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (Object)adaptor.create(id);
            adaptor.addChild(root_0, id_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = (id!=null?id.getText():null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, identifierRule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierRule"

    public static class compilationUnit_return extends ParserRuleReturnScope {
        public CompilationUnit element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // JavaP.g:347:1: compilationUnit returns [CompilationUnit element] : ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) | (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )* );
    public final Java_JavaP.compilationUnit_return compilationUnit() throws RecognitionException {
        Java_JavaP.compilationUnit_return retval = new Java_JavaP.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.packageDeclaration_return np = null;

        Java_JavaP.importDeclaration_return imp = null;

        Java_JavaP.typeDeclaration_return typech = null;

        Java_JavaP.classOrInterfaceDeclaration_return cd = null;

        Java_JavaP.annotations_return annotations1 = null;



         
        NamespacePart npp = null;
        retval.element = getCompilationUnit();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // JavaP.g:352:5: ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) | (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )* )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // JavaP.g:352:10: annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotations_in_compilationUnit141);
                    annotations1=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotations1.getTree());
                    // JavaP.g:353:9: (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
                    int alt4=2;
                    int LA4_0 = input.LA(1);

                    if ( (LA4_0==25) ) {
                        alt4=1;
                    }
                    else if ( (LA4_0==ENUM||LA4_0==28||(LA4_0>=31 && LA4_0<=37)||LA4_0==46||LA4_0==73) ) {
                        alt4=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 4, 0, input);

                        throw nvae;
                    }
                    switch (alt4) {
                        case 1 :
                            // JavaP.g:353:13: np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )*
                            {
                            pushFollow(FOLLOW_packageDeclaration_in_compilationUnit157);
                            np=packageDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, np.getTree());
                            if ( state.backtracking==0 ) {
                              npp=np.element;
                                               retval.element.add(npp);
                                               npp.addImport(new DemandImport(new NamespaceReference("java.lang")));
                                              
                            }
                            // JavaP.g:358:13: (imp= importDeclaration )*
                            loop1:
                            do {
                                int alt1=2;
                                int LA1_0 = input.LA(1);

                                if ( (LA1_0==27) ) {
                                    alt1=1;
                                }


                                switch (alt1) {
                            	case 1 :
                            	    // JavaP.g:358:14: imp= importDeclaration
                            	    {
                            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit193);
                            	    imp=importDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, imp.getTree());
                            	    if ( state.backtracking==0 ) {
                            	      npp.addImport(imp.element);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop1;
                                }
                            } while (true);

                            // JavaP.g:359:13: (typech= typeDeclaration )*
                            loop2:
                            do {
                                int alt2=2;
                                int LA2_0 = input.LA(1);

                                if ( (LA2_0==ENUM||LA2_0==26||LA2_0==28||(LA2_0>=31 && LA2_0<=37)||LA2_0==46||LA2_0==73) ) {
                                    alt2=1;
                                }


                                switch (alt2) {
                            	case 1 :
                            	    // JavaP.g:359:14: typech= typeDeclaration
                            	    {
                            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit214);
                            	    typech=typeDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typech.getTree());
                            	    if ( state.backtracking==0 ) {
                            	      processType(npp,typech.element);
                            	                      
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop2;
                                }
                            } while (true);


                            }
                            break;
                        case 2 :
                            // JavaP.g:363:13: cd= classOrInterfaceDeclaration (typech= typeDeclaration )*
                            {
                            pushFollow(FOLLOW_classOrInterfaceDeclaration_in_compilationUnit263);
                            cd=classOrInterfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                            if ( state.backtracking==0 ) {
                              npp = new NamespacePart(language().defaultNamespace());
                                              retval.element.add(npp);
                                              npp.addImport(new DemandImport(new NamespaceReference("java.lang")));
                                              processType(npp,cd.element);
                                             
                            }
                            // JavaP.g:369:13: (typech= typeDeclaration )*
                            loop3:
                            do {
                                int alt3=2;
                                int LA3_0 = input.LA(1);

                                if ( (LA3_0==ENUM||LA3_0==26||LA3_0==28||(LA3_0>=31 && LA3_0<=37)||LA3_0==46||LA3_0==73) ) {
                                    alt3=1;
                                }


                                switch (alt3) {
                            	case 1 :
                            	    // JavaP.g:369:14: typech= typeDeclaration
                            	    {
                            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit298);
                            	    typech=typeDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typech.getTree());
                            	    if ( state.backtracking==0 ) {
                            	      processType(npp,typech.element);
                            	                     
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop3;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // JavaP.g:374:9: (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )*
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:374:9: (np= packageDeclaration )?
                    int alt5=2;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==25) ) {
                        alt5=1;
                    }
                    switch (alt5) {
                        case 1 :
                            // JavaP.g:374:10: np= packageDeclaration
                            {
                            pushFollow(FOLLOW_packageDeclaration_in_compilationUnit353);
                            np=packageDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, np.getTree());
                            if ( state.backtracking==0 ) {

                                            npp=np.element;
                                          
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                               if(npp == null) {
                                 npp = new NamespacePart(language().defaultNamespace());
                               }
                               npp.addImport(new DemandImport(new NamespaceReference("java.lang")));
                               retval.element.add(npp);
                              
                    }
                    // JavaP.g:386:9: (imp= importDeclaration )*
                    loop6:
                    do {
                        int alt6=2;
                        int LA6_0 = input.LA(1);

                        if ( (LA6_0==27) ) {
                            alt6=1;
                        }


                        switch (alt6) {
                    	case 1 :
                    	    // JavaP.g:386:10: imp= importDeclaration
                    	    {
                    	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit402);
                    	    imp=importDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, imp.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      npp.addImport(imp.element);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop6;
                        }
                    } while (true);

                    // JavaP.g:389:9: (typech= typeDeclaration )*
                    loop7:
                    do {
                        int alt7=2;
                        int LA7_0 = input.LA(1);

                        if ( (LA7_0==ENUM||LA7_0==26||LA7_0==28||(LA7_0>=31 && LA7_0<=37)||LA7_0==46||LA7_0==73) ) {
                            alt7=1;
                        }


                        switch (alt7) {
                    	case 1 :
                    	    // JavaP.g:389:10: typech= typeDeclaration
                    	    {
                    	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit439);
                    	    typech=typeDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typech.getTree());
                    	    if ( state.backtracking==0 ) {

                    	                 processType(npp,typech.element);
                    	                
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop7;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        public NamespacePart element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // JavaP.g:396:1: packageDeclaration returns [NamespacePart element] : pkgkw= 'package' qn= qualifiedName ';' ;
    public final Java_JavaP.packageDeclaration_return packageDeclaration() throws RecognitionException {
        Java_JavaP.packageDeclaration_return retval = new Java_JavaP.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token pkgkw=null;
        Token char_literal2=null;
        Java_JavaP.qualifiedName_return qn = null;


        Object pkgkw_tree=null;
        Object char_literal2_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // JavaP.g:397:5: (pkgkw= 'package' qn= qualifiedName ';' )
            // JavaP.g:397:9: pkgkw= 'package' qn= qualifiedName ';'
            {
            root_0 = (Object)adaptor.nil();

            pkgkw=(Token)match(input,25,FOLLOW_25_in_packageDeclaration487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            pkgkw_tree = (Object)adaptor.create(pkgkw);
            adaptor.addChild(root_0, pkgkw_tree);
            }
            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration491);
            qn=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            char_literal2=(Token)match(input,26,FOLLOW_26_in_packageDeclaration493); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal2_tree = (Object)adaptor.create(char_literal2);
            adaptor.addChild(root_0, char_literal2_tree);
            }
            if ( state.backtracking==0 ) {
              try{
                         retval.element = new NamespacePart(getDefaultNamespace().getOrCreateNamespace((qn!=null?input.toString(qn.start,qn.stop):null)));
                         setKeyword(retval.element,pkgkw);
                       }
                       catch(ModelException exc) {
                         //this should not happen, something is wrong with the parser
                         throw new ChameleonProgrammerException(exc);
                       }
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        public Import element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // JavaP.g:409:1: importDeclaration returns [Import element] : im= 'import' (st= 'static' )? qn= qualifiedName ( '.' '*' )? ';' ;
    public final Java_JavaP.importDeclaration_return importDeclaration() throws RecognitionException {
        Java_JavaP.importDeclaration_return retval = new Java_JavaP.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token im=null;
        Token st=null;
        Token char_literal3=null;
        Token char_literal4=null;
        Token char_literal5=null;
        Java_JavaP.qualifiedName_return qn = null;


        Object im_tree=null;
        Object st_tree=null;
        Object char_literal3_tree=null;
        Object char_literal4_tree=null;
        Object char_literal5_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // JavaP.g:410:5: (im= 'import' (st= 'static' )? qn= qualifiedName ( '.' '*' )? ';' )
            // JavaP.g:410:9: im= 'import' (st= 'static' )? qn= qualifiedName ( '.' '*' )? ';'
            {
            root_0 = (Object)adaptor.nil();

            im=(Token)match(input,27,FOLLOW_27_in_importDeclaration533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            im_tree = (Object)adaptor.create(im);
            adaptor.addChild(root_0, im_tree);
            }
            // JavaP.g:410:23: (st= 'static' )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==28) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // JavaP.g:0:0: st= 'static'
                    {
                    st=(Token)match(input,28,FOLLOW_28_in_importDeclaration537); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    st_tree = (Object)adaptor.create(st);
                    adaptor.addChild(root_0, st_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifiedName_in_importDeclaration542);
            qn=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            if ( state.backtracking==0 ) {
              if(st == null) {
                         retval.element = new TypeImport(typeRef((qn!=null?input.toString(qn.start,qn.stop):null)));
                         setKeyword(retval.element,im);
                       } else {
                         retval.element = new SingleStaticImport(typeRef(Util.getAllButLastPart((qn!=null?input.toString(qn.start,qn.stop):null))),Util.getLastPart((qn!=null?input.toString(qn.start,qn.stop):null)));
                         setKeyword(retval.element,im);
                       }
                      
            }
            // JavaP.g:419:10: ( '.' '*' )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==29) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // JavaP.g:419:11: '.' '*'
                    {
                    char_literal3=(Token)match(input,29,FOLLOW_29_in_importDeclaration566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal3_tree = (Object)adaptor.create(char_literal3);
                    adaptor.addChild(root_0, char_literal3_tree);
                    }
                    char_literal4=(Token)match(input,30,FOLLOW_30_in_importDeclaration568); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal4_tree = (Object)adaptor.create(char_literal4);
                    adaptor.addChild(root_0, char_literal4_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new DemandImport(new NamespaceReference((qn!=null?input.toString(qn.start,qn.stop):null)));
                                   setKeyword(retval.element,im);
                                  
                    }

                    }
                    break;

            }

            char_literal5=(Token)match(input,26,FOLLOW_26_in_importDeclaration587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal5_tree = (Object)adaptor.create(char_literal5);
            adaptor.addChild(root_0, char_literal5_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // JavaP.g:426:1: typeDeclaration returns [Type element] : (cd= classOrInterfaceDeclaration | ';' );
    public final Java_JavaP.typeDeclaration_return typeDeclaration() throws RecognitionException {
        Java_JavaP.typeDeclaration_return retval = new Java_JavaP.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal6=null;
        Java_JavaP.classOrInterfaceDeclaration_return cd = null;


        Object char_literal6_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // JavaP.g:427:5: (cd= classOrInterfaceDeclaration | ';' )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==ENUM||LA11_0==28||(LA11_0>=31 && LA11_0<=37)||LA11_0==46||LA11_0==73) ) {
                alt11=1;
            }
            else if ( (LA11_0==26) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // JavaP.g:427:9: cd= classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration617);
                    cd=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cd.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:428:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal6=(Token)match(input,26,FOLLOW_26_in_typeDeclaration629); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal6_tree = (Object)adaptor.create(char_literal6);
                    adaptor.addChild(root_0, char_literal6_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceDeclaration"
    // JavaP.g:434:1: classOrInterfaceDeclaration returns [Type element] : mods= classOrInterfaceModifiers (cd= classDeclaration | id= interfaceDeclaration ) ;
    public final Java_JavaP.classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        Java_JavaP.classOrInterfaceDeclaration_return retval = new Java_JavaP.classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.classOrInterfaceModifiers_return mods = null;

        Java_JavaP.classDeclaration_return cd = null;

        Java_JavaP.interfaceDeclaration_return id = null;



        Token start = null; 
              Token end = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // JavaP.g:441:5: (mods= classOrInterfaceModifiers (cd= classDeclaration | id= interfaceDeclaration ) )
            // JavaP.g:441:9: mods= classOrInterfaceModifiers (cd= classDeclaration | id= interfaceDeclaration )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_classOrInterfaceModifiers_in_classOrInterfaceDeclaration669);
            mods=classOrInterfaceModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            if ( state.backtracking==0 ) {
              if(mods != null) {start=mods.start;}
            }
            // JavaP.g:443:10: (cd= classDeclaration | id= interfaceDeclaration )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ENUM||LA12_0==37) ) {
                alt12=1;
            }
            else if ( (LA12_0==46||LA12_0==73) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // JavaP.g:443:11: cd= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration702);
                    cd=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=cd.element; end = cd.stop; if(mods == null) {start=cd.start;}
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:445:13: id= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration738);
                    id=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=id.element; end=id.stop; if(mods == null) {start=id.start;}
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              if(retval.element != null) {
                         for(Modifier mod:mods.element) {
                           retval.element.addModifier(mod);
                         }
                       }
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                check_null(retval.element);
                setLocation(retval.element, start, end);

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDeclaration"

    public static class classOrInterfaceModifiers_return extends ParserRuleReturnScope {
        public List<Modifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceModifiers"
    // JavaP.g:454:1: classOrInterfaceModifiers returns [List<Modifier> element] : (mod= classOrInterfaceModifier )* ;
    public final Java_JavaP.classOrInterfaceModifiers_return classOrInterfaceModifiers() throws RecognitionException {
        Java_JavaP.classOrInterfaceModifiers_return retval = new Java_JavaP.classOrInterfaceModifiers_return();
        retval.start = input.LT(1);
        int classOrInterfaceModifiers_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.classOrInterfaceModifier_return mod = null;



        retval.element = new ArrayList<Modifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // JavaP.g:456:5: ( (mod= classOrInterfaceModifier )* )
            // JavaP.g:456:9: (mod= classOrInterfaceModifier )*
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:456:9: (mod= classOrInterfaceModifier )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==73) ) {
                    int LA13_2 = input.LA(2);

                    if ( (LA13_2==Identifier) ) {
                        alt13=1;
                    }


                }
                else if ( (LA13_0==28||(LA13_0>=31 && LA13_0<=36)) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // JavaP.g:456:10: mod= classOrInterfaceModifier
            	    {
            	    pushFollow(FOLLOW_classOrInterfaceModifier_in_classOrInterfaceModifiers804);
            	    mod=classOrInterfaceModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(mod.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, classOrInterfaceModifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceModifiers"

    public static class classOrInterfaceModifier_return extends ParserRuleReturnScope {
        public Modifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceModifier"
    // JavaP.g:459:1: classOrInterfaceModifier returns [Modifier element] : (a= annotation | 'public' | 'protected' | 'private' | 'abstract' | 'static' | 'final' | 'strictfp' );
    public final Java_JavaP.classOrInterfaceModifier_return classOrInterfaceModifier() throws RecognitionException {
        Java_JavaP.classOrInterfaceModifier_return retval = new Java_JavaP.classOrInterfaceModifier_return();
        retval.start = input.LT(1);
        int classOrInterfaceModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal7=null;
        Token string_literal8=null;
        Token string_literal9=null;
        Token string_literal10=null;
        Token string_literal11=null;
        Token string_literal12=null;
        Token string_literal13=null;
        Java_JavaP.annotation_return a = null;


        Object string_literal7_tree=null;
        Object string_literal8_tree=null;
        Object string_literal9_tree=null;
        Object string_literal10_tree=null;
        Object string_literal11_tree=null;
        Object string_literal12_tree=null;
        Object string_literal13_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // JavaP.g:461:5: (a= annotation | 'public' | 'protected' | 'private' | 'abstract' | 'static' | 'final' | 'strictfp' )
            int alt14=8;
            switch ( input.LA(1) ) {
            case 73:
                {
                alt14=1;
                }
                break;
            case 31:
                {
                alt14=2;
                }
                break;
            case 32:
                {
                alt14=3;
                }
                break;
            case 33:
                {
                alt14=4;
                }
                break;
            case 34:
                {
                alt14=5;
                }
                break;
            case 28:
                {
                alt14=6;
                }
                break;
            case 35:
                {
                alt14=7;
                }
                break;
            case 36:
                {
                alt14=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // JavaP.g:461:9: a= annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_classOrInterfaceModifier837);
                    a=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = a.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:462:9: 'public'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal7=(Token)match(input,31,FOLLOW_31_in_classOrInterfaceModifier851); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal7_tree = (Object)adaptor.create(string_literal7);
                    adaptor.addChild(root_0, string_literal7_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Public();
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:463:9: 'protected'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal8=(Token)match(input,32,FOLLOW_32_in_classOrInterfaceModifier867); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal8_tree = (Object)adaptor.create(string_literal8);
                    adaptor.addChild(root_0, string_literal8_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Protected();
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:464:9: 'private'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal9=(Token)match(input,33,FOLLOW_33_in_classOrInterfaceModifier880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal9_tree = (Object)adaptor.create(string_literal9);
                    adaptor.addChild(root_0, string_literal9_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Private();
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:465:9: 'abstract'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal10=(Token)match(input,34,FOLLOW_34_in_classOrInterfaceModifier895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal10_tree = (Object)adaptor.create(string_literal10);
                    adaptor.addChild(root_0, string_literal10_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Abstract();
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:466:9: 'static'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal11=(Token)match(input,28,FOLLOW_28_in_classOrInterfaceModifier909); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal11_tree = (Object)adaptor.create(string_literal11);
                    adaptor.addChild(root_0, string_literal11_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Static();
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:467:9: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal12=(Token)match(input,35,FOLLOW_35_in_classOrInterfaceModifier925); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal12_tree = (Object)adaptor.create(string_literal12);
                    adaptor.addChild(root_0, string_literal12_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Final();
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:468:9: 'strictfp'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal13=(Token)match(input,36,FOLLOW_36_in_classOrInterfaceModifier942); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal13_tree = (Object)adaptor.create(string_literal13);
                    adaptor.addChild(root_0, string_literal13_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new StrictFP();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, classOrInterfaceModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceModifier"

    public static class modifiers_return extends ParserRuleReturnScope {
        public List<Modifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiers"
    // JavaP.g:471:1: modifiers returns [List<Modifier> element] : (mod= modifier )* ;
    public final Java_JavaP.modifiers_return modifiers() throws RecognitionException {
        Java_JavaP.modifiers_return retval = new Java_JavaP.modifiers_return();
        retval.start = input.LT(1);
        int modifiers_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.modifier_return mod = null;



        retval.element = new ArrayList<Modifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // JavaP.g:473:5: ( (mod= modifier )* )
            // JavaP.g:473:9: (mod= modifier )*
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:473:9: (mod= modifier )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==73) ) {
                    int LA15_2 = input.LA(2);

                    if ( (LA15_2==Identifier) ) {
                        alt15=1;
                    }


                }
                else if ( (LA15_0==28||(LA15_0>=31 && LA15_0<=36)||(LA15_0>=52 && LA15_0<=55)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // JavaP.g:473:10: mod= modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifiers977);
            	    mod=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(mod.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, modifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifiers"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // JavaP.g:476:1: classDeclaration returns [Type element] : (cd= normalClassDeclaration | ed= enumDeclaration );
    public final Java_JavaP.classDeclaration_return classDeclaration() throws RecognitionException {
        Java_JavaP.classDeclaration_return retval = new Java_JavaP.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.normalClassDeclaration_return cd = null;

        Java_JavaP.enumDeclaration_return ed = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // JavaP.g:478:5: (cd= normalClassDeclaration | ed= enumDeclaration )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==37) ) {
                alt16=1;
            }
            else if ( (LA16_0==ENUM) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // JavaP.g:478:9: cd= normalClassDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration1009);
                    cd=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                       retval.element = cd.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:479:9: ed= enumDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration1023);
                    ed=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ed.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = ed.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class normalClassDeclaration_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalClassDeclaration"
    // JavaP.g:482:1: normalClassDeclaration returns [RegularType element] : clkw= 'class' t= nameAndParams (extkw= 'extends' sc= type )? (impkw= 'implements' trefs= typeList )? body= classBody ;
    public final Java_JavaP.normalClassDeclaration_return normalClassDeclaration() throws RecognitionException {
        Java_JavaP.normalClassDeclaration_return retval = new Java_JavaP.normalClassDeclaration_return();
        retval.start = input.LT(1);
        int normalClassDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token clkw=null;
        Token extkw=null;
        Token impkw=null;
        Java_JavaP.nameAndParams_return t = null;

        Java_JavaP.type_return sc = null;

        Java_JavaP.typeList_return trefs = null;

        Java_JavaP.classBody_return body = null;


        Object clkw_tree=null;
        Object extkw_tree=null;
        Object impkw_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // JavaP.g:483:5: (clkw= 'class' t= nameAndParams (extkw= 'extends' sc= type )? (impkw= 'implements' trefs= typeList )? body= classBody )
            // JavaP.g:483:9: clkw= 'class' t= nameAndParams (extkw= 'extends' sc= type )? (impkw= 'implements' trefs= typeList )? body= classBody
            {
            root_0 = (Object)adaptor.nil();

            clkw=(Token)match(input,37,FOLLOW_37_in_normalClassDeclaration1054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            clkw_tree = (Object)adaptor.create(clkw);
            adaptor.addChild(root_0, clkw_tree);
            }
            pushFollow(FOLLOW_nameAndParams_in_normalClassDeclaration1058);
            t=nameAndParams();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            if ( state.backtracking==0 ) {
              retval.element=t.element;
            }
            // JavaP.g:484:9: (extkw= 'extends' sc= type )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==38) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // JavaP.g:484:10: extkw= 'extends' sc= type
                    {
                    extkw=(Token)match(input,38,FOLLOW_38_in_normalClassDeclaration1073); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    extkw_tree = (Object)adaptor.create(extkw);
                    adaptor.addChild(root_0, extkw_tree);
                    }
                    pushFollow(FOLLOW_type_in_normalClassDeclaration1077);
                    sc=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sc.getTree());
                    if ( state.backtracking==0 ) {
                      SubtypeRelation extRelation = new SubtypeRelation(sc.element); 
                                   retval.element.addInheritanceRelation(extRelation);
                                   setKeyword(extRelation,extkw);
                                  
                    }

                    }
                    break;

            }

            // JavaP.g:489:9: (impkw= 'implements' trefs= typeList )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==39) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // JavaP.g:489:10: impkw= 'implements' trefs= typeList
                    {
                    impkw=(Token)match(input,39,FOLLOW_39_in_normalClassDeclaration1108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    impkw_tree = (Object)adaptor.create(impkw);
                    adaptor.addChild(root_0, impkw_tree);
                    }
                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration1112);
                    trefs=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trefs.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeReference ref: trefs.element) {
                                      SubtypeRelation rel = new SubtypeRelation(ref);
                                      retval.element.addInheritanceRelation(rel);
                                      rel.addModifier(new Implements());
                                      setKeyword(rel, impkw);
                                   }
                                  
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalClassDeclaration1142);
            body=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {

                            if(body.element != null) {
                              retval.element.body().addAll(body.element.elements());
                            }
                           
            }
            if ( state.backtracking==0 ) {

                       setKeyword(retval.element,clkw);
                       // FIXME: the implements keyword should not be attached to the class, but there is only one.
                       setKeyword(retval.element,impkw);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, normalClassDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalClassDeclaration"

    public static class nameAndParams_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nameAndParams"
    // JavaP.g:509:1: nameAndParams returns [RegularType element] : tt= createClassHereBecauseANTLRisAnnoying (params= typeParameters )? ;
    public final Java_JavaP.nameAndParams_return nameAndParams() throws RecognitionException {
        Java_JavaP.nameAndParams_return retval = new Java_JavaP.nameAndParams_return();
        retval.start = input.LT(1);
        int nameAndParams_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.createClassHereBecauseANTLRisAnnoying_return tt = null;

        Java_JavaP.typeParameters_return params = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // JavaP.g:510:3: (tt= createClassHereBecauseANTLRisAnnoying (params= typeParameters )? )
            // JavaP.g:511:5: tt= createClassHereBecauseANTLRisAnnoying (params= typeParameters )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_createClassHereBecauseANTLRisAnnoying_in_nameAndParams1183);
            tt=createClassHereBecauseANTLRisAnnoying();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tt.getTree());
            if ( state.backtracking==0 ) {
              retval.element=tt.element;
            }
            // JavaP.g:511:75: (params= typeParameters )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==40) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // JavaP.g:511:76: params= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_nameAndParams1190);
                    params=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, params.getTree());
                    if ( state.backtracking==0 ) {
                      for(FormalTypeParameter par: params.element){retval.element.addParameter(TypeParameter.class,par);}
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, nameAndParams_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nameAndParams"

    public static class createClassHereBecauseANTLRisAnnoying_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createClassHereBecauseANTLRisAnnoying"
    // JavaP.g:514:1: createClassHereBecauseANTLRisAnnoying returns [RegularType element] : name= identifierRule ;
    public final Java_JavaP.createClassHereBecauseANTLRisAnnoying_return createClassHereBecauseANTLRisAnnoying() throws RecognitionException {
        Java_JavaP.createClassHereBecauseANTLRisAnnoying_return retval = new Java_JavaP.createClassHereBecauseANTLRisAnnoying_return();
        retval.start = input.LT(1);
        int createClassHereBecauseANTLRisAnnoying_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return name = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // JavaP.g:515:4: (name= identifierRule )
            // JavaP.g:515:7: name= identifierRule
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_createClassHereBecauseANTLRisAnnoying1222);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createType(new SimpleNameSignature((name!=null?input.toString(name.start,name.stop):null))); setName(retval.element,name.start);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, createClassHereBecauseANTLRisAnnoying_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "createClassHereBecauseANTLRisAnnoying"

    public static class typeParameters_return extends ParserRuleReturnScope {
        public List<FormalTypeParameter> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // JavaP.g:518:1: typeParameters returns [List<FormalTypeParameter> element] : '<' par= typeParameter ( ',' par= typeParameter )* '>' ;
    public final Java_JavaP.typeParameters_return typeParameters() throws RecognitionException {
        Java_JavaP.typeParameters_return retval = new Java_JavaP.typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal14=null;
        Token char_literal15=null;
        Token char_literal16=null;
        Java_JavaP.typeParameter_return par = null;


        Object char_literal14_tree=null;
        Object char_literal15_tree=null;
        Object char_literal16_tree=null;

        retval.element = new ArrayList<FormalTypeParameter>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // JavaP.g:520:5: ( '<' par= typeParameter ( ',' par= typeParameter )* '>' )
            // JavaP.g:520:9: '<' par= typeParameter ( ',' par= typeParameter )* '>'
            {
            root_0 = (Object)adaptor.nil();

            char_literal14=(Token)match(input,40,FOLLOW_40_in_typeParameters1254); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal14_tree = (Object)adaptor.create(char_literal14);
            adaptor.addChild(root_0, char_literal14_tree);
            }
            pushFollow(FOLLOW_typeParameter_in_typeParameters1258);
            par=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, par.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add(par.element);
            }
            // JavaP.g:520:65: ( ',' par= typeParameter )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==41) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // JavaP.g:520:66: ',' par= typeParameter
            	    {
            	    char_literal15=(Token)match(input,41,FOLLOW_41_in_typeParameters1262); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal15_tree = (Object)adaptor.create(char_literal15);
            	    adaptor.addChild(root_0, char_literal15_tree);
            	    }
            	    pushFollow(FOLLOW_typeParameter_in_typeParameters1266);
            	    par=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, par.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(par.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            char_literal16=(Token)match(input,42,FOLLOW_42_in_typeParameters1271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal16_tree = (Object)adaptor.create(char_literal16);
            adaptor.addChild(root_0, char_literal16_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        public FormalTypeParameter element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // JavaP.g:523:1: typeParameter returns [FormalTypeParameter element] : name= identifierRule (extkw= 'extends' bound= typeBound )? ;
    public final Java_JavaP.typeParameter_return typeParameter() throws RecognitionException {
        Java_JavaP.typeParameter_return retval = new Java_JavaP.typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Object root_0 = null;

        Token extkw=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeBound_return bound = null;


        Object extkw_tree=null;


        Token stop = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // JavaP.g:527:5: (name= identifierRule (extkw= 'extends' bound= typeBound )? )
            // JavaP.g:527:9: name= identifierRule (extkw= 'extends' bound= typeBound )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_typeParameter1300);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new FormalTypeParameter(new SimpleNameSignature((name!=null?input.toString(name.start,name.stop):null))); stop=name.start;
            }
            // JavaP.g:527:126: (extkw= 'extends' bound= typeBound )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==38) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // JavaP.g:527:127: extkw= 'extends' bound= typeBound
                    {
                    extkw=(Token)match(input,38,FOLLOW_38_in_typeParameter1306); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    extkw_tree = (Object)adaptor.create(extkw);
                    adaptor.addChild(root_0, extkw_tree);
                    }
                    pushFollow(FOLLOW_typeBound_in_typeParameter1310);
                    bound=typeBound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bound.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addConstraint(bound.element); stop=bound.stop;
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setKeyword(retval.element,extkw);
                       setLocation(retval.element, name.start, stop);
                       setName(retval.element,name.start);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class typeBound_return extends ParserRuleReturnScope {
        public ExtendsConstraint element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeBound"
    // JavaP.g:534:1: typeBound returns [ExtendsConstraint element] : tp= type ( '&' tpp= type )* ;
    public final Java_JavaP.typeBound_return typeBound() throws RecognitionException {
        Java_JavaP.typeBound_return retval = new Java_JavaP.typeBound_return();
        retval.start = input.LT(1);
        int typeBound_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal17=null;
        Java_JavaP.type_return tp = null;

        Java_JavaP.type_return tpp = null;


        Object char_literal17_tree=null;

        retval.element = new ExtendsConstraint();
        JavaIntersectionTypeReference ref = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // JavaP.g:538:5: (tp= type ( '&' tpp= type )* )
            // JavaP.g:538:9: tp= type ( '&' tpp= type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeBound1360);
            tp=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tp.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setTypeReference(tp.element);
            }
            // JavaP.g:540:10: ( '&' tpp= type )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==43) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // JavaP.g:540:11: '&' tpp= type
            	    {
            	    char_literal17=(Token)match(input,43,FOLLOW_43_in_typeBound1384); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal17_tree = (Object)adaptor.create(char_literal17);
            	    adaptor.addChild(root_0, char_literal17_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeBound1388);
            	    tpp=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, tpp.getTree());
            	    if ( state.backtracking==0 ) {

            	                 if(ref == null) {
            	                   ref = new JavaIntersectionTypeReference();
            	                   ref.add(retval.element.typeReference());
            	                   retval.element.setTypeReference(ref);
            	                 }
            	                 ref.add(tpp.element);
            	                
            	    }

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, typeBound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeBound"

    protected static class enumDeclaration_scope {
        Type enumType;
    }
    protected Stack enumDeclaration_stack = new Stack();

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // JavaP.g:552:1: enumDeclaration returns [RegularType element] : ENUM name= identifierRule ( 'implements' trefs= typeList )? body= enumBody ;
    public final Java_JavaP.enumDeclaration_return enumDeclaration() throws RecognitionException {
        enumDeclaration_stack.push(new enumDeclaration_scope());
        Java_JavaP.enumDeclaration_return retval = new Java_JavaP.enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ENUM18=null;
        Token string_literal19=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeList_return trefs = null;

        Java_JavaP.enumBody_return body = null;


        Object ENUM18_tree=null;
        Object string_literal19_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // JavaP.g:556:5: ( ENUM name= identifierRule ( 'implements' trefs= typeList )? body= enumBody )
            // JavaP.g:556:9: ENUM name= identifierRule ( 'implements' trefs= typeList )? body= enumBody
            {
            root_0 = (Object)adaptor.nil();

            ENUM18=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration1439); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENUM18_tree = (Object)adaptor.create(ENUM18);
            adaptor.addChild(root_0, ENUM18_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_enumDeclaration1443);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createType(new SimpleNameSignature((name!=null?input.toString(name.start,name.stop):null))); 
                                            retval.element.addModifier(new Enum()); 
                                            ((enumDeclaration_scope)enumDeclaration_stack.peek()).enumType =retval.element;
                                            setName(retval.element,name.start);
            }
            // JavaP.g:560:19: ( 'implements' trefs= typeList )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==39) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // JavaP.g:560:20: 'implements' trefs= typeList
                    {
                    string_literal19=(Token)match(input,39,FOLLOW_39_in_enumDeclaration1466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal19_tree = (Object)adaptor.create(string_literal19);
                    adaptor.addChild(root_0, string_literal19_tree);
                    }
                    pushFollow(FOLLOW_typeList_in_enumDeclaration1470);
                    trefs=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trefs.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeReference ref: trefs.element)
                                                     {
                                                      SubtypeRelation rel = new SubtypeRelation(ref);
                                                      retval.element.addInheritanceRelation(rel);
                                                      rel.addModifier(new Implements());
                                                      } 
                                                
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration1545);
            body=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setBody(body.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, enumDeclaration_StartIndex); }
            enumDeclaration_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // JavaP.g:573:1: enumBody returns [ClassBody element] : '{' (csts= enumConstants )? ( ',' )? (decls= enumBodyDeclarations )? '}' ;
    public final Java_JavaP.enumBody_return enumBody() throws RecognitionException {
        Java_JavaP.enumBody_return retval = new Java_JavaP.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal20=null;
        Token char_literal21=null;
        Token char_literal22=null;
        Java_JavaP.enumConstants_return csts = null;

        Java_JavaP.enumBodyDeclarations_return decls = null;


        Object char_literal20_tree=null;
        Object char_literal21_tree=null;
        Object char_literal22_tree=null;

        retval.element = new ClassBody();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // JavaP.g:575:5: ( '{' (csts= enumConstants )? ( ',' )? (decls= enumBodyDeclarations )? '}' )
            // JavaP.g:575:9: '{' (csts= enumConstants )? ( ',' )? (decls= enumBodyDeclarations )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal20=(Token)match(input,44,FOLLOW_44_in_enumBody1575); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal20_tree = (Object)adaptor.create(char_literal20);
            adaptor.addChild(root_0, char_literal20_tree);
            }
            // JavaP.g:575:13: (csts= enumConstants )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==Identifier||LA24_0==73) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // JavaP.g:575:14: csts= enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody1580);
                    csts=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, csts.getTree());
                    if ( state.backtracking==0 ) {

                                   for(EnumConstant el: csts.element) {
                                      retval.element.add(el);
                                   }
                                  
                    }

                    }
                    break;

            }

            // JavaP.g:580:17: ( ',' )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==41) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // JavaP.g:0:0: ','
                    {
                    char_literal21=(Token)match(input,41,FOLLOW_41_in_enumBody1598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal21_tree = (Object)adaptor.create(char_literal21);
                    adaptor.addChild(root_0, char_literal21_tree);
                    }

                    }
                    break;

            }

            // JavaP.g:580:22: (decls= enumBodyDeclarations )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==26) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // JavaP.g:580:23: decls= enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody1604);
                    decls=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeElement el: decls.element){retval.element.add(el);}
                    }

                    }
                    break;

            }

            char_literal22=(Token)match(input,45,FOLLOW_45_in_enumBody1610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal22_tree = (Object)adaptor.create(char_literal22);
            adaptor.addChild(root_0, char_literal22_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        public List<EnumConstant> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // JavaP.g:583:1: enumConstants returns [List<EnumConstant> element] : ct= enumConstant ( ',' cst= enumConstant )* ;
    public final Java_JavaP.enumConstants_return enumConstants() throws RecognitionException {
        Java_JavaP.enumConstants_return retval = new Java_JavaP.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal23=null;
        Java_JavaP.enumConstant_return ct = null;

        Java_JavaP.enumConstant_return cst = null;


        Object char_literal23_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // JavaP.g:584:5: (ct= enumConstant ( ',' cst= enumConstant )* )
            // JavaP.g:584:9: ct= enumConstant ( ',' cst= enumConstant )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants1635);
            ct=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ct.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<EnumConstant>(); retval.element.add(ct.element);
            }
            // JavaP.g:584:107: ( ',' cst= enumConstant )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==41) ) {
                    int LA27_1 = input.LA(2);

                    if ( (LA27_1==Identifier||LA27_1==73) ) {
                        alt27=1;
                    }


                }


                switch (alt27) {
            	case 1 :
            	    // JavaP.g:584:108: ',' cst= enumConstant
            	    {
            	    char_literal23=(Token)match(input,41,FOLLOW_41_in_enumConstants1640); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal23_tree = (Object)adaptor.create(char_literal23);
            	    adaptor.addChild(root_0, char_literal23_tree);
            	    }
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants1644);
            	    cst=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cst.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(cst.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        public EnumConstant element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // JavaP.g:587:1: enumConstant returns [EnumConstant element] : ( annotations )? name= identifierRule (args= arguments )? (body= classBody )? ;
    public final Java_JavaP.enumConstant_return enumConstant() throws RecognitionException {
        Java_JavaP.enumConstant_return retval = new Java_JavaP.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;

        Java_JavaP.classBody_return body = null;

        Java_JavaP.annotations_return annotations24 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // JavaP.g:588:5: ( ( annotations )? name= identifierRule (args= arguments )? (body= classBody )? )
            // JavaP.g:588:9: ( annotations )? name= identifierRule (args= arguments )? (body= classBody )?
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:588:9: ( annotations )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==73) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // JavaP.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant1674);
                    annotations24=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotations24.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_identifierRule_in_enumConstant1679);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new EnumConstant(new SimpleNameSignature((name!=null?input.toString(name.start,name.stop):null)));
            }
            // JavaP.g:588:116: (args= arguments )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==66) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // JavaP.g:588:117: args= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant1686);
                    args=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addAllParameters(args.element);
                    }

                    }
                    break;

            }

            // JavaP.g:588:183: (body= classBody )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==44) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // JavaP.g:588:184: body= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant1695);
                    body=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.setBody(body.element);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        public List<TypeElement> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // JavaP.g:591:1: enumBodyDeclarations returns [List<TypeElement> element] : ';' (decl= classBodyDeclaration )* ;
    public final Java_JavaP.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        Java_JavaP.enumBodyDeclarations_return retval = new Java_JavaP.enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal25=null;
        Java_JavaP.classBodyDeclaration_return decl = null;


        Object char_literal25_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // JavaP.g:592:5: ( ';' (decl= classBodyDeclaration )* )
            // JavaP.g:592:9: ';' (decl= classBodyDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            char_literal25=(Token)match(input,26,FOLLOW_26_in_enumBodyDeclarations1726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal25_tree = (Object)adaptor.create(char_literal25);
            adaptor.addChild(root_0, char_literal25_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element= new ArrayList<TypeElement>();
            }
            // JavaP.g:592:61: (decl= classBodyDeclaration )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ENUM||LA31_0==Identifier||LA31_0==26||LA31_0==28||(LA31_0>=31 && LA31_0<=37)||LA31_0==40||LA31_0==44||(LA31_0>=46 && LA31_0<=47)||(LA31_0>=52 && LA31_0<=63)||LA31_0==73) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // JavaP.g:592:62: decl= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1733);
            	    decl=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(decl.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // JavaP.g:595:1: interfaceDeclaration returns [Type element] : (id= normalInterfaceDeclaration | ad= annotationTypeDeclaration );
    public final Java_JavaP.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        Java_JavaP.interfaceDeclaration_return retval = new Java_JavaP.interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.normalInterfaceDeclaration_return id = null;

        Java_JavaP.annotationTypeDeclaration_return ad = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // JavaP.g:597:5: (id= normalInterfaceDeclaration | ad= annotationTypeDeclaration )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==46) ) {
                alt32=1;
            }
            else if ( (LA32_0==73) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // JavaP.g:597:9: id= normalInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1770);
                    id=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = id.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:598:9: ad= annotationTypeDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1784);
                    ad=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ad.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = ad.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // JavaP.g:601:1: normalInterfaceDeclaration returns [RegularType element] : ifkw= 'interface' name= identifierRule (params= typeParameters )? (extkw= 'extends' trefs= typeList )? body= classBody ;
    public final Java_JavaP.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        Java_JavaP.normalInterfaceDeclaration_return retval = new Java_JavaP.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ifkw=null;
        Token extkw=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeParameters_return params = null;

        Java_JavaP.typeList_return trefs = null;

        Java_JavaP.classBody_return body = null;


        Object ifkw_tree=null;
        Object extkw_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // JavaP.g:602:5: (ifkw= 'interface' name= identifierRule (params= typeParameters )? (extkw= 'extends' trefs= typeList )? body= classBody )
            // JavaP.g:602:9: ifkw= 'interface' name= identifierRule (params= typeParameters )? (extkw= 'extends' trefs= typeList )? body= classBody
            {
            root_0 = (Object)adaptor.nil();

            ifkw=(Token)match(input,46,FOLLOW_46_in_normalInterfaceDeclaration1815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ifkw_tree = (Object)adaptor.create(ifkw);
            adaptor.addChild(root_0, ifkw_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_normalInterfaceDeclaration1819);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createType(new SimpleNameSignature((name!=null?input.toString(name.start,name.stop):null))); 
                                                        retval.element.addModifier(new Interface());
                                                        setName(retval.element,name.start);
            }
            // JavaP.g:605:10: (params= typeParameters )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==40) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // JavaP.g:605:11: params= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration1836);
                    params=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, params.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeParameter par: params.element){retval.element.addParameter(TypeParameter.class,par);}
                    }

                    }
                    break;

            }

            // JavaP.g:606:10: (extkw= 'extends' trefs= typeList )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==38) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // JavaP.g:606:11: extkw= 'extends' trefs= typeList
                    {
                    extkw=(Token)match(input,38,FOLLOW_38_in_normalInterfaceDeclaration1854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    extkw_tree = (Object)adaptor.create(extkw);
                    adaptor.addChild(root_0, extkw_tree);
                    }
                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration1858);
                    trefs=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trefs.getTree());
                    if ( state.backtracking==0 ) {

                                   for(TypeReference ref: trefs.element){
                                    retval.element.addInheritanceRelation(new SubtypeRelation(ref));
                                   } 
                                 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalInterfaceDeclaration1898);
            body=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setBody(body.element);
            }
            if ( state.backtracking==0 ) {

                        setKeyword(retval.element,extkw);
                        setKeyword(retval.element,ifkw);
                       
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        public List<TypeReference> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // JavaP.g:620:1: typeList returns [List<TypeReference> element] : tp= type ( ',' tpp= type )* ;
    public final Java_JavaP.typeList_return typeList() throws RecognitionException {
        Java_JavaP.typeList_return retval = new Java_JavaP.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal26=null;
        Java_JavaP.type_return tp = null;

        Java_JavaP.type_return tpp = null;


        Object char_literal26_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // JavaP.g:621:5: (tp= type ( ',' tpp= type )* )
            // JavaP.g:621:9: tp= type ( ',' tpp= type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList1940);
            tp=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tp.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<TypeReference>(); retval.element.add(tp.element);
            }
            // JavaP.g:621:99: ( ',' tpp= type )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==41) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // JavaP.g:621:100: ',' tpp= type
            	    {
            	    char_literal26=(Token)match(input,41,FOLLOW_41_in_typeList1944); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal26_tree = (Object)adaptor.create(char_literal26);
            	    adaptor.addChild(root_0, char_literal26_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList1948);
            	    tpp=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, tpp.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(tpp.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // JavaP.g:624:1: classBody returns [ClassBody element] : '{' (decl= classBodyDeclaration )* '}' ;
    public final Java_JavaP.classBody_return classBody() throws RecognitionException {
        Java_JavaP.classBody_return retval = new Java_JavaP.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal27=null;
        Token char_literal28=null;
        Java_JavaP.classBodyDeclaration_return decl = null;


        Object char_literal27_tree=null;
        Object char_literal28_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // JavaP.g:625:5: ( '{' (decl= classBodyDeclaration )* '}' )
            // JavaP.g:625:9: '{' (decl= classBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal27=(Token)match(input,44,FOLLOW_44_in_classBody1979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal27_tree = (Object)adaptor.create(char_literal27);
            adaptor.addChild(root_0, char_literal27_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new ClassBody();
            }
            // JavaP.g:625:49: (decl= classBodyDeclaration )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==ENUM||LA36_0==Identifier||LA36_0==26||LA36_0==28||(LA36_0>=31 && LA36_0<=37)||LA36_0==40||LA36_0==44||(LA36_0>=46 && LA36_0<=47)||(LA36_0>=52 && LA36_0<=63)||LA36_0==73) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // JavaP.g:625:50: decl= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody1986);
            	    decl=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(decl.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            char_literal28=(Token)match(input,45,FOLLOW_45_in_classBody1992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal28_tree = (Object)adaptor.create(char_literal28);
            adaptor.addChild(root_0, char_literal28_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // JavaP.g:628:1: interfaceBody returns [ClassBody element] : '{' (decl= interfaceBodyDeclaration )* '}' ;
    public final Java_JavaP.interfaceBody_return interfaceBody() throws RecognitionException {
        Java_JavaP.interfaceBody_return retval = new Java_JavaP.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal29=null;
        Token char_literal30=null;
        Java_JavaP.interfaceBodyDeclaration_return decl = null;


        Object char_literal29_tree=null;
        Object char_literal30_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // JavaP.g:629:5: ( '{' (decl= interfaceBodyDeclaration )* '}' )
            // JavaP.g:629:9: '{' (decl= interfaceBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal29=(Token)match(input,44,FOLLOW_44_in_interfaceBody2019); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal29_tree = (Object)adaptor.create(char_literal29);
            adaptor.addChild(root_0, char_literal29_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new ClassBody();
            }
            // JavaP.g:630:13: (decl= interfaceBodyDeclaration )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==ENUM||LA37_0==Identifier||LA37_0==26||LA37_0==28||(LA37_0>=31 && LA37_0<=37)||LA37_0==40||(LA37_0>=46 && LA37_0<=47)||(LA37_0>=52 && LA37_0<=63)||LA37_0==73) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // JavaP.g:630:14: decl= interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody2039);
            	    decl=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            	    if ( state.backtracking==0 ) {
            	      if(decl != null && decl.element != null) {retval.element.add(decl.element);}
            	    }

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);

            char_literal30=(Token)match(input,45,FOLLOW_45_in_interfaceBody2087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal30_tree = (Object)adaptor.create(char_literal30);
            adaptor.addChild(root_0, char_literal30_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // JavaP.g:636:1: classBodyDeclaration returns [TypeElement element] : (sckw= ';' | (stkw= 'static' )? bl= block | mods= modifiers decl= memberDecl );
    public final Java_JavaP.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        Java_JavaP.classBodyDeclaration_return retval = new Java_JavaP.classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token sckw=null;
        Token stkw=null;
        Java_JavaP.block_return bl = null;

        Java_JavaP.modifiers_return mods = null;

        Java_JavaP.memberDecl_return decl = null;


        Object sckw_tree=null;
        Object stkw_tree=null;


          Token start=null;
          Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // JavaP.g:642:5: (sckw= ';' | (stkw= 'static' )? bl= block | mods= modifiers decl= memberDecl )
            int alt39=3;
            switch ( input.LA(1) ) {
            case 26:
                {
                alt39=1;
                }
                break;
            case 28:
                {
                int LA39_2 = input.LA(2);

                if ( (LA39_2==44) ) {
                    alt39=2;
                }
                else if ( (LA39_2==ENUM||LA39_2==Identifier||LA39_2==28||(LA39_2>=31 && LA39_2<=37)||LA39_2==40||(LA39_2>=46 && LA39_2<=47)||(LA39_2>=52 && LA39_2<=63)||LA39_2==73) ) {
                    alt39=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 2, input);

                    throw nvae;
                }
                }
                break;
            case 44:
                {
                alt39=2;
                }
                break;
            case ENUM:
            case Identifier:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 40:
            case 46:
            case 47:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 73:
                {
                alt39=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    // JavaP.g:642:9: sckw= ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    sckw=(Token)match(input,26,FOLLOW_26_in_classBodyDeclaration2120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sckw_tree = (Object)adaptor.create(sckw);
                    adaptor.addChild(root_0, sckw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new EmptyTypeElement(); start=sckw; stop=sckw;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:643:9: (stkw= 'static' )? bl= block
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:643:13: (stkw= 'static' )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==28) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // JavaP.g:0:0: stkw= 'static'
                            {
                            stkw=(Token)match(input,28,FOLLOW_28_in_classBodyDeclaration2134); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            stkw_tree = (Object)adaptor.create(stkw);
                            adaptor.addChild(root_0, stkw_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration2139);
                    bl=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new StaticInitializer(bl.element); start=stkw;stop=bl.stop;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:644:9: mods= modifiers decl= memberDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifiers_in_classBodyDeclaration2153);
                    mods=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
                    pushFollow(FOLLOW_memberDecl_in_classBodyDeclaration2157);
                    decl=memberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl.element;
                              if(retval.element != null) { 
                                retval.element.addModifiers(mods.element); start=mods.start; stop=decl.stop;
                              }
                             
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)start, (CommonToken)stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class memberDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberDecl"
    // JavaP.g:652:1: memberDecl returns [TypeElement element] : (gen= genericMethodOrConstructorDecl | mem= memberDeclaration | vmd= voidMethodDeclaration | cs= constructorDeclaration | id= interfaceDeclaration | cd= classDeclaration );
    public final Java_JavaP.memberDecl_return memberDecl() throws RecognitionException {
        Java_JavaP.memberDecl_return retval = new Java_JavaP.memberDecl_return();
        retval.start = input.LT(1);
        int memberDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.genericMethodOrConstructorDecl_return gen = null;

        Java_JavaP.memberDeclaration_return mem = null;

        Java_JavaP.voidMethodDeclaration_return vmd = null;

        Java_JavaP.constructorDeclaration_return cs = null;

        Java_JavaP.interfaceDeclaration_return id = null;

        Java_JavaP.classDeclaration_return cd = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // JavaP.g:653:5: (gen= genericMethodOrConstructorDecl | mem= memberDeclaration | vmd= voidMethodDeclaration | cs= constructorDeclaration | id= interfaceDeclaration | cd= classDeclaration )
            int alt40=6;
            switch ( input.LA(1) ) {
            case 40:
                {
                alt40=1;
                }
                break;
            case Identifier:
                {
                int LA40_2 = input.LA(2);

                if ( (LA40_2==Identifier||LA40_2==29||LA40_2==40||LA40_2==48) ) {
                    alt40=2;
                }
                else if ( (LA40_2==66) ) {
                    alt40=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 2, input);

                    throw nvae;
                }
                }
                break;
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
                {
                alt40=2;
                }
                break;
            case 47:
                {
                alt40=3;
                }
                break;
            case 46:
            case 73:
                {
                alt40=5;
                }
                break;
            case ENUM:
            case 37:
                {
                alt40=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }

            switch (alt40) {
                case 1 :
                    // JavaP.g:653:9: gen= genericMethodOrConstructorDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl2196);
                    gen=genericMethodOrConstructorDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = gen.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:654:9: mem= memberDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_memberDeclaration_in_memberDecl2210);
                    mem=memberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mem.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = mem.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:655:9: vmd= voidMethodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_voidMethodDeclaration_in_memberDecl2224);
                    vmd=voidMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vmd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = vmd.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:656:9: cs= constructorDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_constructorDeclaration_in_memberDecl2238);
                    cs=constructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cs.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cs.element;
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:657:9: id= interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl2252);
                    id=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=id.element; addNonTopLevelObjectInheritance(id.element);
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:658:9: cd= classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_memberDecl2266);
                    cd=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=cd.element; addNonTopLevelObjectInheritance(cd.element);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, memberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberDecl"

    public static class voidMethodDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaration"
    // JavaP.g:661:1: voidMethodDeclaration returns [Method element] : vt= voidType methodname= identifierRule voidMethodDeclaratorRest ;
    public final Java_JavaP.voidMethodDeclaration_return voidMethodDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.voidMethodDeclaration_return retval = new Java_JavaP.voidMethodDeclaration_return();
        retval.start = input.LT(1);
        int voidMethodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.voidType_return vt = null;

        Java_JavaP.identifierRule_return methodname = null;

        Java_JavaP.voidMethodDeclaratorRest_return voidMethodDeclaratorRest31 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // JavaP.g:664:6: (vt= voidType methodname= identifierRule voidMethodDeclaratorRest )
            // JavaP.g:664:8: vt= voidType methodname= identifierRule voidMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_voidType_in_voidMethodDeclaration2305);
            vt=voidType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vt.getTree());
            pushFollow(FOLLOW_identifierRule_in_voidMethodDeclaration2309);
            methodname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodname.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameDeclarationWithParametersHeader((methodname!=null?input.toString(methodname.start,methodname.stop):null)), vt.element); 
                  	  ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                  	  setName(retval.element,methodname.start);
                  	  
            }
            pushFollow(FOLLOW_voidMethodDeclaratorRest_in_voidMethodDeclaration2320);
            voidMethodDeclaratorRest31=voidMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, voidMethodDeclaratorRest31.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setName(retval.element, methodname.start);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, voidMethodDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaration"

    public static class voidType_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidType"
    // JavaP.g:671:1: voidType returns [JavaTypeReference element] : 'void' ;
    public final Java_JavaP.voidType_return voidType() throws RecognitionException {
        Java_JavaP.voidType_return retval = new Java_JavaP.voidType_return();
        retval.start = input.LT(1);
        int voidType_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal32=null;

        Object string_literal32_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // JavaP.g:673:7: ( 'void' )
            // JavaP.g:673:10: 'void'
            {
            root_0 = (Object)adaptor.nil();

            string_literal32=(Token)match(input,47,FOLLOW_47_in_voidType2350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal32_tree = (Object)adaptor.create(string_literal32);
            adaptor.addChild(root_0, string_literal32_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element=typeRef("void");
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop, "__PRIMITIVE");
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, voidType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidType"

    public static class constructorDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaration"
    // JavaP.g:676:1: constructorDeclaration returns [Method element] : consname= identifierRule constructorDeclaratorRest ;
    public final Java_JavaP.constructorDeclaration_return constructorDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.constructorDeclaration_return retval = new Java_JavaP.constructorDeclaration_return();
        retval.start = input.LT(1);
        int constructorDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return consname = null;

        Java_JavaP.constructorDeclaratorRest_return constructorDeclaratorRest33 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // JavaP.g:678:9: (consname= identifierRule constructorDeclaratorRest )
            // JavaP.g:678:11: consname= identifierRule constructorDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_constructorDeclaration2391);
            consname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, consname.getTree());
            if ( state.backtracking==0 ) {

                           retval.element = createNormalMethod(new SimpleNameDeclarationWithParametersHeader((consname!=null?input.toString(consname.start,consname.stop):null)), typeRef((consname!=null?input.toString(consname.start,consname.stop):null))); 
                           retval.element.addModifier(new JavaConstructor());
                           ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                           setName(retval.element, consname.start);
                          
            }
            pushFollow(FOLLOW_constructorDeclaratorRest_in_constructorDeclaration2422);
            constructorDeclaratorRest33=constructorDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest33.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, constructorDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "constructorDeclaration"

    public static class memberDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberDeclaration"
    // JavaP.g:688:1: memberDeclaration returns [TypeElement element] : (method= methodDeclaration | field= fieldDeclaration );
    public final Java_JavaP.memberDeclaration_return memberDeclaration() throws RecognitionException {
        Java_JavaP.memberDeclaration_return retval = new Java_JavaP.memberDeclaration_return();
        retval.start = input.LT(1);
        int memberDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.methodDeclaration_return method = null;

        Java_JavaP.fieldDeclaration_return field = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // JavaP.g:689:5: (method= methodDeclaration | field= fieldDeclaration )
            int alt41=2;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // JavaP.g:689:9: method= methodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_methodDeclaration_in_memberDeclaration2448);
                    method=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=method.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:690:9: field= fieldDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fieldDeclaration_in_memberDeclaration2462);
                    field=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=field.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, memberDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberDeclaration"

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorDecl"
    // JavaP.g:693:1: genericMethodOrConstructorDecl returns [Method element] : params= typeParameters rest= genericMethodOrConstructorRest ;
    public final Java_JavaP.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        Java_JavaP.genericMethodOrConstructorDecl_return retval = new Java_JavaP.genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.typeParameters_return params = null;

        Java_JavaP.genericMethodOrConstructorRest_return rest = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // JavaP.g:694:5: (params= typeParameters rest= genericMethodOrConstructorRest )
            // JavaP.g:694:9: params= typeParameters rest= genericMethodOrConstructorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl2489);
            params=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, params.getTree());
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl2493);
            rest=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
            if ( state.backtracking==0 ) {
              retval.element = rest.element; retval.element.header().addAllTypeParameters(params.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, genericMethodOrConstructorDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorRest"
    // JavaP.g:697:1: genericMethodOrConstructorRest returns [Method element] : ( (t= type | 'void' ) name= identifierRule methodDeclaratorRest | name= identifierRule constructorDeclaratorRest );
    public final Java_JavaP.genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.genericMethodOrConstructorRest_return retval = new Java_JavaP.genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal34=null;
        Java_JavaP.type_return t = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.methodDeclaratorRest_return methodDeclaratorRest35 = null;

        Java_JavaP.constructorDeclaratorRest_return constructorDeclaratorRest36 = null;


        Object string_literal34_tree=null;

        TypeReference tref = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // JavaP.g:701:5: ( (t= type | 'void' ) name= identifierRule methodDeclaratorRest | name= identifierRule constructorDeclaratorRest )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==Identifier) ) {
                int LA43_1 = input.LA(2);

                if ( (LA43_1==Identifier||LA43_1==29||LA43_1==40||LA43_1==48) ) {
                    alt43=1;
                }
                else if ( (LA43_1==66) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA43_0==47||(LA43_0>=56 && LA43_0<=63)) ) {
                alt43=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // JavaP.g:701:9: (t= type | 'void' ) name= identifierRule methodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:701:9: (t= type | 'void' )
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==Identifier||(LA42_0>=56 && LA42_0<=63)) ) {
                        alt42=1;
                    }
                    else if ( (LA42_0==47) ) {
                        alt42=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 0, input);

                        throw nvae;
                    }
                    switch (alt42) {
                        case 1 :
                            // JavaP.g:701:10: t= type
                            {
                            pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest2538);
                            t=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                            if ( state.backtracking==0 ) {
                              tref=t.element;
                            }

                            }
                            break;
                        case 2 :
                            // JavaP.g:701:36: 'void'
                            {
                            string_literal34=(Token)match(input,47,FOLLOW_47_in_genericMethodOrConstructorRest2543); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal34_tree = (Object)adaptor.create(string_literal34);
                            adaptor.addChild(root_0, string_literal34_tree);
                            }
                            if ( state.backtracking==0 ) {
                              tref = typeRef("void");
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_identifierRule_in_genericMethodOrConstructorRest2550);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createNormalMethod(new SimpleNameDeclarationWithParametersHeader((name!=null?input.toString(name.start,name.stop):null)),tref); 
                               ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                               setName(retval.element,name.start);
                              
                    }
                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest2563);
                    methodDeclaratorRest35=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaratorRest35.getTree());

                    }
                    break;
                case 2 :
                    // JavaP.g:706:9: name= identifierRule constructorDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierRule_in_genericMethodOrConstructorRest2575);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createNormalMethod(new SimpleNameDeclarationWithParametersHeader((name!=null?input.toString(name.start,name.stop):null)),typeRef((name!=null?input.toString(name.start,name.stop):null))); 
                               ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                               setName(retval.element,name.start);
                              
                    }
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest2588);
                    constructorDeclaratorRest36=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest36.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, genericMethodOrConstructorRest_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorRest"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // JavaP.g:713:1: methodDeclaration returns [Method element] : t= type name= identifierRule methodDeclaratorRest ;
    public final Java_JavaP.methodDeclaration_return methodDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.methodDeclaration_return retval = new Java_JavaP.methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.type_return t = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.methodDeclaratorRest_return methodDeclaratorRest37 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // JavaP.g:715:5: (t= type name= identifierRule methodDeclaratorRest )
            // JavaP.g:715:9: t= type name= identifierRule methodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_methodDeclaration2618);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            pushFollow(FOLLOW_identifierRule_in_methodDeclaration2622);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameDeclarationWithParametersHeader((name!=null?input.toString(name.start,name.stop):null)),t.element); 
                       ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                       setName(retval.element,name.start);
                       
            }
            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration2635);
            methodDeclaratorRest37=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaratorRest37.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, methodDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        public MemberVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // JavaP.g:722:1: fieldDeclaration returns [MemberVariableDeclarator element] : ref= type decls= variableDeclarators ';' ;
    public final Java_JavaP.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        Java_JavaP.fieldDeclaration_return retval = new Java_JavaP.fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal38=null;
        Java_JavaP.type_return ref = null;

        Java_JavaP.variableDeclarators_return decls = null;


        Object char_literal38_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // JavaP.g:723:5: (ref= type decls= variableDeclarators ';' )
            // JavaP.g:723:9: ref= type decls= variableDeclarators ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_fieldDeclaration2660);
            ref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new MemberVariableDeclarator(ref.element);
            }
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration2666);
            decls=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
            if ( state.backtracking==0 ) {
              for(VariableDeclaration decl: decls.element) {retval.element.add(decl);}
            }
            char_literal38=(Token)match(input,26,FOLLOW_26_in_fieldDeclaration2670); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal38_tree = (Object)adaptor.create(char_literal38);
            adaptor.addChild(root_0, char_literal38_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // JavaP.g:726:1: interfaceBodyDeclaration returns [TypeElement element] : (mods= modifiers decl= interfaceMemberDecl | ';' );
    public final Java_JavaP.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        Java_JavaP.interfaceBodyDeclaration_return retval = new Java_JavaP.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal39=null;
        Java_JavaP.modifiers_return mods = null;

        Java_JavaP.interfaceMemberDecl_return decl = null;


        Object char_literal39_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // JavaP.g:727:5: (mods= modifiers decl= interfaceMemberDecl | ';' )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==ENUM||LA44_0==Identifier||LA44_0==28||(LA44_0>=31 && LA44_0<=37)||LA44_0==40||(LA44_0>=46 && LA44_0<=47)||(LA44_0>=52 && LA44_0<=63)||LA44_0==73) ) {
                alt44=1;
            }
            else if ( (LA44_0==26) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // JavaP.g:727:9: mods= modifiers decl= interfaceMemberDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifiers_in_interfaceBodyDeclaration2703);
                    mods=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
                    pushFollow(FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration2707);
                    decl=interfaceMemberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl.element; for(Modifier mod: mods.element){retval.element.addModifier(mod);}
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:728:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal39=(Token)match(input,26,FOLLOW_26_in_interfaceBodyDeclaration2719); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal39_tree = (Object)adaptor.create(char_literal39);
                    adaptor.addChild(root_0, char_literal39_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class interfaceMemberDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMemberDecl"
    // JavaP.g:731:1: interfaceMemberDecl returns [TypeElement element] : (decl= interfaceMethodOrFieldDecl | decl2= interfaceGenericMethodDecl | decl5= voidInterfaceMethodDeclaration | decl3= interfaceDeclaration | decl4= classDeclaration );
    public final Java_JavaP.interfaceMemberDecl_return interfaceMemberDecl() throws RecognitionException {
        Java_JavaP.interfaceMemberDecl_return retval = new Java_JavaP.interfaceMemberDecl_return();
        retval.start = input.LT(1);
        int interfaceMemberDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.interfaceMethodOrFieldDecl_return decl = null;

        Java_JavaP.interfaceGenericMethodDecl_return decl2 = null;

        Java_JavaP.voidInterfaceMethodDeclaration_return decl5 = null;

        Java_JavaP.interfaceDeclaration_return decl3 = null;

        Java_JavaP.classDeclaration_return decl4 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // JavaP.g:732:5: (decl= interfaceMethodOrFieldDecl | decl2= interfaceGenericMethodDecl | decl5= voidInterfaceMethodDeclaration | decl3= interfaceDeclaration | decl4= classDeclaration )
            int alt45=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
                {
                alt45=1;
                }
                break;
            case 40:
                {
                alt45=2;
                }
                break;
            case 47:
                {
                alt45=3;
                }
                break;
            case 46:
            case 73:
                {
                alt45=4;
                }
                break;
            case ENUM:
            case 37:
                {
                alt45=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }

            switch (alt45) {
                case 1 :
                    // JavaP.g:732:9: decl= interfaceMethodOrFieldDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl2744);
                    decl=interfaceMethodOrFieldDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:733:9: decl2= interfaceGenericMethodDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl2758);
                    decl2=interfaceGenericMethodDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl2.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:734:9: decl5= voidInterfaceMethodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_voidInterfaceMethodDeclaration_in_interfaceMemberDecl2772);
                    decl5=voidInterfaceMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl5.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl5.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:735:9: decl3= interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceMemberDecl2786);
                    decl3=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl3.element; addNonTopLevelObjectInheritance(decl3.element);
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:736:9: decl4= classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_interfaceMemberDecl2800);
                    decl4=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl4.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl4.element;  addNonTopLevelObjectInheritance(decl4.element);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, interfaceMemberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMemberDecl"

    public static class voidInterfaceMethodDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaration"
    // JavaP.g:739:1: voidInterfaceMethodDeclaration returns [Method element] : vt= voidType methodname= identifierRule voidInterfaceMethodDeclaratorRest ;
    public final Java_JavaP.voidInterfaceMethodDeclaration_return voidInterfaceMethodDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.voidInterfaceMethodDeclaration_return retval = new Java_JavaP.voidInterfaceMethodDeclaration_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.voidType_return vt = null;

        Java_JavaP.identifierRule_return methodname = null;

        Java_JavaP.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest40 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // JavaP.g:741:6: (vt= voidType methodname= identifierRule voidInterfaceMethodDeclaratorRest )
            // JavaP.g:741:8: vt= voidType methodname= identifierRule voidInterfaceMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_voidType_in_voidInterfaceMethodDeclaration2836);
            vt=voidType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vt.getTree());
            pushFollow(FOLLOW_identifierRule_in_voidInterfaceMethodDeclaration2840);
            methodname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodname.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameDeclarationWithParametersHeader((methodname!=null?input.toString(methodname.start,methodname.stop):null)), vt.element); 
                  	   ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                  	   setName(retval.element,methodname.start);
                  	   
            }
            pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_voidInterfaceMethodDeclaration2852);
            voidInterfaceMethodDeclaratorRest40=voidInterfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, voidInterfaceMethodDeclaratorRest40.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, voidInterfaceMethodDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaration"

    public static class interfaceMethodOrFieldDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodOrFieldDecl"
    // JavaP.g:748:1: interfaceMethodOrFieldDecl returns [TypeElement element] : (cst= interfaceConstant | m= interfaceMethod );
    public final Java_JavaP.interfaceMethodOrFieldDecl_return interfaceMethodOrFieldDecl() throws RecognitionException {
        Java_JavaP.interfaceMethodOrFieldDecl_return retval = new Java_JavaP.interfaceMethodOrFieldDecl_return();
        retval.start = input.LT(1);
        int interfaceMethodOrFieldDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.interfaceConstant_return cst = null;

        Java_JavaP.interfaceMethod_return m = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // JavaP.g:749:5: (cst= interfaceConstant | m= interfaceMethod )
            int alt46=2;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // JavaP.g:749:9: cst= interfaceConstant
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceConstant_in_interfaceMethodOrFieldDecl2886);
                    cst=interfaceConstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cst.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cst.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:750:9: m= interfaceMethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethod_in_interfaceMethodOrFieldDecl2900);
                    m=interfaceMethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, m.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = m.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, interfaceMethodOrFieldDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodOrFieldDecl"

    public static class interfaceConstant_return extends ParserRuleReturnScope {
        public MemberVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceConstant"
    // JavaP.g:754:1: interfaceConstant returns [MemberVariableDeclarator element] : ref= type decl= constantDeclarator ( ',' dec= constantDeclarator )* ';' ;
    public final Java_JavaP.interfaceConstant_return interfaceConstant() throws RecognitionException {
        Java_JavaP.interfaceConstant_return retval = new Java_JavaP.interfaceConstant_return();
        retval.start = input.LT(1);
        int interfaceConstant_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal41=null;
        Token char_literal42=null;
        Java_JavaP.type_return ref = null;

        Java_JavaP.constantDeclarator_return decl = null;

        Java_JavaP.constantDeclarator_return dec = null;


        Object char_literal41_tree=null;
        Object char_literal42_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // JavaP.g:755:5: (ref= type decl= constantDeclarator ( ',' dec= constantDeclarator )* ';' )
            // JavaP.g:755:9: ref= type decl= constantDeclarator ( ',' dec= constantDeclarator )* ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_interfaceConstant2936);
            ref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new MemberVariableDeclarator(ref.element);
            }
            pushFollow(FOLLOW_constantDeclarator_in_interfaceConstant2942);
            decl=constantDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add(decl.element);
            }
            // JavaP.g:755:139: ( ',' dec= constantDeclarator )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==41) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // JavaP.g:755:140: ',' dec= constantDeclarator
            	    {
            	    char_literal41=(Token)match(input,41,FOLLOW_41_in_interfaceConstant2946); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal41_tree = (Object)adaptor.create(char_literal41);
            	    adaptor.addChild(root_0, char_literal41_tree);
            	    }
            	    pushFollow(FOLLOW_constantDeclarator_in_interfaceConstant2950);
            	    dec=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dec.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(dec.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);

            char_literal42=(Token)match(input,26,FOLLOW_26_in_interfaceConstant2956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal42_tree = (Object)adaptor.create(char_literal42);
            adaptor.addChild(root_0, char_literal42_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, interfaceConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceConstant"

    public static class interfaceMethod_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethod"
    // JavaP.g:758:1: interfaceMethod returns [Method element] : tref= type methodname= identifierRule interfaceMethodDeclaratorRest ;
    public final Java_JavaP.interfaceMethod_return interfaceMethod() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.interfaceMethod_return retval = new Java_JavaP.interfaceMethod_return();
        retval.start = input.LT(1);
        int interfaceMethod_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.type_return tref = null;

        Java_JavaP.identifierRule_return methodname = null;

        Java_JavaP.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest43 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // JavaP.g:760:2: (tref= type methodname= identifierRule interfaceMethodDeclaratorRest )
            // JavaP.g:760:4: tref= type methodname= identifierRule interfaceMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_interfaceMethod2981);
            tref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
            pushFollow(FOLLOW_identifierRule_in_interfaceMethod2985);
            methodname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodname.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameDeclarationWithParametersHeader((methodname!=null?input.toString(methodname.start,methodname.stop):null)), tref.element); 
              	    ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
              	    setName(retval.element,methodname.start);
              	   
            }
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethod2999);
            interfaceMethodDeclaratorRest43=interfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaratorRest43.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, interfaceMethod_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "interfaceMethod"

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaratorRest"
    // JavaP.g:769:1: methodDeclaratorRest : pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) ;
    public final Java_JavaP.methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        Java_JavaP.methodDeclaratorRest_return retval = new Java_JavaP.methodDeclaratorRest_return();
        retval.start = input.LT(1);
        int methodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token thrkw=null;
        Token char_literal44=null;
        Token char_literal45=null;
        Token char_literal46=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;

        Java_JavaP.methodBody_return body = null;


        Object thrkw_tree=null;
        Object char_literal44_tree=null;
        Object char_literal45_tree=null;
        Object char_literal46_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // JavaP.g:771:5: (pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) )
            // JavaP.g:771:9: pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest3026);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){
                             ((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);
                          }
                         
            }
            // JavaP.g:776:9: ( '[' ']' )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==48) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // JavaP.g:776:10: '[' ']'
            	    {
            	    char_literal44=(Token)match(input,48,FOLLOW_48_in_methodDeclaratorRest3052); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal44_tree = (Object)adaptor.create(char_literal44);
            	    adaptor.addChild(root_0, char_literal44_tree);
            	    }
            	    char_literal45=(Token)match(input,49,FOLLOW_49_in_methodDeclaratorRest3054); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal45_tree = (Object)adaptor.create(char_literal45);
            	    adaptor.addChild(root_0, char_literal45_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if(count > 0) {
                         JavaTypeReference original = (JavaTypeReference)((MethodScope_scope)MethodScope_stack.peek()).method.returnTypeReference();
                         ((MethodScope_scope)MethodScope_stack.peek()).method.setReturnTypeReference(new ArrayTypeReference(original,count));
                       }
                      
            }
            // JavaP.g:782:9: (thrkw= 'throws' names= qualifiedNameList )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==50) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // JavaP.g:782:10: thrkw= 'throws' names= qualifiedNameList
                    {
                    thrkw=(Token)match(input,50,FOLLOW_50_in_methodDeclaratorRest3082); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thrkw_tree = (Object)adaptor.create(thrkw);
                    adaptor.addChild(root_0, thrkw_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaratorRest3086);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            // JavaP.g:783:9: (body= methodBody | ';' )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==44) ) {
                alt50=1;
            }
            else if ( (LA50_0==26) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // JavaP.g:783:13: body= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest3106);
                    body=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(new RegularImplementation(body.element));
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:784:13: ';'
                    {
                    char_literal46=(Token)match(input,26,FOLLOW_26_in_methodDeclaratorRest3122); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal46_tree = (Object)adaptor.create(char_literal46);
                    adaptor.addChild(root_0, char_literal46_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(null);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setKeyword(((MethodScope_scope)MethodScope_stack.peek()).method,thrkw);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, methodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaratorRest"

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaratorRest"
    // JavaP.g:789:1: voidMethodDeclaratorRest : pars= formalParameters (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) ;
    public final Java_JavaP.voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        Java_JavaP.voidMethodDeclaratorRest_return retval = new Java_JavaP.voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token thrkw=null;
        Token char_literal47=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;

        Java_JavaP.methodBody_return body = null;


        Object thrkw_tree=null;
        Object char_literal47_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // JavaP.g:790:5: (pars= formalParameters (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) )
            // JavaP.g:790:9: pars= formalParameters (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest3169);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);}
            }
            // JavaP.g:791:10: (thrkw= 'throws' names= qualifiedNameList )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==50) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // JavaP.g:791:11: thrkw= 'throws' names= qualifiedNameList
                    {
                    thrkw=(Token)match(input,50,FOLLOW_50_in_voidMethodDeclaratorRest3185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thrkw_tree = (Object)adaptor.create(thrkw);
                    adaptor.addChild(root_0, thrkw_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest3189);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            // JavaP.g:792:9: (body= methodBody | ';' )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==44) ) {
                alt52=1;
            }
            else if ( (LA52_0==26) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // JavaP.g:792:13: body= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest3209);
                    body=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(new RegularImplementation(body.element));
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:793:13: ';'
                    {
                    char_literal47=(Token)match(input,26,FOLLOW_26_in_voidMethodDeclaratorRest3225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal47_tree = (Object)adaptor.create(char_literal47);
                    adaptor.addChild(root_0, char_literal47_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(null);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setKeyword(((MethodScope_scope)MethodScope_stack.peek()).method,thrkw);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, voidMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaratorRest"

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaratorRest"
    // JavaP.g:798:1: interfaceMethodDeclaratorRest : pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? ';' ;
    public final Java_JavaP.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        Java_JavaP.interfaceMethodDeclaratorRest_return retval = new Java_JavaP.interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token thrkw=null;
        Token char_literal48=null;
        Token char_literal49=null;
        Token char_literal50=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;


        Object thrkw_tree=null;
        Object char_literal48_tree=null;
        Object char_literal49_tree=null;
        Object char_literal50_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // JavaP.g:800:5: (pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? ';' )
            // JavaP.g:800:9: pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest3276);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);}
            }
            // JavaP.g:801:8: ( '[' ']' )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==48) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // JavaP.g:801:9: '[' ']'
            	    {
            	    char_literal48=(Token)match(input,48,FOLLOW_48_in_interfaceMethodDeclaratorRest3288); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal48_tree = (Object)adaptor.create(char_literal48);
            	    adaptor.addChild(root_0, char_literal48_tree);
            	    }
            	    char_literal49=(Token)match(input,49,FOLLOW_49_in_interfaceMethodDeclaratorRest3290); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal49_tree = (Object)adaptor.create(char_literal49);
            	    adaptor.addChild(root_0, char_literal49_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if(count > 0) {
                        JavaTypeReference original = (JavaTypeReference)((MethodScope_scope)MethodScope_stack.peek()).method.returnTypeReference();
                        ((MethodScope_scope)MethodScope_stack.peek()).method.setReturnTypeReference(new ArrayTypeReference(original,count));
                      }
                     
            }
            // JavaP.g:807:9: (thrkw= 'throws' names= qualifiedNameList )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==50) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // JavaP.g:807:10: thrkw= 'throws' names= qualifiedNameList
                    {
                    thrkw=(Token)match(input,50,FOLLOW_50_in_interfaceMethodDeclaratorRest3317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thrkw_tree = (Object)adaptor.create(thrkw);
                    adaptor.addChild(root_0, thrkw_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest3321);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            char_literal50=(Token)match(input,26,FOLLOW_26_in_interfaceMethodDeclaratorRest3327); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal50_tree = (Object)adaptor.create(char_literal50);
            adaptor.addChild(root_0, char_literal50_tree);
            }
            if ( state.backtracking==0 ) {
              setKeyword(((MethodScope_scope)MethodScope_stack.peek()).method,thrkw);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceGenericMethodDecl"
    // JavaP.g:811:1: interfaceGenericMethodDecl returns [TypeElement element] : typeParameters ( type | 'void' ) identifierRule interfaceMethodDeclaratorRest ;
    public final Java_JavaP.interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        Java_JavaP.interfaceGenericMethodDecl_return retval = new Java_JavaP.interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal53=null;
        Java_JavaP.typeParameters_return typeParameters51 = null;

        Java_JavaP.type_return type52 = null;

        Java_JavaP.identifierRule_return identifierRule54 = null;

        Java_JavaP.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest55 = null;


        Object string_literal53_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // JavaP.g:812:5: ( typeParameters ( type | 'void' ) identifierRule interfaceMethodDeclaratorRest )
            // JavaP.g:812:9: typeParameters ( type | 'void' ) identifierRule interfaceMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl3363);
            typeParameters51=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters51.getTree());
            // JavaP.g:812:24: ( type | 'void' )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Identifier||(LA55_0>=56 && LA55_0<=63)) ) {
                alt55=1;
            }
            else if ( (LA55_0==47) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // JavaP.g:812:25: type
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl3366);
                    type52=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type52.getTree());

                    }
                    break;
                case 2 :
                    // JavaP.g:812:32: 'void'
                    {
                    string_literal53=(Token)match(input,47,FOLLOW_47_in_interfaceGenericMethodDecl3370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal53_tree = (Object)adaptor.create(string_literal53);
                    adaptor.addChild(root_0, string_literal53_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_identifierRule_in_interfaceGenericMethodDecl3373);
            identifierRule54=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule54.getTree());
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl3383);
            interfaceMethodDeclaratorRest55=interfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaratorRest55.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, interfaceGenericMethodDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceGenericMethodDecl"

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // JavaP.g:816:1: voidInterfaceMethodDeclaratorRest : pars= formalParameters ( 'throws' names= qualifiedNameList )? ';' ;
    public final Java_JavaP.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        Java_JavaP.voidInterfaceMethodDeclaratorRest_return retval = new Java_JavaP.voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal56=null;
        Token char_literal57=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;


        Object string_literal56_tree=null;
        Object char_literal57_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // JavaP.g:817:5: (pars= formalParameters ( 'throws' names= qualifiedNameList )? ';' )
            // JavaP.g:817:9: pars= formalParameters ( 'throws' names= qualifiedNameList )? ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest3408);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);}
            }
            // JavaP.g:818:6: ( 'throws' names= qualifiedNameList )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==50) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // JavaP.g:818:7: 'throws' names= qualifiedNameList
                    {
                    string_literal56=(Token)match(input,50,FOLLOW_50_in_voidInterfaceMethodDeclaratorRest3418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal56_tree = (Object)adaptor.create(string_literal56);
                    adaptor.addChild(root_0, string_literal56_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest3422);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            char_literal57=(Token)match(input,26,FOLLOW_26_in_voidInterfaceMethodDeclaratorRest3434); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal57_tree = (Object)adaptor.create(char_literal57);
            adaptor.addChild(root_0, char_literal57_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaratorRest"
    // JavaP.g:822:1: constructorDeclaratorRest : pars= formalParameters ( 'throws' names= qualifiedNameList )? body= constructorBody ;
    public final Java_JavaP.constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        Java_JavaP.constructorDeclaratorRest_return retval = new Java_JavaP.constructorDeclaratorRest_return();
        retval.start = input.LT(1);
        int constructorDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal58=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;

        Java_JavaP.constructorBody_return body = null;


        Object string_literal58_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // JavaP.g:823:5: (pars= formalParameters ( 'throws' names= qualifiedNameList )? body= constructorBody )
            // JavaP.g:823:9: pars= formalParameters ( 'throws' names= qualifiedNameList )? body= constructorBody
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest3459);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);}
            }
            // JavaP.g:824:5: ( 'throws' names= qualifiedNameList )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==50) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // JavaP.g:824:6: 'throws' names= qualifiedNameList
                    {
                    string_literal58=(Token)match(input,50,FOLLOW_50_in_constructorDeclaratorRest3469); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal58_tree = (Object)adaptor.create(string_literal58);
                    adaptor.addChild(root_0, string_literal58_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_constructorDeclaratorRest3473);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_constructorBody_in_constructorDeclaratorRest3486);
            body=constructorBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(new RegularImplementation(body.element));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, constructorDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorDeclaratorRest"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        public JavaVariableDeclaration element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // JavaP.g:828:1: constantDeclarator returns [JavaVariableDeclaration element] : name= identifierRule ( ( '[' ']' )* '=' init= variableInitializer ) ;
    public final Java_JavaP.constantDeclarator_return constantDeclarator() throws RecognitionException {
        Java_JavaP.constantDeclarator_return retval = new Java_JavaP.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal59=null;
        Token char_literal60=null;
        Token char_literal61=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.variableInitializer_return init = null;


        Object char_literal59_tree=null;
        Object char_literal60_tree=null;
        Object char_literal61_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // JavaP.g:831:5: (name= identifierRule ( ( '[' ']' )* '=' init= variableInitializer ) )
            // JavaP.g:831:9: name= identifierRule ( ( '[' ']' )* '=' init= variableInitializer )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_constantDeclarator3521);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            // JavaP.g:831:29: ( ( '[' ']' )* '=' init= variableInitializer )
            // JavaP.g:831:30: ( '[' ']' )* '=' init= variableInitializer
            {
            // JavaP.g:831:30: ( '[' ']' )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==48) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // JavaP.g:831:31: '[' ']'
            	    {
            	    char_literal59=(Token)match(input,48,FOLLOW_48_in_constantDeclarator3525); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal59_tree = (Object)adaptor.create(char_literal59);
            	    adaptor.addChild(root_0, char_literal59_tree);
            	    }
            	    char_literal60=(Token)match(input,49,FOLLOW_49_in_constantDeclarator3527); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal60_tree = (Object)adaptor.create(char_literal60);
            	    adaptor.addChild(root_0, char_literal60_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            char_literal61=(Token)match(input,51,FOLLOW_51_in_constantDeclarator3533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal61_tree = (Object)adaptor.create(char_literal61);
            adaptor.addChild(root_0, char_literal61_tree);
            }
            pushFollow(FOLLOW_variableInitializer_in_constantDeclarator3537);
            init=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());

            }

            if ( state.backtracking==0 ) {
              retval.element = new JavaVariableDeclaration((name!=null?input.toString(name.start,name.stop):null));
                      retval.element.setArrayDimension(count); 
                      retval.element.setInitialization(init.element);
                      setName(retval.element, name.start);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        public List<VariableDeclaration> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarators"
    // JavaP.g:839:1: variableDeclarators returns [List<VariableDeclaration> element] : decl= variableDeclarator ( ',' decll= variableDeclarator )* ;
    public final Java_JavaP.variableDeclarators_return variableDeclarators() throws RecognitionException {
        Java_JavaP.variableDeclarators_return retval = new Java_JavaP.variableDeclarators_return();
        retval.start = input.LT(1);
        int variableDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal62=null;
        Java_JavaP.variableDeclarator_return decl = null;

        Java_JavaP.variableDeclarator_return decll = null;


        Object char_literal62_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // JavaP.g:840:5: (decl= variableDeclarator ( ',' decll= variableDeclarator )* )
            // JavaP.g:840:9: decl= variableDeclarator ( ',' decll= variableDeclarator )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators3577);
            decl=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<VariableDeclaration>(); retval.element.add(decl.element);
            }
            // JavaP.g:840:123: ( ',' decll= variableDeclarator )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==41) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // JavaP.g:840:124: ',' decll= variableDeclarator
            	    {
            	    char_literal62=(Token)match(input,41,FOLLOW_41_in_variableDeclarators3581); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal62_tree = (Object)adaptor.create(char_literal62);
            	    adaptor.addChild(root_0, char_literal62_tree);
            	    }
            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators3585);
            	    decll=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decll.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(decll.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, variableDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarators"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        public JavaVariableDeclaration element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // JavaP.g:843:1: variableDeclarator returns [JavaVariableDeclaration element] : id= variableDeclaratorId ( '=' init= variableInitializer )? ;
    public final Java_JavaP.variableDeclarator_return variableDeclarator() throws RecognitionException {
        Java_JavaP.variableDeclarator_return retval = new Java_JavaP.variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal63=null;
        Java_JavaP.variableDeclaratorId_return id = null;

        Java_JavaP.variableInitializer_return init = null;


        Object char_literal63_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // JavaP.g:845:5: (id= variableDeclaratorId ( '=' init= variableInitializer )? )
            // JavaP.g:845:9: id= variableDeclaratorId ( '=' init= variableInitializer )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclaratorId_in_variableDeclarator3618);
            id=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new JavaVariableDeclaration(id.element.name()); 
                            retval.element.setArrayDimension(id.element.dimension());
                            setName(retval.element, id.element.nameToken());
                            
            }
            // JavaP.g:849:17: ( '=' init= variableInitializer )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==51) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // JavaP.g:849:18: '=' init= variableInitializer
                    {
                    char_literal63=(Token)match(input,51,FOLLOW_51_in_variableDeclarator3637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal63_tree = (Object)adaptor.create(char_literal63);
                    adaptor.addChild(root_0, char_literal63_tree);
                    }
                    pushFollow(FOLLOW_variableInitializer_in_variableDeclarator3641);
                    init=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.setInitialization(init.element);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        public StupidVariableDeclaratorId element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // JavaP.g:854:1: variableDeclaratorId returns [StupidVariableDeclaratorId element] : name= identifierRule ( '[' ']' )* ;
    public final Java_JavaP.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        Java_JavaP.variableDeclaratorId_return retval = new Java_JavaP.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal64=null;
        Token char_literal65=null;
        Java_JavaP.identifierRule_return name = null;


        Object char_literal64_tree=null;
        Object char_literal65_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // JavaP.g:856:5: (name= identifierRule ( '[' ']' )* )
            // JavaP.g:856:9: name= identifierRule ( '[' ']' )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_variableDeclaratorId3684);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            // JavaP.g:856:29: ( '[' ']' )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==48) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // JavaP.g:856:30: '[' ']'
            	    {
            	    char_literal64=(Token)match(input,48,FOLLOW_48_in_variableDeclaratorId3687); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal64_tree = (Object)adaptor.create(char_literal64);
            	    adaptor.addChild(root_0, char_literal64_tree);
            	    }
            	    char_literal65=(Token)match(input,49,FOLLOW_49_in_variableDeclaratorId3689); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal65_tree = (Object)adaptor.create(char_literal65);
            	    adaptor.addChild(root_0, char_literal65_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               retval.element = new StupidVariableDeclaratorId((name!=null?input.toString(name.start,name.stop):null), count,(CommonToken)name.start);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // JavaP.g:859:1: variableInitializer returns [Expression element] : (init= arrayInitializer | expr= expression );
    public final Java_JavaP.variableInitializer_return variableInitializer() throws RecognitionException {
        Java_JavaP.variableInitializer_return retval = new Java_JavaP.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.arrayInitializer_return init = null;

        Java_JavaP.expression_return expr = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // JavaP.g:860:5: (init= arrayInitializer | expr= expression )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==44) ) {
                alt62=1;
            }
            else if ( ((LA62_0>=HexLiteral && LA62_0<=OctalLiteral)||LA62_0==FloatingPointLiteral||(LA62_0>=CharacterLiteral && LA62_0<=StringLiteral)||LA62_0==Identifier||LA62_0==47||(LA62_0>=56 && LA62_0<=63)||(LA62_0>=65 && LA62_0<=66)||(LA62_0>=69 && LA62_0<=72)||(LA62_0>=105 && LA62_0<=106)||(LA62_0>=109 && LA62_0<=113)) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // JavaP.g:860:9: init= arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer3720);
                    init=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = init.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:861:9: expr= expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer3734);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = expr.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        public ArrayInitializer element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // JavaP.g:864:1: arrayInitializer returns [ArrayInitializer element] : '{' (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )? '}' ;
    public final Java_JavaP.arrayInitializer_return arrayInitializer() throws RecognitionException {
        Java_JavaP.arrayInitializer_return retval = new Java_JavaP.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal66=null;
        Token char_literal67=null;
        Token char_literal68=null;
        Token char_literal69=null;
        Java_JavaP.variableInitializer_return init = null;

        Java_JavaP.variableInitializer_return initt = null;


        Object char_literal66_tree=null;
        Object char_literal67_tree=null;
        Object char_literal68_tree=null;
        Object char_literal69_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // JavaP.g:865:5: ( '{' (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )? '}' )
            // JavaP.g:865:9: '{' (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal66=(Token)match(input,44,FOLLOW_44_in_arrayInitializer3767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal66_tree = (Object)adaptor.create(char_literal66);
            adaptor.addChild(root_0, char_literal66_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new ArrayInitializer();
            }
            // JavaP.g:865:56: (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( ((LA65_0>=HexLiteral && LA65_0<=OctalLiteral)||LA65_0==FloatingPointLiteral||(LA65_0>=CharacterLiteral && LA65_0<=StringLiteral)||LA65_0==Identifier||LA65_0==44||LA65_0==47||(LA65_0>=56 && LA65_0<=63)||(LA65_0>=65 && LA65_0<=66)||(LA65_0>=69 && LA65_0<=72)||(LA65_0>=105 && LA65_0<=106)||(LA65_0>=109 && LA65_0<=113)) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // JavaP.g:865:57: init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3774);
                    init=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addInitializer(init.element);
                    }
                    // JavaP.g:865:128: ( ',' initt= variableInitializer )*
                    loop63:
                    do {
                        int alt63=2;
                        int LA63_0 = input.LA(1);

                        if ( (LA63_0==41) ) {
                            int LA63_1 = input.LA(2);

                            if ( ((LA63_1>=HexLiteral && LA63_1<=OctalLiteral)||LA63_1==FloatingPointLiteral||(LA63_1>=CharacterLiteral && LA63_1<=StringLiteral)||LA63_1==Identifier||LA63_1==44||LA63_1==47||(LA63_1>=56 && LA63_1<=63)||(LA63_1>=65 && LA63_1<=66)||(LA63_1>=69 && LA63_1<=72)||(LA63_1>=105 && LA63_1<=106)||(LA63_1>=109 && LA63_1<=113)) ) {
                                alt63=1;
                            }


                        }


                        switch (alt63) {
                    	case 1 :
                    	    // JavaP.g:865:129: ',' initt= variableInitializer
                    	    {
                    	    char_literal67=(Token)match(input,41,FOLLOW_41_in_arrayInitializer3778); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal67_tree = (Object)adaptor.create(char_literal67);
                    	    adaptor.addChild(root_0, char_literal67_tree);
                    	    }
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3782);
                    	    initt=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, initt.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      retval.element.addInitializer(initt.element);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);

                    // JavaP.g:865:208: ( ',' )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==41) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // JavaP.g:865:209: ','
                            {
                            char_literal68=(Token)match(input,41,FOLLOW_41_in_arrayInitializer3788); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal68_tree = (Object)adaptor.create(char_literal68);
                            adaptor.addChild(root_0, char_literal68_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal69=(Token)match(input,45,FOLLOW_45_in_arrayInitializer3795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal69_tree = (Object)adaptor.create(char_literal69);
            adaptor.addChild(root_0, char_literal69_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class modifier_return extends ParserRuleReturnScope {
        public Modifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // JavaP.g:868:1: modifier returns [Modifier element] : (mod= classOrInterfaceModifier | 'native' | 'synchronized' | 'transient' | 'volatile' );
    public final Java_JavaP.modifier_return modifier() throws RecognitionException {
        Java_JavaP.modifier_return retval = new Java_JavaP.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal70=null;
        Token string_literal71=null;
        Token string_literal72=null;
        Token string_literal73=null;
        Java_JavaP.classOrInterfaceModifier_return mod = null;


        Object string_literal70_tree=null;
        Object string_literal71_tree=null;
        Object string_literal72_tree=null;
        Object string_literal73_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // JavaP.g:874:5: (mod= classOrInterfaceModifier | 'native' | 'synchronized' | 'transient' | 'volatile' )
            int alt66=5;
            switch ( input.LA(1) ) {
            case 28:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 73:
                {
                alt66=1;
                }
                break;
            case 52:
                {
                alt66=2;
                }
                break;
            case 53:
                {
                alt66=3;
                }
                break;
            case 54:
                {
                alt66=4;
                }
                break;
            case 55:
                {
                alt66=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }

            switch (alt66) {
                case 1 :
                    // JavaP.g:874:9: mod= classOrInterfaceModifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceModifier_in_modifier3826);
                    mod=classOrInterfaceModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = mod.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:875:9: 'native'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal70=(Token)match(input,52,FOLLOW_52_in_modifier3838); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal70_tree = (Object)adaptor.create(string_literal70);
                    adaptor.addChild(root_0, string_literal70_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Native();
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:876:9: 'synchronized'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal71=(Token)match(input,53,FOLLOW_53_in_modifier3850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal71_tree = (Object)adaptor.create(string_literal71);
                    adaptor.addChild(root_0, string_literal71_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Synchronized();
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:877:9: 'transient'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal72=(Token)match(input,54,FOLLOW_54_in_modifier3862); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal72_tree = (Object)adaptor.create(string_literal72);
                    adaptor.addChild(root_0, string_literal72_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Transient();
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:878:9: 'volatile'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal73=(Token)match(input,55,FOLLOW_55_in_modifier3874); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal73_tree = (Object)adaptor.create(string_literal73);
                    adaptor.addChild(root_0, string_literal73_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Volatile();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class enumConstantName_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstantName"
    // JavaP.g:881:1: enumConstantName returns [String element] : id= identifierRule ;
    public final Java_JavaP.enumConstantName_return enumConstantName() throws RecognitionException {
        Java_JavaP.enumConstantName_return retval = new Java_JavaP.enumConstantName_return();
        retval.start = input.LT(1);
        int enumConstantName_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return id = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // JavaP.g:882:5: (id= identifierRule )
            // JavaP.g:882:9: id= identifierRule
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_enumConstantName3901);
            id=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              retval.element=(id!=null?input.toString(id.start,id.stop):null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, enumConstantName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstantName"

    public static class typeName_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // JavaP.g:885:1: typeName returns [String element] : name= qualifiedName ;
    public final Java_JavaP.typeName_return typeName() throws RecognitionException {
        Java_JavaP.typeName_return retval = new Java_JavaP.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.qualifiedName_return name = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // JavaP.g:886:5: (name= qualifiedName )
            // JavaP.g:886:9: name= qualifiedName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_typeName3928);
            name=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element=name.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // JavaP.g:889:1: type returns [JavaTypeReference element] : (cd= classOrInterfaceType ( '[' ']' )* | pt= primitiveType ( '[' ']' )* );
    public final Java_JavaP.type_return type() throws RecognitionException {
        Java_JavaP.type_return retval = new Java_JavaP.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal74=null;
        Token char_literal75=null;
        Token char_literal76=null;
        Token char_literal77=null;
        Java_JavaP.classOrInterfaceType_return cd = null;

        Java_JavaP.primitiveType_return pt = null;


        Object char_literal74_tree=null;
        Object char_literal75_tree=null;
        Object char_literal76_tree=null;
        Object char_literal77_tree=null;

        int dimension=0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // JavaP.g:892:2: (cd= classOrInterfaceType ( '[' ']' )* | pt= primitiveType ( '[' ']' )* )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==Identifier) ) {
                alt69=1;
            }
            else if ( ((LA69_0>=56 && LA69_0<=63)) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // JavaP.g:892:4: cd= classOrInterfaceType ( '[' ']' )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_type3958);
                    cd=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    // JavaP.g:892:28: ( '[' ']' )*
                    loop67:
                    do {
                        int alt67=2;
                        int LA67_0 = input.LA(1);

                        if ( (LA67_0==48) ) {
                            alt67=1;
                        }


                        switch (alt67) {
                    	case 1 :
                    	    // JavaP.g:892:29: '[' ']'
                    	    {
                    	    char_literal74=(Token)match(input,48,FOLLOW_48_in_type3961); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal74_tree = (Object)adaptor.create(char_literal74);
                    	    adaptor.addChild(root_0, char_literal74_tree);
                    	    }
                    	    char_literal75=(Token)match(input,49,FOLLOW_49_in_type3963); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal75_tree = (Object)adaptor.create(char_literal75);
                    	    adaptor.addChild(root_0, char_literal75_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      dimension++;
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      	         retval.element = cd.element.toArray(dimension);
                      	        
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:896:4: pt= primitiveType ( '[' ']' )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_type3986);
                    pt=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pt.getTree());
                    // JavaP.g:896:21: ( '[' ']' )*
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==48) ) {
                            alt68=1;
                        }


                        switch (alt68) {
                    	case 1 :
                    	    // JavaP.g:896:22: '[' ']'
                    	    {
                    	    char_literal76=(Token)match(input,48,FOLLOW_48_in_type3989); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal76_tree = (Object)adaptor.create(char_literal76);
                    	    adaptor.addChild(root_0, char_literal76_tree);
                    	    }
                    	    char_literal77=(Token)match(input,49,FOLLOW_49_in_type3991); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal77_tree = (Object)adaptor.create(char_literal77);
                    	    adaptor.addChild(root_0, char_literal77_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      dimension++;
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                      retval.element = pt.element.toArray(dimension);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class classOrInterfaceType_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceType"
    // JavaP.g:899:1: classOrInterfaceType returns [JavaTypeReference element] : name= identifierRule (args= typeArguments )? ( '.' namex= identifierRule (argsx= typeArguments )? )* ;
    public final Java_JavaP.classOrInterfaceType_return classOrInterfaceType() throws RecognitionException {
        Java_JavaP.classOrInterfaceType_return retval = new Java_JavaP.classOrInterfaceType_return();
        retval.start = input.LT(1);
        int classOrInterfaceType_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal78=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeArguments_return args = null;

        Java_JavaP.identifierRule_return namex = null;

        Java_JavaP.typeArguments_return argsx = null;


        Object char_literal78_tree=null;

        NamespaceOrTypeReference target = null;
              Token stop = null;
             
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // JavaP.g:906:2: (name= identifierRule (args= typeArguments )? ( '.' namex= identifierRule (argsx= typeArguments )? )* )
            // JavaP.g:906:4: name= identifierRule (args= typeArguments )? ( '.' namex= identifierRule (argsx= typeArguments )? )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_classOrInterfaceType4020);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {

              	           retval.element = typeRef((name!=null?input.toString(name.start,name.stop):null)); 
              	           target =  new NamespaceOrTypeReference((name!=null?input.toString(name.start,name.stop):null));
              	           stop=name.start; 
              	          
            }
            // JavaP.g:912:10: (args= typeArguments )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==40) ) {
                int LA70_1 = input.LA(2);

                if ( (LA70_1==Identifier||(LA70_1>=56 && LA70_1<=64)) ) {
                    alt70=1;
                }
            }
            switch (alt70) {
                case 1 :
                    // JavaP.g:912:11: args= typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType4049);
                    args=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    if ( state.backtracking==0 ) {

                      	           // Add the type arguments
                      	           ((BasicJavaTypeReference)retval.element).addAllArguments(args.element);
                      	           // In this case, we know that the current element must be a type reference,
                      	           // so we set the target to null, and only create type references afterwards.
                      	           target = null;
                      	           stop=args.stop;
                      	          
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setLocation(retval.element,name.start,stop);
            }
            // JavaP.g:922:10: ( '.' namex= identifierRule (argsx= typeArguments )? )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==29) ) {
                    int LA72_2 = input.LA(2);

                    if ( (LA72_2==Identifier) ) {
                        alt72=1;
                    }


                }


                switch (alt72) {
            	case 1 :
            	    // JavaP.g:922:11: '.' namex= identifierRule (argsx= typeArguments )?
            	    {
            	    char_literal78=(Token)match(input,29,FOLLOW_29_in_classOrInterfaceType4092); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal78_tree = (Object)adaptor.create(char_literal78);
            	    adaptor.addChild(root_0, char_literal78_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_classOrInterfaceType4096);
            	    namex=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, namex.getTree());
            	    if ( state.backtracking==0 ) {

            	      	           if(target != null) {
            	      	             retval.element = createTypeReference(target,(namex!=null?input.toString(namex.start,namex.stop):null));
            	      	             // We must clone the target here, or else it will be removed from the
            	      	             // type reference we just created.
            	      	             target = new NamespaceOrTypeReference(target.clone(),(namex!=null?input.toString(namex.start,namex.stop):null));
            	      	           } else {
            	      	             throw new Error();
            	      	             //retval.element = createTypeReference(retval.element,(namex!=null?input.toString(namex.start,namex.stop):null));
            	      	           }
            	      	           stop=namex.start;
            	      	          
            	    }
            	    // JavaP.g:935:10: (argsx= typeArguments )?
            	    int alt71=2;
            	    int LA71_0 = input.LA(1);

            	    if ( (LA71_0==40) ) {
            	        int LA71_1 = input.LA(2);

            	        if ( (LA71_1==Identifier||(LA71_1>=56 && LA71_1<=64)) ) {
            	            alt71=1;
            	        }
            	    }
            	    switch (alt71) {
            	        case 1 :
            	            // JavaP.g:935:11: argsx= typeArguments
            	            {
            	            pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType4125);
            	            argsx=typeArguments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, argsx.getTree());
            	            if ( state.backtracking==0 ) {

            	              	           // Add the type arguments
            	                           ((BasicJavaTypeReference)retval.element).addAllArguments(argsx.element);
            	              	           // In this case, we know that the current element must be a type reference,
            	              	           // so we se the target to the current type reference.
            	              	           target = null;
            	              	           stop = argsx.stop;
            	              	          
            	            }

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      setLocation(retval.element,name.start,stop);
            	    }

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, classOrInterfaceType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceType"

    public static class primitiveType_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // JavaP.g:946:1: primitiveType returns [JavaTypeReference element] : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final Java_JavaP.primitiveType_return primitiveType() throws RecognitionException {
        Java_JavaP.primitiveType_return retval = new Java_JavaP.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal79=null;
        Token string_literal80=null;
        Token string_literal81=null;
        Token string_literal82=null;
        Token string_literal83=null;
        Token string_literal84=null;
        Token string_literal85=null;
        Token string_literal86=null;

        Object string_literal79_tree=null;
        Object string_literal80_tree=null;
        Object string_literal81_tree=null;
        Object string_literal82_tree=null;
        Object string_literal83_tree=null;
        Object string_literal84_tree=null;
        Object string_literal85_tree=null;
        Object string_literal86_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // JavaP.g:948:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            int alt73=8;
            switch ( input.LA(1) ) {
            case 56:
                {
                alt73=1;
                }
                break;
            case 57:
                {
                alt73=2;
                }
                break;
            case 58:
                {
                alt73=3;
                }
                break;
            case 59:
                {
                alt73=4;
                }
                break;
            case 60:
                {
                alt73=5;
                }
                break;
            case 61:
                {
                alt73=6;
                }
                break;
            case 62:
                {
                alt73=7;
                }
                break;
            case 63:
                {
                alt73=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // JavaP.g:948:9: 'boolean'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal79=(Token)match(input,56,FOLLOW_56_in_primitiveType4169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal79_tree = (Object)adaptor.create(string_literal79);
                    adaptor.addChild(root_0, string_literal79_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("boolean");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:949:9: 'char'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal80=(Token)match(input,57,FOLLOW_57_in_primitiveType4181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal80_tree = (Object)adaptor.create(string_literal80);
                    adaptor.addChild(root_0, string_literal80_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("char");
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:950:9: 'byte'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal81=(Token)match(input,58,FOLLOW_58_in_primitiveType4193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal81_tree = (Object)adaptor.create(string_literal81);
                    adaptor.addChild(root_0, string_literal81_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("byte");
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:951:9: 'short'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal82=(Token)match(input,59,FOLLOW_59_in_primitiveType4205); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal82_tree = (Object)adaptor.create(string_literal82);
                    adaptor.addChild(root_0, string_literal82_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("short");
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:952:9: 'int'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal83=(Token)match(input,60,FOLLOW_60_in_primitiveType4217); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal83_tree = (Object)adaptor.create(string_literal83);
                    adaptor.addChild(root_0, string_literal83_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("int");
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:953:9: 'long'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal84=(Token)match(input,61,FOLLOW_61_in_primitiveType4229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal84_tree = (Object)adaptor.create(string_literal84);
                    adaptor.addChild(root_0, string_literal84_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("long");
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:954:9: 'float'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal85=(Token)match(input,62,FOLLOW_62_in_primitiveType4241); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal85_tree = (Object)adaptor.create(string_literal85);
                    adaptor.addChild(root_0, string_literal85_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("float");
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:955:9: 'double'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal86=(Token)match(input,63,FOLLOW_63_in_primitiveType4253); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal86_tree = (Object)adaptor.create(string_literal86);
                    adaptor.addChild(root_0, string_literal86_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("double");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class variableModifier_return extends ParserRuleReturnScope {
        public Modifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifier"
    // JavaP.g:958:1: variableModifier returns [Modifier element] : ( 'final' | annotation );
    public final Java_JavaP.variableModifier_return variableModifier() throws RecognitionException {
        Java_JavaP.variableModifier_return retval = new Java_JavaP.variableModifier_return();
        retval.start = input.LT(1);
        int variableModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal87=null;
        Java_JavaP.annotation_return annotation88 = null;


        Object string_literal87_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // JavaP.g:959:5: ( 'final' | annotation )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==35) ) {
                alt74=1;
            }
            else if ( (LA74_0==73) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // JavaP.g:959:9: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal87=(Token)match(input,35,FOLLOW_35_in_variableModifier4278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal87_tree = (Object)adaptor.create(string_literal87);
                    adaptor.addChild(root_0, string_literal87_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Final();
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:960:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_variableModifier4290);
                    annotation88=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation88.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, variableModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifier"

    public static class typeArguments_return extends ParserRuleReturnScope {
        public List<ActualTypeArgument> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // JavaP.g:963:1: typeArguments returns [List<ActualTypeArgument> element] : '<' arg= typeArgument ( ',' argx= typeArgument )* '>' ;
    public final Java_JavaP.typeArguments_return typeArguments() throws RecognitionException {
        Java_JavaP.typeArguments_return retval = new Java_JavaP.typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal89=null;
        Token char_literal90=null;
        Token char_literal91=null;
        Java_JavaP.typeArgument_return arg = null;

        Java_JavaP.typeArgument_return argx = null;


        Object char_literal89_tree=null;
        Object char_literal90_tree=null;
        Object char_literal91_tree=null;

        retval.element = new ArrayList<ActualTypeArgument>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // JavaP.g:965:5: ( '<' arg= typeArgument ( ',' argx= typeArgument )* '>' )
            // JavaP.g:965:9: '<' arg= typeArgument ( ',' argx= typeArgument )* '>'
            {
            root_0 = (Object)adaptor.nil();

            char_literal89=(Token)match(input,40,FOLLOW_40_in_typeArguments4317); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal89_tree = (Object)adaptor.create(char_literal89);
            adaptor.addChild(root_0, char_literal89_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments4331);
            arg=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arg.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add(arg.element);
            }
            // JavaP.g:967:9: ( ',' argx= typeArgument )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==41) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // JavaP.g:967:10: ',' argx= typeArgument
            	    {
            	    char_literal90=(Token)match(input,41,FOLLOW_41_in_typeArguments4344); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal90_tree = (Object)adaptor.create(char_literal90);
            	    adaptor.addChild(root_0, char_literal90_tree);
            	    }
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments4348);
            	    argx=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argx.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(argx.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);

            char_literal91=(Token)match(input,42,FOLLOW_42_in_typeArguments4363); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal91_tree = (Object)adaptor.create(char_literal91);
            adaptor.addChild(root_0, char_literal91_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        public ActualTypeArgument element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // JavaP.g:971:1: typeArgument returns [ActualTypeArgument element] : (t= type | '?' ( ( 'extends' | 'super' ) t= type )? );
    public final Java_JavaP.typeArgument_return typeArgument() throws RecognitionException {
        Java_JavaP.typeArgument_return retval = new Java_JavaP.typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal92=null;
        Token string_literal93=null;
        Token string_literal94=null;
        Java_JavaP.type_return t = null;


        Object char_literal92_tree=null;
        Object string_literal93_tree=null;
        Object string_literal94_tree=null;


        boolean pure=true;
        boolean ext=true;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // JavaP.g:976:5: (t= type | '?' ( ( 'extends' | 'super' ) t= type )? )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==Identifier||(LA78_0>=56 && LA78_0<=63)) ) {
                alt78=1;
            }
            else if ( (LA78_0==64) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // JavaP.g:976:9: t= type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument4396);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = java().createBasicTypeArgument(t.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:977:9: '?' ( ( 'extends' | 'super' ) t= type )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal92=(Token)match(input,64,FOLLOW_64_in_typeArgument4408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal92_tree = (Object)adaptor.create(char_literal92);
                    adaptor.addChild(root_0, char_literal92_tree);
                    }
                    // JavaP.g:978:9: ( ( 'extends' | 'super' ) t= type )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==38||LA77_0==65) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // JavaP.g:979:11: ( 'extends' | 'super' ) t= type
                            {
                            if ( state.backtracking==0 ) {
                              pure=false;
                            }
                            // JavaP.g:980:11: ( 'extends' | 'super' )
                            int alt76=2;
                            int LA76_0 = input.LA(1);

                            if ( (LA76_0==38) ) {
                                alt76=1;
                            }
                            else if ( (LA76_0==65) ) {
                                alt76=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 76, 0, input);

                                throw nvae;
                            }
                            switch (alt76) {
                                case 1 :
                                    // JavaP.g:980:12: 'extends'
                                    {
                                    string_literal93=(Token)match(input,38,FOLLOW_38_in_typeArgument4445); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal93_tree = (Object)adaptor.create(string_literal93);
                                    adaptor.addChild(root_0, string_literal93_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // JavaP.g:980:24: 'super'
                                    {
                                    string_literal94=(Token)match(input,65,FOLLOW_65_in_typeArgument4449); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal94_tree = (Object)adaptor.create(string_literal94);
                                    adaptor.addChild(root_0, string_literal94_tree);
                                    }
                                    if ( state.backtracking==0 ) {
                                      ext=false;
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument4466);
                            t=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                            if ( state.backtracking==0 ) {
                              if(ext) {
                                          retval.element = java().createExtendsWildcard(t.element);
                                         } else {
                                          retval.element = java().createSuperWildcard(t.element);
                                         }
                                        
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      if(pure) {
                                 retval.element = java().createPureWildcard();
                               }
                              
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        public List<String> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // JavaP.g:995:1: qualifiedNameList returns [List<String> element] : q= qualifiedName ( ',' qn= qualifiedName )* ;
    public final Java_JavaP.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        Java_JavaP.qualifiedNameList_return retval = new Java_JavaP.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal95=null;
        Java_JavaP.qualifiedName_return q = null;

        Java_JavaP.qualifiedName_return qn = null;


        Object char_literal95_tree=null;

        retval.element = new ArrayList<String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // JavaP.g:997:5: (q= qualifiedName ( ',' qn= qualifiedName )* )
            // JavaP.g:997:9: q= qualifiedName ( ',' qn= qualifiedName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList4531);
            q=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, q.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add((q!=null?input.toString(q.start,q.stop):null));
            }
            // JavaP.g:997:56: ( ',' qn= qualifiedName )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==41) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // JavaP.g:997:57: ',' qn= qualifiedName
            	    {
            	    char_literal95=(Token)match(input,41,FOLLOW_41_in_qualifiedNameList4536); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal95_tree = (Object)adaptor.create(char_literal95);
            	    adaptor.addChild(root_0, char_literal95_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList4540);
            	    qn=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add((qn!=null?input.toString(qn.start,qn.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class formalParameters_return extends ParserRuleReturnScope {
        public List<FormalParameter> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // JavaP.g:1000:1: formalParameters returns [List<FormalParameter> element] : '(' (pars= formalParameterDecls )? ')' ;
    public final Java_JavaP.formalParameters_return formalParameters() throws RecognitionException {
        Java_JavaP.formalParameters_return retval = new Java_JavaP.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal96=null;
        Token char_literal97=null;
        Java_JavaP.formalParameterDecls_return pars = null;


        Object char_literal96_tree=null;
        Object char_literal97_tree=null;

        retval.element = new ArrayList<FormalParameter>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // JavaP.g:1002:5: ( '(' (pars= formalParameterDecls )? ')' )
            // JavaP.g:1002:9: '(' (pars= formalParameterDecls )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal96=(Token)match(input,66,FOLLOW_66_in_formalParameters4571); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal96_tree = (Object)adaptor.create(char_literal96);
            adaptor.addChild(root_0, char_literal96_tree);
            }
            // JavaP.g:1002:13: (pars= formalParameterDecls )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==Identifier||LA80_0==35||(LA80_0>=56 && LA80_0<=63)||LA80_0==73) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // JavaP.g:1002:14: pars= formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters4576);
                    pars=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=pars.element;
                    }

                    }
                    break;

            }

            char_literal97=(Token)match(input,67,FOLLOW_67_in_formalParameters4582); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal97_tree = (Object)adaptor.create(char_literal97);
            adaptor.addChild(root_0, char_literal97_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        public List<FormalParameter> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // JavaP.g:1005:1: formalParameterDecls returns [List<FormalParameter> element] : (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? | modss= variableModifiers tt= type '...' idd= variableDeclaratorId );
    public final Java_JavaP.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        Java_JavaP.formalParameterDecls_return retval = new Java_JavaP.formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal98=null;
        Token string_literal99=null;
        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return t = null;

        Java_JavaP.variableDeclaratorId_return id = null;

        Java_JavaP.formalParameterDecls_return decls = null;

        Java_JavaP.variableModifiers_return modss = null;

        Java_JavaP.type_return tt = null;

        Java_JavaP.variableDeclaratorId_return idd = null;


        Object char_literal98_tree=null;
        Object string_literal99_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // JavaP.g:1006:5: (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? | modss= variableModifiers tt= type '...' idd= variableDeclaratorId )
            int alt82=2;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    // JavaP.g:1006:9: mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variableModifiers_in_formalParameterDecls4611);
                    mods=variableModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
                    pushFollow(FOLLOW_type_in_formalParameterDecls4615);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls4619);
                    id=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    // JavaP.g:1007:9: ( ',' decls= formalParameterDecls )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==41) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // JavaP.g:1007:10: ',' decls= formalParameterDecls
                            {
                            char_literal98=(Token)match(input,41,FOLLOW_41_in_formalParameterDecls4631); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal98_tree = (Object)adaptor.create(char_literal98);
                            adaptor.addChild(root_0, char_literal98_tree);
                            }
                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDecls4635);
                            decls=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
                            if ( state.backtracking==0 ) {
                              retval.element=decls.element; 
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      if(retval.element == null) {
                               retval.element=new ArrayList<FormalParameter>();}
                               FormalParameter param = new FormalParameter(new SimpleNameSignature(id.element.name()),myToArray(t.element, id.element));
                               param.addAllModifiers(mods.element);
                               retval.element.add(0,param);
                               setLocation(param, mods.start,id.stop);
                               
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1015:9: modss= variableModifiers tt= type '...' idd= variableDeclaratorId
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variableModifiers_in_formalParameterDecls4661);
                    modss=variableModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modss.getTree());
                    pushFollow(FOLLOW_type_in_formalParameterDecls4665);
                    tt=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tt.getTree());
                    string_literal99=(Token)match(input,68,FOLLOW_68_in_formalParameterDecls4667); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal99_tree = (Object)adaptor.create(string_literal99);
                    adaptor.addChild(root_0, string_literal99_tree);
                    }
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls4671);
                    idd=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, idd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayList<FormalParameter>(); 
                               FormalParameter param = new MultiFormalParameter(new SimpleNameSignature(idd.element.name()),myToArray(tt.element,idd.element));
                               param.addAllModifiers(modss.element);
                               retval.element.add(param);
                               setLocation(param, modss.start, idd.stop);
                               
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class methodBody_return extends ParserRuleReturnScope {
        public Block element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodBody"
    // JavaP.g:1025:1: methodBody returns [Block element] : b= block ;
    public final Java_JavaP.methodBody_return methodBody() throws RecognitionException {
        Java_JavaP.methodBody_return retval = new Java_JavaP.methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.block_return b = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // JavaP.g:1026:5: (b= block )
            // JavaP.g:1026:9: b= block
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_block_in_methodBody4716);
            b=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());
            if ( state.backtracking==0 ) {
              retval.element = b.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, methodBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodBody"

    public static class constructorBody_return extends ParserRuleReturnScope {
        public Block element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorBody"
    // JavaP.g:1029:1: constructorBody returns [Block element] : '{' (inv= explicitConstructorInvocation )? (bs= blockStatement )* '}' ;
    public final Java_JavaP.constructorBody_return constructorBody() throws RecognitionException {
        Java_JavaP.constructorBody_return retval = new Java_JavaP.constructorBody_return();
        retval.start = input.LT(1);
        int constructorBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal100=null;
        Token char_literal101=null;
        Java_JavaP.explicitConstructorInvocation_return inv = null;

        Java_JavaP.blockStatement_return bs = null;


        Object char_literal100_tree=null;
        Object char_literal101_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // JavaP.g:1030:5: ( '{' (inv= explicitConstructorInvocation )? (bs= blockStatement )* '}' )
            // JavaP.g:1030:9: '{' (inv= explicitConstructorInvocation )? (bs= blockStatement )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal100=(Token)match(input,44,FOLLOW_44_in_constructorBody4741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal100_tree = (Object)adaptor.create(char_literal100);
            adaptor.addChild(root_0, char_literal100_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new Block();
            }
            // JavaP.g:1031:10: (inv= explicitConstructorInvocation )?
            int alt83=2;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // JavaP.g:1031:11: inv= explicitConstructorInvocation
                    {
                    pushFollow(FOLLOW_explicitConstructorInvocation_in_constructorBody4758);
                    inv=explicitConstructorInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inv.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addStatement(new StatementExpression(inv.element));
                    }

                    }
                    break;

            }

            // JavaP.g:1032:10: (bs= blockStatement )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( ((LA84_0>=HexLiteral && LA84_0<=OctalLiteral)||LA84_0==FloatingPointLiteral||(LA84_0>=CharacterLiteral && LA84_0<=StringLiteral)||(LA84_0>=ENUM && LA84_0<=ASSERT)||LA84_0==Identifier||LA84_0==26||LA84_0==28||(LA84_0>=31 && LA84_0<=37)||LA84_0==44||(LA84_0>=46 && LA84_0<=47)||LA84_0==53||(LA84_0>=56 && LA84_0<=63)||(LA84_0>=65 && LA84_0<=66)||(LA84_0>=69 && LA84_0<=73)||LA84_0==76||(LA84_0>=78 && LA84_0<=81)||(LA84_0>=83 && LA84_0<=87)||(LA84_0>=105 && LA84_0<=106)||(LA84_0>=109 && LA84_0<=113)) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // JavaP.g:1032:11: bs= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_constructorBody4777);
            	    bs=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bs.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.addStatement(bs.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            char_literal101=(Token)match(input,45,FOLLOW_45_in_constructorBody4783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal101_tree = (Object)adaptor.create(char_literal101);
            adaptor.addChild(root_0, char_literal101_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, constructorBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorBody"

    public static class explicitConstructorInvocation_return extends ParserRuleReturnScope {
        public MethodInvocation element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitConstructorInvocation"
    // JavaP.g:1035:1: explicitConstructorInvocation returns [MethodInvocation element] : ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' | (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';' );
    public final Java_JavaP.explicitConstructorInvocation_return explicitConstructorInvocation() throws RecognitionException {
        Java_JavaP.explicitConstructorInvocation_return retval = new Java_JavaP.explicitConstructorInvocation_return();
        retval.start = input.LT(1);
        int explicitConstructorInvocation_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal103=null;
        Token char_literal104=null;
        Token char_literal105=null;
        Token string_literal107=null;
        Token char_literal108=null;
        Java_JavaP.arguments_return args = null;

        Java_JavaP.primary_return prim = null;

        Java_JavaP.arguments_return argsx = null;

        Java_JavaP.nonWildcardTypeArguments_return nonWildcardTypeArguments102 = null;

        Java_JavaP.nonWildcardTypeArguments_return nonWildcardTypeArguments106 = null;


        Object string_literal103_tree=null;
        Object char_literal104_tree=null;
        Object char_literal105_tree=null;
        Object string_literal107_tree=null;
        Object char_literal108_tree=null;

        Expression target=null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // JavaP.g:1037:5: ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' | (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';' )
            int alt88=2;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // JavaP.g:1037:9: ( nonWildcardTypeArguments )? 'this' args= arguments ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:1037:9: ( nonWildcardTypeArguments )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==40) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // JavaP.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4810);
                            nonWildcardTypeArguments102=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments102.getTree());

                            }
                            break;

                    }

                    string_literal103=(Token)match(input,69,FOLLOW_69_in_explicitConstructorInvocation4813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal103_tree = (Object)adaptor.create(string_literal103);
                    adaptor.addChild(root_0, string_literal103_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation4817);
                    args=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    char_literal104=(Token)match(input,26,FOLLOW_26_in_explicitConstructorInvocation4819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal104_tree = (Object)adaptor.create(char_literal104);
                    adaptor.addChild(root_0, char_literal104_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ThisConstructorDelegation();
                              retval.element.addAllArguments(args.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1040:7: (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:1040:7: (prim= primary '.' )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( ((LA86_0>=HexLiteral && LA86_0<=OctalLiteral)||LA86_0==FloatingPointLiteral||(LA86_0>=CharacterLiteral && LA86_0<=StringLiteral)||LA86_0==Identifier||LA86_0==47||(LA86_0>=56 && LA86_0<=63)||LA86_0==66||(LA86_0>=69 && LA86_0<=72)||LA86_0==113) ) {
                        alt86=1;
                    }
                    else if ( (LA86_0==65) ) {
                        int LA86_2 = input.LA(2);

                        if ( (LA86_2==29) ) {
                            alt86=1;
                        }
                    }
                    switch (alt86) {
                        case 1 :
                            // JavaP.g:1040:8: prim= primary '.'
                            {
                            pushFollow(FOLLOW_primary_in_explicitConstructorInvocation4839);
                            prim=primary();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, prim.getTree());
                            char_literal105=(Token)match(input,29,FOLLOW_29_in_explicitConstructorInvocation4841); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal105_tree = (Object)adaptor.create(char_literal105);
                            adaptor.addChild(root_0, char_literal105_tree);
                            }
                            if ( state.backtracking==0 ) {
                              target=prim.element;
                            }

                            }
                            break;

                    }

                    // JavaP.g:1040:50: ( nonWildcardTypeArguments )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==40) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // JavaP.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4847);
                            nonWildcardTypeArguments106=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments106.getTree());

                            }
                            break;

                    }

                    string_literal107=(Token)match(input,65,FOLLOW_65_in_explicitConstructorInvocation4850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal107_tree = (Object)adaptor.create(string_literal107);
                    adaptor.addChild(root_0, string_literal107_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation4854);
                    argsx=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argsx.getTree());
                    char_literal108=(Token)match(input,26,FOLLOW_26_in_explicitConstructorInvocation4856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal108_tree = (Object)adaptor.create(char_literal108);
                    adaptor.addChild(root_0, char_literal108_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new SuperConstructorDelegation();
                             retval.element.addAllArguments(argsx.element);
                             if(target != null) {
                               retval.element.setTarget(target);
                             }
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, explicitConstructorInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitConstructorInvocation"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // JavaP.g:1050:1: qualifiedName returns [String element] : id= identifierRule ( '.' idx= identifierRule )* ;
    public final Java_JavaP.qualifiedName_return qualifiedName() throws RecognitionException {
        Java_JavaP.qualifiedName_return retval = new Java_JavaP.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal109=null;
        Java_JavaP.identifierRule_return id = null;

        Java_JavaP.identifierRule_return idx = null;


        Object char_literal109_tree=null;

        StringBuffer buffer = new StringBuffer();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // JavaP.g:1052:5: (id= identifierRule ( '.' idx= identifierRule )* )
            // JavaP.g:1052:9: id= identifierRule ( '.' idx= identifierRule )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_qualifiedName4895);
            id=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              buffer.append((id!=null?input.toString(id.start,id.stop):null));
            }
            // JavaP.g:1052:53: ( '.' idx= identifierRule )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==29) ) {
                    int LA89_2 = input.LA(2);

                    if ( (LA89_2==Identifier) ) {
                        alt89=1;
                    }


                }


                switch (alt89) {
            	case 1 :
            	    // JavaP.g:1052:54: '.' idx= identifierRule
            	    {
            	    char_literal109=(Token)match(input,29,FOLLOW_29_in_qualifiedName4899); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal109_tree = (Object)adaptor.create(char_literal109);
            	    adaptor.addChild(root_0, char_literal109_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_qualifiedName4903);
            	    idx=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, idx.getTree());
            	    if ( state.backtracking==0 ) {
            	      buffer.append((idx!=null?input.toString(idx.start,idx.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class literal_return extends ParserRuleReturnScope {
        public Literal element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // JavaP.g:1055:1: literal returns [Literal element] : (intl= integerLiteral | fl= FloatingPointLiteral | charl= CharacterLiteral | strl= StringLiteral | booll= booleanLiteral | 'null' );
    public final Java_JavaP.literal_return literal() throws RecognitionException {
        Java_JavaP.literal_return retval = new Java_JavaP.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token fl=null;
        Token charl=null;
        Token strl=null;
        Token string_literal110=null;
        Java_JavaP.integerLiteral_return intl = null;

        Java_JavaP.booleanLiteral_return booll = null;


        Object fl_tree=null;
        Object charl_tree=null;
        Object strl_tree=null;
        Object string_literal110_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // JavaP.g:1056:5: (intl= integerLiteral | fl= FloatingPointLiteral | charl= CharacterLiteral | strl= StringLiteral | booll= booleanLiteral | 'null' )
            int alt90=6;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case DecimalLiteral:
            case OctalLiteral:
                {
                alt90=1;
                }
                break;
            case FloatingPointLiteral:
                {
                alt90=2;
                }
                break;
            case CharacterLiteral:
                {
                alt90=3;
                }
                break;
            case StringLiteral:
                {
                alt90=4;
                }
                break;
            case 71:
            case 72:
                {
                alt90=5;
                }
                break;
            case 70:
                {
                alt90=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // JavaP.g:1056:9: intl= integerLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_integerLiteral_in_literal4936);
                    intl=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, intl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=intl.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1057:9: fl= FloatingPointLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    fl=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal4950); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    fl_tree = (Object)adaptor.create(fl);
                    adaptor.addChild(root_0, fl_tree);
                    }
                    if ( state.backtracking==0 ) {

                                 String text = (fl!=null?fl.getText():null);
                                 if(text.endsWith("f") || text.endsWith("F")) { 
                                   retval.element=new RegularLiteral(typeRef("float"),text);
                                 } else {
                                   retval.element=new RegularLiteral(typeRef("double"),text);
                                 }
                              
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1065:9: charl= CharacterLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    charl=(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal4964); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    charl_tree = (Object)adaptor.create(charl);
                    adaptor.addChild(root_0, charl_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element=new RegularLiteral(typeRef("char"),(charl!=null?charl.getText():null));
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1066:9: strl= StringLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    strl=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal4978); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    strl_tree = (Object)adaptor.create(strl);
                    adaptor.addChild(root_0, strl_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element=new RegularLiteral(typeRef("java.lang.String"),(strl!=null?strl.getText():null));
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1067:9: booll= booleanLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_literal4992);
                    booll=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booll.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=booll.element;
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1068:9: 'null'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal110=(Token)match(input,70,FOLLOW_70_in_literal5004); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal110_tree = (Object)adaptor.create(string_literal110);
                    adaptor.addChild(root_0, string_literal110_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new NullLiteral();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        public Literal element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // JavaP.g:1071:1: integerLiteral returns [Literal element] : (hexl= HexLiteral | octl= OctalLiteral | decl= DecimalLiteral );
    public final Java_JavaP.integerLiteral_return integerLiteral() throws RecognitionException {
        Java_JavaP.integerLiteral_return retval = new Java_JavaP.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token hexl=null;
        Token octl=null;
        Token decl=null;

        Object hexl_tree=null;
        Object octl_tree=null;
        Object decl_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // JavaP.g:1072:5: (hexl= HexLiteral | octl= OctalLiteral | decl= DecimalLiteral )
            int alt91=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
                {
                alt91=1;
                }
                break;
            case OctalLiteral:
                {
                alt91=2;
                }
                break;
            case DecimalLiteral:
                {
                alt91=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // JavaP.g:1072:9: hexl= HexLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    hexl=(Token)match(input,HexLiteral,FOLLOW_HexLiteral_in_integerLiteral5031); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    hexl_tree = (Object)adaptor.create(hexl);
                    adaptor.addChild(root_0, hexl_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element=new RegularLiteral(typeRef("int"),(hexl!=null?hexl.getText():null));
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1073:9: octl= OctalLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    octl=(Token)match(input,OctalLiteral,FOLLOW_OctalLiteral_in_integerLiteral5045); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    octl_tree = (Object)adaptor.create(octl);
                    adaptor.addChild(root_0, octl_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element=new RegularLiteral(typeRef("int"),(octl!=null?octl.getText():null));
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1074:9: decl= DecimalLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    decl=(Token)match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_integerLiteral5059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    decl_tree = (Object)adaptor.create(decl);
                    adaptor.addChild(root_0, decl_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element=new RegularLiteral(typeRef("int"),(decl!=null?decl.getText():null));
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        public Literal element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // JavaP.g:1077:1: booleanLiteral returns [Literal element] : ( 'true' | 'false' );
    public final Java_JavaP.booleanLiteral_return booleanLiteral() throws RecognitionException {
        Java_JavaP.booleanLiteral_return retval = new Java_JavaP.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal111=null;
        Token string_literal112=null;

        Object string_literal111_tree=null;
        Object string_literal112_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // JavaP.g:1078:5: ( 'true' | 'false' )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==71) ) {
                alt92=1;
            }
            else if ( (LA92_0==72) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    // JavaP.g:1078:9: 'true'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal111=(Token)match(input,71,FOLLOW_71_in_booleanLiteral5084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal111_tree = (Object)adaptor.create(string_literal111);
                    adaptor.addChild(root_0, string_literal111_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new RegularLiteral(typeRef("boolean"),"true");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1079:9: 'false'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal112=(Token)match(input,72,FOLLOW_72_in_booleanLiteral5096); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal112_tree = (Object)adaptor.create(string_literal112);
                    adaptor.addChild(root_0, string_literal112_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new RegularLiteral(typeRef("boolean"),"false");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class annotations_return extends ParserRuleReturnScope {
        public List<AnnotationModifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // JavaP.g:1084:1: annotations returns [List<AnnotationModifier> element] : (a= annotation )+ ;
    public final Java_JavaP.annotations_return annotations() throws RecognitionException {
        Java_JavaP.annotations_return retval = new Java_JavaP.annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.annotation_return a = null;



        retval.element = new ArrayList<AnnotationModifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // JavaP.g:1086:5: ( (a= annotation )+ )
            // JavaP.g:1086:9: (a= annotation )+
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:1086:9: (a= annotation )+
            int cnt93=0;
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==73) ) {
                    int LA93_2 = input.LA(2);

                    if ( (LA93_2==Identifier) ) {
                        int LA93_3 = input.LA(3);

                        if ( (synpred121_JavaP()) ) {
                            alt93=1;
                        }


                    }


                }


                switch (alt93) {
            	case 1 :
            	    // JavaP.g:1086:10: a= annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations5130);
            	    a=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(a.element);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt93 >= 1 ) break loop93;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(93, input);
                        throw eee;
                }
                cnt93++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        public AnnotationModifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // JavaP.g:1089:1: annotation returns [AnnotationModifier element] : '@' a= annotationName ( '(' ( elementValuePairs | elementValue )? ')' )? ;
    public final Java_JavaP.annotation_return annotation() throws RecognitionException {
        Java_JavaP.annotation_return retval = new Java_JavaP.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal113=null;
        Token char_literal114=null;
        Token char_literal117=null;
        Java_JavaP.annotationName_return a = null;

        Java_JavaP.elementValuePairs_return elementValuePairs115 = null;

        Java_JavaP.elementValue_return elementValue116 = null;


        Object char_literal113_tree=null;
        Object char_literal114_tree=null;
        Object char_literal117_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // JavaP.g:1090:5: ( '@' a= annotationName ( '(' ( elementValuePairs | elementValue )? ')' )? )
            // JavaP.g:1090:9: '@' a= annotationName ( '(' ( elementValuePairs | elementValue )? ')' )?
            {
            root_0 = (Object)adaptor.nil();

            char_literal113=(Token)match(input,73,FOLLOW_73_in_annotation5157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal113_tree = (Object)adaptor.create(char_literal113);
            adaptor.addChild(root_0, char_literal113_tree);
            }
            pushFollow(FOLLOW_annotationName_in_annotation5161);
            a=annotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
            if ( state.backtracking==0 ) {
              retval.element=new AnnotationModifier((a!=null?input.toString(a.start,a.stop):null));
            }
            // JavaP.g:1090:80: ( '(' ( elementValuePairs | elementValue )? ')' )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==66) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // JavaP.g:1090:82: '(' ( elementValuePairs | elementValue )? ')'
                    {
                    char_literal114=(Token)match(input,66,FOLLOW_66_in_annotation5167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal114_tree = (Object)adaptor.create(char_literal114);
                    adaptor.addChild(root_0, char_literal114_tree);
                    }
                    // JavaP.g:1090:86: ( elementValuePairs | elementValue )?
                    int alt94=3;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==Identifier) ) {
                        int LA94_1 = input.LA(2);

                        if ( (LA94_1==51) ) {
                            alt94=1;
                        }
                        else if ( ((LA94_1>=29 && LA94_1<=30)||LA94_1==40||(LA94_1>=42 && LA94_1<=43)||LA94_1==48||LA94_1==64||(LA94_1>=66 && LA94_1<=67)||(LA94_1>=98 && LA94_1<=110)) ) {
                            alt94=2;
                        }
                    }
                    else if ( ((LA94_0>=HexLiteral && LA94_0<=OctalLiteral)||LA94_0==FloatingPointLiteral||(LA94_0>=CharacterLiteral && LA94_0<=StringLiteral)||LA94_0==44||LA94_0==47||(LA94_0>=56 && LA94_0<=63)||(LA94_0>=65 && LA94_0<=66)||(LA94_0>=69 && LA94_0<=73)||(LA94_0>=105 && LA94_0<=106)||(LA94_0>=109 && LA94_0<=113)) ) {
                        alt94=2;
                    }
                    switch (alt94) {
                        case 1 :
                            // JavaP.g:1090:88: elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation5171);
                            elementValuePairs115=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairs115.getTree());

                            }
                            break;
                        case 2 :
                            // JavaP.g:1090:108: elementValue
                            {
                            pushFollow(FOLLOW_elementValue_in_annotation5175);
                            elementValue116=elementValue();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue116.getTree());

                            }
                            break;

                    }

                    char_literal117=(Token)match(input,67,FOLLOW_67_in_annotation5180); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal117_tree = (Object)adaptor.create(char_literal117);
                    adaptor.addChild(root_0, char_literal117_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationName"
    // JavaP.g:1093:1: annotationName : identifierRule ( '.' identifierRule )* ;
    public final Java_JavaP.annotationName_return annotationName() throws RecognitionException {
        Java_JavaP.annotationName_return retval = new Java_JavaP.annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal119=null;
        Java_JavaP.identifierRule_return identifierRule118 = null;

        Java_JavaP.identifierRule_return identifierRule120 = null;


        Object char_literal119_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // JavaP.g:1094:5: ( identifierRule ( '.' identifierRule )* )
            // JavaP.g:1094:7: identifierRule ( '.' identifierRule )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_annotationName5204);
            identifierRule118=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule118.getTree());
            // JavaP.g:1094:22: ( '.' identifierRule )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==29) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // JavaP.g:1094:23: '.' identifierRule
            	    {
            	    char_literal119=(Token)match(input,29,FOLLOW_29_in_annotationName5207); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal119_tree = (Object)adaptor.create(char_literal119);
            	    adaptor.addChild(root_0, char_literal119_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_annotationName5209);
            	    identifierRule120=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule120.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationName"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // JavaP.g:1097:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final Java_JavaP.elementValuePairs_return elementValuePairs() throws RecognitionException {
        Java_JavaP.elementValuePairs_return retval = new Java_JavaP.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal122=null;
        Java_JavaP.elementValuePair_return elementValuePair121 = null;

        Java_JavaP.elementValuePair_return elementValuePair123 = null;


        Object char_literal122_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // JavaP.g:1098:5: ( elementValuePair ( ',' elementValuePair )* )
            // JavaP.g:1098:9: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs5230);
            elementValuePair121=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair121.getTree());
            // JavaP.g:1098:26: ( ',' elementValuePair )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==41) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // JavaP.g:1098:27: ',' elementValuePair
            	    {
            	    char_literal122=(Token)match(input,41,FOLLOW_41_in_elementValuePairs5233); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal122_tree = (Object)adaptor.create(char_literal122);
            	    adaptor.addChild(root_0, char_literal122_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs5235);
            	    elementValuePair123=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair123.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // JavaP.g:1101:1: elementValuePair : identifierRule '=' elementValue ;
    public final Java_JavaP.elementValuePair_return elementValuePair() throws RecognitionException {
        Java_JavaP.elementValuePair_return retval = new Java_JavaP.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal125=null;
        Java_JavaP.identifierRule_return identifierRule124 = null;

        Java_JavaP.elementValue_return elementValue126 = null;


        Object char_literal125_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // JavaP.g:1102:5: ( identifierRule '=' elementValue )
            // JavaP.g:1102:9: identifierRule '=' elementValue
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_elementValuePair5256);
            identifierRule124=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule124.getTree());
            char_literal125=(Token)match(input,51,FOLLOW_51_in_elementValuePair5258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal125_tree = (Object)adaptor.create(char_literal125);
            adaptor.addChild(root_0, char_literal125_tree);
            }
            pushFollow(FOLLOW_elementValue_in_elementValuePair5260);
            elementValue126=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue126.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // JavaP.g:1105:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
    public final Java_JavaP.elementValue_return elementValue() throws RecognitionException {
        Java_JavaP.elementValue_return retval = new Java_JavaP.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.conditionalExpression_return conditionalExpression127 = null;

        Java_JavaP.annotation_return annotation128 = null;

        Java_JavaP.elementValueArrayInitializer_return elementValueArrayInitializer129 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // JavaP.g:1106:5: ( conditionalExpression | annotation | elementValueArrayInitializer )
            int alt98=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case DecimalLiteral:
            case OctalLiteral:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case Identifier:
            case 47:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 65:
            case 66:
            case 69:
            case 70:
            case 71:
            case 72:
            case 105:
            case 106:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
                {
                alt98=1;
                }
                break;
            case 73:
                {
                alt98=2;
                }
                break;
            case 44:
                {
                alt98=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // JavaP.g:1106:9: conditionalExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue5283);
                    conditionalExpression127=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression127.getTree());

                    }
                    break;
                case 2 :
                    // JavaP.g:1107:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue5293);
                    annotation128=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation128.getTree());

                    }
                    break;
                case 3 :
                    // JavaP.g:1108:9: elementValueArrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue5303);
                    elementValueArrayInitializer129=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer129.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // JavaP.g:1111:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
    public final Java_JavaP.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        Java_JavaP.elementValueArrayInitializer_return retval = new Java_JavaP.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal130=null;
        Token char_literal132=null;
        Token char_literal134=null;
        Token char_literal135=null;
        Java_JavaP.elementValue_return elementValue131 = null;

        Java_JavaP.elementValue_return elementValue133 = null;


        Object char_literal130_tree=null;
        Object char_literal132_tree=null;
        Object char_literal134_tree=null;
        Object char_literal135_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // JavaP.g:1112:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
            // JavaP.g:1112:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal130=(Token)match(input,44,FOLLOW_44_in_elementValueArrayInitializer5326); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal130_tree = (Object)adaptor.create(char_literal130);
            adaptor.addChild(root_0, char_literal130_tree);
            }
            // JavaP.g:1112:13: ( elementValue ( ',' elementValue )* )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( ((LA100_0>=HexLiteral && LA100_0<=OctalLiteral)||LA100_0==FloatingPointLiteral||(LA100_0>=CharacterLiteral && LA100_0<=StringLiteral)||LA100_0==Identifier||LA100_0==44||LA100_0==47||(LA100_0>=56 && LA100_0<=63)||(LA100_0>=65 && LA100_0<=66)||(LA100_0>=69 && LA100_0<=73)||(LA100_0>=105 && LA100_0<=106)||(LA100_0>=109 && LA100_0<=113)) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // JavaP.g:1112:14: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer5329);
                    elementValue131=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue131.getTree());
                    // JavaP.g:1112:27: ( ',' elementValue )*
                    loop99:
                    do {
                        int alt99=2;
                        int LA99_0 = input.LA(1);

                        if ( (LA99_0==41) ) {
                            int LA99_1 = input.LA(2);

                            if ( ((LA99_1>=HexLiteral && LA99_1<=OctalLiteral)||LA99_1==FloatingPointLiteral||(LA99_1>=CharacterLiteral && LA99_1<=StringLiteral)||LA99_1==Identifier||LA99_1==44||LA99_1==47||(LA99_1>=56 && LA99_1<=63)||(LA99_1>=65 && LA99_1<=66)||(LA99_1>=69 && LA99_1<=73)||(LA99_1>=105 && LA99_1<=106)||(LA99_1>=109 && LA99_1<=113)) ) {
                                alt99=1;
                            }


                        }


                        switch (alt99) {
                    	case 1 :
                    	    // JavaP.g:1112:28: ',' elementValue
                    	    {
                    	    char_literal132=(Token)match(input,41,FOLLOW_41_in_elementValueArrayInitializer5332); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal132_tree = (Object)adaptor.create(char_literal132);
                    	    adaptor.addChild(root_0, char_literal132_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer5334);
                    	    elementValue133=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue133.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop99;
                        }
                    } while (true);


                    }
                    break;

            }

            // JavaP.g:1112:49: ( ',' )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==41) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // JavaP.g:1112:50: ','
                    {
                    char_literal134=(Token)match(input,41,FOLLOW_41_in_elementValueArrayInitializer5341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal134_tree = (Object)adaptor.create(char_literal134);
                    adaptor.addChild(root_0, char_literal134_tree);
                    }

                    }
                    break;

            }

            char_literal135=(Token)match(input,45,FOLLOW_45_in_elementValueArrayInitializer5345); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal135_tree = (Object)adaptor.create(char_literal135);
            adaptor.addChild(root_0, char_literal135_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        public TypeWithBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // JavaP.g:1115:1: annotationTypeDeclaration returns [TypeWithBody element] : '@' 'interface' name= identifierRule body= annotationTypeBody ;
    public final Java_JavaP.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        Java_JavaP.annotationTypeDeclaration_return retval = new Java_JavaP.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal136=null;
        Token string_literal137=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.annotationTypeBody_return body = null;


        Object char_literal136_tree=null;
        Object string_literal137_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // JavaP.g:1116:5: ( '@' 'interface' name= identifierRule body= annotationTypeBody )
            // JavaP.g:1116:9: '@' 'interface' name= identifierRule body= annotationTypeBody
            {
            root_0 = (Object)adaptor.nil();

            char_literal136=(Token)match(input,73,FOLLOW_73_in_annotationTypeDeclaration5372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal136_tree = (Object)adaptor.create(char_literal136);
            adaptor.addChild(root_0, char_literal136_tree);
            }
            string_literal137=(Token)match(input,46,FOLLOW_46_in_annotationTypeDeclaration5374); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal137_tree = (Object)adaptor.create(string_literal137);
            adaptor.addChild(root_0, string_literal137_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_annotationTypeDeclaration5378);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {

                             retval.element = (TypeWithBody)createType(new SimpleNameSignature((name!=null?input.toString(name.start,name.stop):null)));
                             retval.element.addModifier(new AnnotationType());
                             setName(retval.element,name.start);
                           
            }
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration5412);
            body=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setBody(body.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // JavaP.g:1125:1: annotationTypeBody returns [ClassBody element] : '{' ( annotationTypeElementDeclaration )* '}' ;
    public final Java_JavaP.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        Java_JavaP.annotationTypeBody_return retval = new Java_JavaP.annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal138=null;
        Token char_literal140=null;
        Java_JavaP.annotationTypeElementDeclaration_return annotationTypeElementDeclaration139 = null;


        Object char_literal138_tree=null;
        Object char_literal140_tree=null;

        retval.element = new ClassBody();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // JavaP.g:1127:5: ( '{' ( annotationTypeElementDeclaration )* '}' )
            // JavaP.g:1127:9: '{' ( annotationTypeElementDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal138=(Token)match(input,44,FOLLOW_44_in_annotationTypeBody5445); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal138_tree = (Object)adaptor.create(char_literal138);
            adaptor.addChild(root_0, char_literal138_tree);
            }
            // JavaP.g:1127:13: ( annotationTypeElementDeclaration )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==ENUM||LA102_0==Identifier||LA102_0==28||(LA102_0>=31 && LA102_0<=37)||LA102_0==40||(LA102_0>=46 && LA102_0<=47)||(LA102_0>=52 && LA102_0<=63)||LA102_0==73) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // JavaP.g:1127:14: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody5448);
            	    annotationTypeElementDeclaration139=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration139.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            char_literal140=(Token)match(input,45,FOLLOW_45_in_annotationTypeBody5452); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal140_tree = (Object)adaptor.create(char_literal140);
            adaptor.addChild(root_0, char_literal140_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // JavaP.g:1130:1: annotationTypeElementDeclaration returns [TypeElement element] : mods= modifiers rest= annotationTypeElementRest ;
    public final Java_JavaP.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        Java_JavaP.annotationTypeElementDeclaration_return retval = new Java_JavaP.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.modifiers_return mods = null;

        Java_JavaP.annotationTypeElementRest_return rest = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // JavaP.g:1131:5: (mods= modifiers rest= annotationTypeElementRest )
            // JavaP.g:1131:9: mods= modifiers rest= annotationTypeElementRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_annotationTypeElementDeclaration5481);
            mods=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration5485);
            rest=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
            if ( state.backtracking==0 ) {

                       retval.element = rest.element;
                       for(Modifier modifier: mods.element) {
                         retval.element.addModifier(modifier);
                       }
                     
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementRest"
    // JavaP.g:1140:1: annotationTypeElementRest returns [TypeElement element] : (t= type ann= annotationMethodOrConstantRest[$t.element] ';' | cd= normalClassDeclaration ( ';' )? | id= normalInterfaceDeclaration ( ';' )? | en= enumDeclaration ( ';' )? | an= annotationTypeDeclaration ( ';' )? );
    public final Java_JavaP.annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        Java_JavaP.annotationTypeElementRest_return retval = new Java_JavaP.annotationTypeElementRest_return();
        retval.start = input.LT(1);
        int annotationTypeElementRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal141=null;
        Token char_literal142=null;
        Token char_literal143=null;
        Token char_literal144=null;
        Token char_literal145=null;
        Java_JavaP.type_return t = null;

        Java_JavaP.annotationMethodOrConstantRest_return ann = null;

        Java_JavaP.normalClassDeclaration_return cd = null;

        Java_JavaP.normalInterfaceDeclaration_return id = null;

        Java_JavaP.enumDeclaration_return en = null;

        Java_JavaP.annotationTypeDeclaration_return an = null;


        Object char_literal141_tree=null;
        Object char_literal142_tree=null;
        Object char_literal143_tree=null;
        Object char_literal144_tree=null;
        Object char_literal145_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // JavaP.g:1141:5: (t= type ann= annotationMethodOrConstantRest[$t.element] ';' | cd= normalClassDeclaration ( ';' )? | id= normalInterfaceDeclaration ( ';' )? | en= enumDeclaration ( ';' )? | an= annotationTypeDeclaration ( ';' )? )
            int alt107=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
                {
                alt107=1;
                }
                break;
            case 37:
                {
                alt107=2;
                }
                break;
            case 46:
                {
                alt107=3;
                }
                break;
            case ENUM:
                {
                alt107=4;
                }
                break;
            case 73:
                {
                alt107=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }

            switch (alt107) {
                case 1 :
                    // JavaP.g:1141:9: t= type ann= annotationMethodOrConstantRest[$t.element] ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_annotationTypeElementRest5524);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest5528);
                    ann=annotationMethodOrConstantRest((t!=null?t.element:null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ann.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = ann.element;
                    }
                    char_literal141=(Token)match(input,26,FOLLOW_26_in_annotationTypeElementRest5547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal141_tree = (Object)adaptor.create(char_literal141);
                    adaptor.addChild(root_0, char_literal141_tree);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1144:9: cd= normalClassDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_annotationTypeElementRest5560);
                    cd=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                       retval.element = cd.element; addNonTopLevelObjectInheritance(cd.element);
                    }
                    // JavaP.g:1144:111: ( ';' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==26) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal142=(Token)match(input,26,FOLLOW_26_in_annotationTypeElementRest5563); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal142_tree = (Object)adaptor.create(char_literal142);
                            adaptor.addChild(root_0, char_literal142_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // JavaP.g:1145:9: id= normalInterfaceDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementRest5576);
                    id=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                       retval.element = id.element; addNonTopLevelObjectInheritance(id.element);
                    }
                    // JavaP.g:1145:115: ( ';' )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==26) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal143=(Token)match(input,26,FOLLOW_26_in_annotationTypeElementRest5579); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal143_tree = (Object)adaptor.create(char_literal143);
                            adaptor.addChild(root_0, char_literal143_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // JavaP.g:1146:9: en= enumDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest5592);
                    en=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, en.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = en.element;
                    }
                    // JavaP.g:1146:59: ( ';' )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==26) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal144=(Token)match(input,26,FOLLOW_26_in_annotationTypeElementRest5596); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal144_tree = (Object)adaptor.create(char_literal144);
                            adaptor.addChild(root_0, char_literal144_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // JavaP.g:1147:9: an= annotationTypeDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest5609);
                    an=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, an.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = an.element;
                    }
                    // JavaP.g:1147:69: ( ';' )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==26) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal145=(Token)match(input,26,FOLLOW_26_in_annotationTypeElementRest5613); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal145_tree = (Object)adaptor.create(char_literal145);
                            adaptor.addChild(root_0, char_literal145_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, annotationTypeElementRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementRest"

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodOrConstantRest"
    // JavaP.g:1150:1: annotationMethodOrConstantRest[TypeReference type] returns [TypeElement element] : (a= annotationMethodRest[$type] | aa= annotationConstantRest[$type] );
    public final Java_JavaP.annotationMethodOrConstantRest_return annotationMethodOrConstantRest(TypeReference type) throws RecognitionException {
        Java_JavaP.annotationMethodOrConstantRest_return retval = new Java_JavaP.annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);
        int annotationMethodOrConstantRest_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.annotationMethodRest_return a = null;

        Java_JavaP.annotationConstantRest_return aa = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // JavaP.g:1151:5: (a= annotationMethodRest[$type] | aa= annotationConstantRest[$type] )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==Identifier) ) {
                int LA108_1 = input.LA(2);

                if ( (LA108_1==66) ) {
                    alt108=1;
                }
                else if ( (LA108_1==26||LA108_1==41||LA108_1==48||LA108_1==51) ) {
                    alt108=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 108, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // JavaP.g:1151:9: a= annotationMethodRest[$type]
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest5644);
                    a=annotationMethodRest(type);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = a.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1152:9: aa= annotationConstantRest[$type]
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest5659);
                    aa=annotationConstantRest(type);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aa.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = aa.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, annotationMethodOrConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodOrConstantRest"

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodRest"
    // JavaP.g:1155:1: annotationMethodRest[TypeReference type] returns [Method element] : name= identifierRule '(' ')' ( defaultValue )? ;
    public final Java_JavaP.annotationMethodRest_return annotationMethodRest(TypeReference type) throws RecognitionException {
        Java_JavaP.annotationMethodRest_return retval = new Java_JavaP.annotationMethodRest_return();
        retval.start = input.LT(1);
        int annotationMethodRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal146=null;
        Token char_literal147=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.defaultValue_return defaultValue148 = null;


        Object char_literal146_tree=null;
        Object char_literal147_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // JavaP.g:1156:5: (name= identifierRule '(' ')' ( defaultValue )? )
            // JavaP.g:1156:9: name= identifierRule '(' ')' ( defaultValue )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_annotationMethodRest5692);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            char_literal146=(Token)match(input,66,FOLLOW_66_in_annotationMethodRest5694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal146_tree = (Object)adaptor.create(char_literal146);
            adaptor.addChild(root_0, char_literal146_tree);
            }
            char_literal147=(Token)match(input,67,FOLLOW_67_in_annotationMethodRest5696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal147_tree = (Object)adaptor.create(char_literal147);
            adaptor.addChild(root_0, char_literal147_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameDeclarationWithParametersHeader((name!=null?input.toString(name.start,name.stop):null)),type);
                       setName(retval.element,name.start);
                      
            }
            // JavaP.g:1159:11: ( defaultValue )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==74) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // JavaP.g:1159:12: defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest5710);
                    defaultValue148=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultValue148.getTree());
                    if ( state.backtracking==0 ) {
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, annotationMethodRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodRest"

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        public MemberVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationConstantRest"
    // JavaP.g:1162:1: annotationConstantRest[TypeReference type] returns [MemberVariableDeclarator element] : decls= variableDeclarators ;
    public final Java_JavaP.annotationConstantRest_return annotationConstantRest(TypeReference type) throws RecognitionException {
        Java_JavaP.annotationConstantRest_return retval = new Java_JavaP.annotationConstantRest_return();
        retval.start = input.LT(1);
        int annotationConstantRest_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableDeclarators_return decls = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // JavaP.g:1163:5: (decls= variableDeclarators )
            // JavaP.g:1163:9: decls= variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest5744);
            decls=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new MemberVariableDeclarator(type);
                       for(VariableDeclaration decl: decls.element) {
                         retval.element.add(decl);
                       } 
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, annotationConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationConstantRest"

    public static class defaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultValue"
    // JavaP.g:1171:1: defaultValue : 'default' elementValue ;
    public final Java_JavaP.defaultValue_return defaultValue() throws RecognitionException {
        Java_JavaP.defaultValue_return retval = new Java_JavaP.defaultValue_return();
        retval.start = input.LT(1);
        int defaultValue_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal149=null;
        Java_JavaP.elementValue_return elementValue150 = null;


        Object string_literal149_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // JavaP.g:1172:5: ( 'default' elementValue )
            // JavaP.g:1172:9: 'default' elementValue
            {
            root_0 = (Object)adaptor.nil();

            string_literal149=(Token)match(input,74,FOLLOW_74_in_defaultValue5778); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal149_tree = (Object)adaptor.create(string_literal149);
            adaptor.addChild(root_0, string_literal149_tree);
            }
            pushFollow(FOLLOW_elementValue_in_defaultValue5780);
            elementValue150=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue150.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, defaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "defaultValue"

    public static class block_return extends ParserRuleReturnScope {
        public Block element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // JavaP.g:1177:1: block returns [Block element] : '{' (stat= blockStatement )* '}' ;
    public final Java_JavaP.block_return block() throws RecognitionException {
        Java_JavaP.block_return retval = new Java_JavaP.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal151=null;
        Token char_literal152=null;
        Java_JavaP.blockStatement_return stat = null;


        Object char_literal151_tree=null;
        Object char_literal152_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // JavaP.g:1178:5: ( '{' (stat= blockStatement )* '}' )
            // JavaP.g:1178:9: '{' (stat= blockStatement )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal151=(Token)match(input,44,FOLLOW_44_in_block5805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal151_tree = (Object)adaptor.create(char_literal151);
            adaptor.addChild(root_0, char_literal151_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new Block();
            }
            // JavaP.g:1178:45: (stat= blockStatement )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( ((LA110_0>=HexLiteral && LA110_0<=OctalLiteral)||LA110_0==FloatingPointLiteral||(LA110_0>=CharacterLiteral && LA110_0<=StringLiteral)||(LA110_0>=ENUM && LA110_0<=ASSERT)||LA110_0==Identifier||LA110_0==26||LA110_0==28||(LA110_0>=31 && LA110_0<=37)||LA110_0==44||(LA110_0>=46 && LA110_0<=47)||LA110_0==53||(LA110_0>=56 && LA110_0<=63)||(LA110_0>=65 && LA110_0<=66)||(LA110_0>=69 && LA110_0<=73)||LA110_0==76||(LA110_0>=78 && LA110_0<=81)||(LA110_0>=83 && LA110_0<=87)||(LA110_0>=105 && LA110_0<=106)||(LA110_0>=109 && LA110_0<=113)) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // JavaP.g:1178:46: stat= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block5812);
            	    stat=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stat.getTree());
            	    if ( state.backtracking==0 ) {
            	      if(stat != null) {retval.element.addStatement(stat.element);}
            	    }

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);

            char_literal152=(Token)match(input,45,FOLLOW_45_in_block5818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal152_tree = (Object)adaptor.create(char_literal152);
            adaptor.addChild(root_0, char_literal152_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        public Statement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // JavaP.g:1181:1: blockStatement returns [Statement element] : (local= localVariableDeclarationStatement | cd= classOrInterfaceDeclaration | stat= statement );
    public final Java_JavaP.blockStatement_return blockStatement() throws RecognitionException {
        Java_JavaP.blockStatement_return retval = new Java_JavaP.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.localVariableDeclarationStatement_return local = null;

        Java_JavaP.classOrInterfaceDeclaration_return cd = null;

        Java_JavaP.statement_return stat = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // JavaP.g:1183:5: (local= localVariableDeclarationStatement | cd= classOrInterfaceDeclaration | stat= statement )
            int alt111=3;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // JavaP.g:1183:9: local= localVariableDeclarationStatement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclarationStatement_in_blockStatement5851);
                    local=localVariableDeclarationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = local.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1184:9: cd= classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement5865);
                    cd=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new LocalClassStatement(cd.element);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1185:9: stat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement5879);
                    stat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = stat.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclarationStatement_return extends ParserRuleReturnScope {
        public Statement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclarationStatement"
    // JavaP.g:1188:1: localVariableDeclarationStatement returns [Statement element] : local= localVariableDeclaration ';' ;
    public final Java_JavaP.localVariableDeclarationStatement_return localVariableDeclarationStatement() throws RecognitionException {
        Java_JavaP.localVariableDeclarationStatement_return retval = new Java_JavaP.localVariableDeclarationStatement_return();
        retval.start = input.LT(1);
        int localVariableDeclarationStatement_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal153=null;
        Java_JavaP.localVariableDeclaration_return local = null;


        Object char_literal153_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // JavaP.g:1189:5: (local= localVariableDeclaration ';' )
            // JavaP.g:1189:10: local= localVariableDeclaration ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement5911);
            local=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
            if ( state.backtracking==0 ) {
              retval.element=local.element;
            }
            char_literal153=(Token)match(input,26,FOLLOW_26_in_localVariableDeclarationStatement5915); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal153_tree = (Object)adaptor.create(char_literal153);
            adaptor.addChild(root_0, char_literal153_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, localVariableDeclarationStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclarationStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        public LocalVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // JavaP.g:1192:1: localVariableDeclaration returns [LocalVariableDeclarator element] : mods= variableModifiers ref= type decls= variableDeclarators ;
    public final Java_JavaP.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        Java_JavaP.localVariableDeclaration_return retval = new Java_JavaP.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return ref = null;

        Java_JavaP.variableDeclarators_return decls = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // JavaP.g:1193:5: (mods= variableModifiers ref= type decls= variableDeclarators )
            // JavaP.g:1193:9: mods= variableModifiers ref= type decls= variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableModifiers_in_localVariableDeclaration5940);
            mods=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            pushFollow(FOLLOW_type_in_localVariableDeclaration5944);
            ref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new LocalVariableDeclarator(ref.element);
            }
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration5950);
            decls=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
            if ( state.backtracking==0 ) {
              for(VariableDeclaration decl: decls.element) {retval.element.add(decl);}
            }
            if ( state.backtracking==0 ) {
              for(Modifier mod : mods.element) {retval.element.addModifier(mod);}
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class variableModifiers_return extends ParserRuleReturnScope {
        public List<Modifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifiers"
    // JavaP.g:1197:1: variableModifiers returns [List<Modifier> element] : (mod= variableModifier )* ;
    public final Java_JavaP.variableModifiers_return variableModifiers() throws RecognitionException {
        Java_JavaP.variableModifiers_return retval = new Java_JavaP.variableModifiers_return();
        retval.start = input.LT(1);
        int variableModifiers_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableModifier_return mod = null;



        retval.element = new ArrayList<Modifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // JavaP.g:1199:5: ( (mod= variableModifier )* )
            // JavaP.g:1199:9: (mod= variableModifier )*
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:1199:9: (mod= variableModifier )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==35||LA112_0==73) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // JavaP.g:1199:10: mod= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_variableModifiers5996);
            	    mod=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(mod.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, variableModifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifiers"

    public static class statement_return extends ParserRuleReturnScope {
        public Statement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // JavaP.g:1202:1: statement returns [Statement element] : (bl= block | ASSERT asexpr= expression ( ':' asexprx= expression )? ';' | ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )? | forkey= 'for' '(' forc= forControl ')' forstat= statement | whilkey= 'while' wexs= parExpression wstat= statement | dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';' | trykey= 'try' traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block ) | switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}' | synkey= 'synchronized' synexpr= parExpression synstat= block | retkey= 'return' (retex= expression )? ';' | throwkey= 'throw' threx= expression ';' | breakkey= 'break' (name= identifierRule )? ';' | continuekey= 'continue' (name= identifierRule )? ';' | ';' | stattex= statementExpression ';' | name= identifierRule ':' labstat= statement );
    public final Java_JavaP.statement_return statement() throws RecognitionException {
        Java_JavaP.statement_return retval = new Java_JavaP.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        Token ifkey=null;
        Token elsekey=null;
        Token forkey=null;
        Token whilkey=null;
        Token dokey=null;
        Token whilekey=null;
        Token trykey=null;
        Token finkey=null;
        Token finnkey=null;
        Token switchkey=null;
        Token synkey=null;
        Token retkey=null;
        Token throwkey=null;
        Token breakkey=null;
        Token continuekey=null;
        Token ASSERT154=null;
        Token char_literal155=null;
        Token char_literal156=null;
        Token char_literal157=null;
        Token char_literal158=null;
        Token char_literal159=null;
        Token char_literal160=null;
        Token char_literal161=null;
        Token char_literal162=null;
        Token char_literal163=null;
        Token char_literal164=null;
        Token char_literal165=null;
        Token char_literal166=null;
        Token char_literal167=null;
        Token char_literal168=null;
        Java_JavaP.block_return bl = null;

        Java_JavaP.expression_return asexpr = null;

        Java_JavaP.expression_return asexprx = null;

        Java_JavaP.parExpression_return ifexpr = null;

        Java_JavaP.statement_return ifif = null;

        Java_JavaP.statement_return ifelse = null;

        Java_JavaP.forControl_return forc = null;

        Java_JavaP.statement_return forstat = null;

        Java_JavaP.parExpression_return wexs = null;

        Java_JavaP.statement_return wstat = null;

        Java_JavaP.statement_return dostat = null;

        Java_JavaP.parExpression_return doex = null;

        Java_JavaP.block_return traaibl = null;

        Java_JavaP.catches_return cts = null;

        Java_JavaP.block_return trybl = null;

        Java_JavaP.catches_return ctss = null;

        Java_JavaP.block_return trybll = null;

        Java_JavaP.parExpression_return swexpr = null;

        Java_JavaP.switchBlockStatementGroups_return cases = null;

        Java_JavaP.parExpression_return synexpr = null;

        Java_JavaP.block_return synstat = null;

        Java_JavaP.expression_return retex = null;

        Java_JavaP.expression_return threx = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.statementExpression_return stattex = null;

        Java_JavaP.statement_return labstat = null;


        Object ifkey_tree=null;
        Object elsekey_tree=null;
        Object forkey_tree=null;
        Object whilkey_tree=null;
        Object dokey_tree=null;
        Object whilekey_tree=null;
        Object trykey_tree=null;
        Object finkey_tree=null;
        Object finnkey_tree=null;
        Object switchkey_tree=null;
        Object synkey_tree=null;
        Object retkey_tree=null;
        Object throwkey_tree=null;
        Object breakkey_tree=null;
        Object continuekey_tree=null;
        Object ASSERT154_tree=null;
        Object char_literal155_tree=null;
        Object char_literal156_tree=null;
        Object char_literal157_tree=null;
        Object char_literal158_tree=null;
        Object char_literal159_tree=null;
        Object char_literal160_tree=null;
        Object char_literal161_tree=null;
        Object char_literal162_tree=null;
        Object char_literal163_tree=null;
        Object char_literal164_tree=null;
        Object char_literal165_tree=null;
        Object char_literal166_tree=null;
        Object char_literal167_tree=null;
        Object char_literal168_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // JavaP.g:1205:5: (bl= block | ASSERT asexpr= expression ( ':' asexprx= expression )? ';' | ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )? | forkey= 'for' '(' forc= forControl ')' forstat= statement | whilkey= 'while' wexs= parExpression wstat= statement | dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';' | trykey= 'try' traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block ) | switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}' | synkey= 'synchronized' synexpr= parExpression synstat= block | retkey= 'return' (retex= expression )? ';' | throwkey= 'throw' threx= expression ';' | breakkey= 'break' (name= identifierRule )? ';' | continuekey= 'continue' (name= identifierRule )? ';' | ';' | stattex= statementExpression ';' | name= identifierRule ':' labstat= statement )
            int alt119=16;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // JavaP.g:1205:7: bl= block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement6027);
                    bl=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = bl.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1206:9: ASSERT asexpr= expression ( ':' asexprx= expression )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    ASSERT154=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement6039); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASSERT154_tree = (Object)adaptor.create(ASSERT154);
                    adaptor.addChild(root_0, ASSERT154_tree);
                    }
                    pushFollow(FOLLOW_expression_in_statement6043);
                    asexpr=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asexpr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=new AssertStatement(asexpr.element);
                    }
                    // JavaP.g:1206:87: ( ':' asexprx= expression )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==75) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // JavaP.g:1206:88: ':' asexprx= expression
                            {
                            char_literal155=(Token)match(input,75,FOLLOW_75_in_statement6047); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal155_tree = (Object)adaptor.create(char_literal155);
                            adaptor.addChild(root_0, char_literal155_tree);
                            }
                            pushFollow(FOLLOW_expression_in_statement6051);
                            asexprx=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asexprx.getTree());
                            if ( state.backtracking==0 ) {
                              ((AssertStatement)retval.element).setMessageExpression(asexprx.element);
                            }

                            }
                            break;

                    }

                    char_literal156=(Token)match(input,26,FOLLOW_26_in_statement6057); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal156_tree = (Object)adaptor.create(char_literal156);
                    adaptor.addChild(root_0, char_literal156_tree);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1207:9: ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )?
                    {
                    root_0 = (Object)adaptor.nil();

                    ifkey=(Token)match(input,76,FOLLOW_76_in_statement6069); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ifkey_tree = (Object)adaptor.create(ifkey);
                    adaptor.addChild(root_0, ifkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement6073);
                    ifexpr=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifexpr.getTree());
                    pushFollow(FOLLOW_statement_in_statement6077);
                    ifif=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifif.getTree());
                    // JavaP.g:1207:56: ( options {k=1; } : elsekey= 'else' ifelse= statement )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==77) ) {
                        int LA114_1 = input.LA(2);

                        if ( (synpred150_JavaP()) ) {
                            alt114=1;
                        }
                    }
                    switch (alt114) {
                        case 1 :
                            // JavaP.g:1207:72: elsekey= 'else' ifelse= statement
                            {
                            elsekey=(Token)match(input,77,FOLLOW_77_in_statement6089); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            elsekey_tree = (Object)adaptor.create(elsekey);
                            adaptor.addChild(root_0, elsekey_tree);
                            }
                            pushFollow(FOLLOW_statement_in_statement6093);
                            ifelse=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ifelse.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      retval.element=new IfThenElseStatement(ifexpr.element, ifif.element, (ifelse == null ? null : ifelse.element));
                                setKeyword(retval.element,ifkey);
                                if(ifelse != null) {
                                  setKeyword(ifelse.element,elsekey);
                                }
                               
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1214:9: forkey= 'for' '(' forc= forControl ')' forstat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    forkey=(Token)match(input,78,FOLLOW_78_in_statement6119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    forkey_tree = (Object)adaptor.create(forkey);
                    adaptor.addChild(root_0, forkey_tree);
                    }
                    char_literal157=(Token)match(input,66,FOLLOW_66_in_statement6121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal157_tree = (Object)adaptor.create(char_literal157);
                    adaptor.addChild(root_0, char_literal157_tree);
                    }
                    pushFollow(FOLLOW_forControl_in_statement6125);
                    forc=forControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forc.getTree());
                    char_literal158=(Token)match(input,67,FOLLOW_67_in_statement6127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal158_tree = (Object)adaptor.create(char_literal158);
                    adaptor.addChild(root_0, char_literal158_tree);
                    }
                    pushFollow(FOLLOW_statement_in_statement6131);
                    forstat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ForStatement(forc.element,forstat.element);
                              setKeyword(retval.element,forkey);
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1217:9: whilkey= 'while' wexs= parExpression wstat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    whilkey=(Token)match(input,79,FOLLOW_79_in_statement6154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    whilkey_tree = (Object)adaptor.create(whilkey);
                    adaptor.addChild(root_0, whilkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement6158);
                    wexs=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wexs.getTree());
                    pushFollow(FOLLOW_statement_in_statement6162);
                    wstat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new WhileStatement(wexs.element, wstat.element);
                              setKeyword(retval.element,whilkey);
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1220:9: dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    dokey=(Token)match(input,80,FOLLOW_80_in_statement6185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    dokey_tree = (Object)adaptor.create(dokey);
                    adaptor.addChild(root_0, dokey_tree);
                    }
                    pushFollow(FOLLOW_statement_in_statement6189);
                    dostat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dostat.getTree());
                    whilekey=(Token)match(input,79,FOLLOW_79_in_statement6193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    whilekey_tree = (Object)adaptor.create(whilekey);
                    adaptor.addChild(root_0, whilekey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement6197);
                    doex=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doex.getTree());
                    char_literal159=(Token)match(input,26,FOLLOW_26_in_statement6199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal159_tree = (Object)adaptor.create(char_literal159);
                    adaptor.addChild(root_0, char_literal159_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element= new DoStatement(doex.element, dostat.element);
                              setKeyword(retval.element,dokey);
                              setKeyword(retval.element,whilekey);
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1224:9: trykey= 'try' traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )
                    {
                    root_0 = (Object)adaptor.nil();

                    trykey=(Token)match(input,81,FOLLOW_81_in_statement6222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    trykey_tree = (Object)adaptor.create(trykey);
                    adaptor.addChild(root_0, trykey_tree);
                    }
                    pushFollow(FOLLOW_block_in_statement6226);
                    traaibl=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, traaibl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new TryStatement(traaibl.element);
                              setKeyword(retval.element,trykey);
                    }
                    // JavaP.g:1227:9: (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )
                    int alt115=3;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==88) ) {
                        int LA115_1 = input.LA(2);

                        if ( (synpred155_JavaP()) ) {
                            alt115=1;
                        }
                        else if ( (synpred156_JavaP()) ) {
                            alt115=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 115, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA115_0==82) ) {
                        alt115=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 115, 0, input);

                        throw nvae;
                    }
                    switch (alt115) {
                        case 1 :
                            // JavaP.g:1227:11: cts= catches finkey= 'finally' trybl= block
                            {
                            pushFollow(FOLLOW_catches_in_statement6251);
                            cts=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cts.getTree());
                            finkey=(Token)match(input,82,FOLLOW_82_in_statement6255); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            finkey_tree = (Object)adaptor.create(finkey);
                            adaptor.addChild(root_0, finkey_tree);
                            }
                            pushFollow(FOLLOW_block_in_statement6259);
                            trybl=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, trybl.getTree());
                            if ( state.backtracking==0 ) {
                              ((TryStatement)retval.element).addAllCatchClauses(cts.element); 
                                          ((TryStatement)retval.element).setFinallyClause(new FinallyClause(trybl.element));
                                          setKeyword(retval.element,finkey);
                                         
                            }

                            }
                            break;
                        case 2 :
                            // JavaP.g:1232:11: ctss= catches
                            {
                            pushFollow(FOLLOW_catches_in_statement6287);
                            ctss=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ctss.getTree());
                            if ( state.backtracking==0 ) {
                              ((TryStatement)retval.element).addAllCatchClauses(ctss.element);
                            }

                            }
                            break;
                        case 3 :
                            // JavaP.g:1233:13: finnkey= 'finally' trybll= block
                            {
                            finnkey=(Token)match(input,82,FOLLOW_82_in_statement6305); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            finnkey_tree = (Object)adaptor.create(finnkey);
                            adaptor.addChild(root_0, finnkey_tree);
                            }
                            pushFollow(FOLLOW_block_in_statement6309);
                            trybll=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, trybll.getTree());
                            if ( state.backtracking==0 ) {
                              ((TryStatement)retval.element).setFinallyClause(new FinallyClause(trybll.element));
                                         setKeyword(retval.element,finnkey);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // JavaP.g:1237:9: switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}'
                    {
                    root_0 = (Object)adaptor.nil();

                    switchkey=(Token)match(input,83,FOLLOW_83_in_statement6345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    switchkey_tree = (Object)adaptor.create(switchkey);
                    adaptor.addChild(root_0, switchkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement6349);
                    swexpr=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, swexpr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new SwitchStatement(swexpr.element);
                                setKeyword(retval.element,switchkey);
                    }
                    char_literal160=(Token)match(input,44,FOLLOW_44_in_statement6374); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal160_tree = (Object)adaptor.create(char_literal160);
                    adaptor.addChild(root_0, char_literal160_tree);
                    }
                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement6378);
                    cases=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cases.getTree());
                    if ( state.backtracking==0 ) {
                      ((SwitchStatement)retval.element).addAllCases(cases.element);
                    }
                    char_literal161=(Token)match(input,45,FOLLOW_45_in_statement6381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal161_tree = (Object)adaptor.create(char_literal161);
                    adaptor.addChild(root_0, char_literal161_tree);
                    }

                    }
                    break;
                case 9 :
                    // JavaP.g:1241:9: synkey= 'synchronized' synexpr= parExpression synstat= block
                    {
                    root_0 = (Object)adaptor.nil();

                    synkey=(Token)match(input,53,FOLLOW_53_in_statement6393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    synkey_tree = (Object)adaptor.create(synkey);
                    adaptor.addChild(root_0, synkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement6397);
                    synexpr=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synexpr.getTree());
                    pushFollow(FOLLOW_block_in_statement6401);
                    synstat=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new SynchronizedStatement(synexpr.element,synstat.element);
                                setKeyword(retval.element,synkey);
                    }

                    }
                    break;
                case 10 :
                    // JavaP.g:1244:9: retkey= 'return' (retex= expression )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    retkey=(Token)match(input,84,FOLLOW_84_in_statement6426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    retkey_tree = (Object)adaptor.create(retkey);
                    adaptor.addChild(root_0, retkey_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ReturnStatement();
                                   setKeyword(retval.element,retkey);
                    }
                    // JavaP.g:1247:11: (retex= expression )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( ((LA116_0>=HexLiteral && LA116_0<=OctalLiteral)||LA116_0==FloatingPointLiteral||(LA116_0>=CharacterLiteral && LA116_0<=StringLiteral)||LA116_0==Identifier||LA116_0==47||(LA116_0>=56 && LA116_0<=63)||(LA116_0>=65 && LA116_0<=66)||(LA116_0>=69 && LA116_0<=72)||(LA116_0>=105 && LA116_0<=106)||(LA116_0>=109 && LA116_0<=113)) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // JavaP.g:1247:12: retex= expression
                            {
                            pushFollow(FOLLOW_expression_in_statement6457);
                            retex=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, retex.getTree());
                            if ( state.backtracking==0 ) {
                              ((ReturnStatement)retval.element).setExpression(retex.element);
                            }

                            }
                            break;

                    }

                    char_literal162=(Token)match(input,26,FOLLOW_26_in_statement6463); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal162_tree = (Object)adaptor.create(char_literal162);
                    adaptor.addChild(root_0, char_literal162_tree);
                    }

                    }
                    break;
                case 11 :
                    // JavaP.g:1248:9: throwkey= 'throw' threx= expression ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    throwkey=(Token)match(input,85,FOLLOW_85_in_statement6475); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    throwkey_tree = (Object)adaptor.create(throwkey);
                    adaptor.addChild(root_0, throwkey_tree);
                    }
                    pushFollow(FOLLOW_expression_in_statement6479);
                    threx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, threx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ThrowStatement(threx.element);
                              setKeyword(retval.element,throwkey);
                    }
                    char_literal163=(Token)match(input,26,FOLLOW_26_in_statement6500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal163_tree = (Object)adaptor.create(char_literal163);
                    adaptor.addChild(root_0, char_literal163_tree);
                    }

                    }
                    break;
                case 12 :
                    // JavaP.g:1252:9: breakkey= 'break' (name= identifierRule )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    breakkey=(Token)match(input,86,FOLLOW_86_in_statement6512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    breakkey_tree = (Object)adaptor.create(breakkey);
                    adaptor.addChild(root_0, breakkey_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new BreakStatement();
                              setKeyword(retval.element,breakkey);
                    }
                    // JavaP.g:1255:9: (name= identifierRule )?
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==Identifier) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            // JavaP.g:1255:10: name= identifierRule
                            {
                            pushFollow(FOLLOW_identifierRule_in_statement6537);
                            name=identifierRule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                            if ( state.backtracking==0 ) {
                              ((BreakStatement)retval.element).setLabel((name!=null?input.toString(name.start,name.stop):null));
                            }

                            }
                            break;

                    }

                    char_literal164=(Token)match(input,26,FOLLOW_26_in_statement6543); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal164_tree = (Object)adaptor.create(char_literal164);
                    adaptor.addChild(root_0, char_literal164_tree);
                    }

                    }
                    break;
                case 13 :
                    // JavaP.g:1256:9: continuekey= 'continue' (name= identifierRule )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    continuekey=(Token)match(input,87,FOLLOW_87_in_statement6555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    continuekey_tree = (Object)adaptor.create(continuekey);
                    adaptor.addChild(root_0, continuekey_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ContinueStatement();
                              setKeyword(retval.element,continuekey);
                    }
                    // JavaP.g:1259:9: (name= identifierRule )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==Identifier) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // JavaP.g:1259:10: name= identifierRule
                            {
                            pushFollow(FOLLOW_identifierRule_in_statement6580);
                            name=identifierRule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                            if ( state.backtracking==0 ) {
                              ((ContinueStatement)retval.element).setLabel((name!=null?input.toString(name.start,name.stop):null));
                            }

                            }
                            break;

                    }

                    char_literal165=(Token)match(input,26,FOLLOW_26_in_statement6586); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal165_tree = (Object)adaptor.create(char_literal165);
                    adaptor.addChild(root_0, char_literal165_tree);
                    }

                    }
                    break;
                case 14 :
                    // JavaP.g:1260:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal166=(Token)match(input,26,FOLLOW_26_in_statement6596); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal166_tree = (Object)adaptor.create(char_literal166);
                    adaptor.addChild(root_0, char_literal166_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new EmptyStatement();
                    }

                    }
                    break;
                case 15 :
                    // JavaP.g:1261:9: stattex= statementExpression ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statementExpression_in_statement6610);
                    stattex=statementExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stattex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new StatementExpression(stattex.element);
                    }
                    char_literal167=(Token)match(input,26,FOLLOW_26_in_statement6614); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal167_tree = (Object)adaptor.create(char_literal167);
                    adaptor.addChild(root_0, char_literal167_tree);
                    }

                    }
                    break;
                case 16 :
                    // JavaP.g:1262:9: name= identifierRule ':' labstat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierRule_in_statement6626);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    char_literal168=(Token)match(input,75,FOLLOW_75_in_statement6628); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal168_tree = (Object)adaptor.create(char_literal168);
                    adaptor.addChild(root_0, char_literal168_tree);
                    }
                    pushFollow(FOLLOW_statement_in_statement6632);
                    labstat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, labstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new LabeledStatement((name!=null?input.toString(name.start,name.stop):null),labstat.element);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        public List<CatchClause> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // JavaP.g:1265:1: catches returns [List<CatchClause> element] : (ct= catchClause )+ ;
    public final Java_JavaP.catches_return catches() throws RecognitionException {
        Java_JavaP.catches_return retval = new Java_JavaP.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.catchClause_return ct = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // JavaP.g:1267:5: ( (ct= catchClause )+ )
            // JavaP.g:1267:9: (ct= catchClause )+
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<CatchClause>();
            }
            // JavaP.g:1267:58: (ct= catchClause )+
            int cnt120=0;
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==88) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // JavaP.g:1267:59: ct= catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches6670);
            	    ct=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ct.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(ct.element);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        public CatchClause element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // JavaP.g:1270:1: catchClause returns [CatchClause element] : catchkey= 'catch' '(' par= formalParameter ')' bl= block ;
    public final Java_JavaP.catchClause_return catchClause() throws RecognitionException {
        Java_JavaP.catchClause_return retval = new Java_JavaP.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Object root_0 = null;

        Token catchkey=null;
        Token char_literal169=null;
        Token char_literal170=null;
        Java_JavaP.formalParameter_return par = null;

        Java_JavaP.block_return bl = null;


        Object catchkey_tree=null;
        Object char_literal169_tree=null;
        Object char_literal170_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // JavaP.g:1272:5: (catchkey= 'catch' '(' par= formalParameter ')' bl= block )
            // JavaP.g:1272:9: catchkey= 'catch' '(' par= formalParameter ')' bl= block
            {
            root_0 = (Object)adaptor.nil();

            catchkey=(Token)match(input,88,FOLLOW_88_in_catchClause6707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            catchkey_tree = (Object)adaptor.create(catchkey);
            adaptor.addChild(root_0, catchkey_tree);
            }
            char_literal169=(Token)match(input,66,FOLLOW_66_in_catchClause6709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal169_tree = (Object)adaptor.create(char_literal169);
            adaptor.addChild(root_0, char_literal169_tree);
            }
            pushFollow(FOLLOW_formalParameter_in_catchClause6713);
            par=formalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, par.getTree());
            char_literal170=(Token)match(input,67,FOLLOW_67_in_catchClause6715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal170_tree = (Object)adaptor.create(char_literal170);
            adaptor.addChild(root_0, char_literal170_tree);
            }
            pushFollow(FOLLOW_block_in_catchClause6719);
            bl=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bl.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new CatchClause(par.element, bl.element);
                      setKeyword(retval.element,catchkey);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class formalParameter_return extends ParserRuleReturnScope {
        public FormalParameter element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // JavaP.g:1277:1: formalParameter returns [FormalParameter element] : mods= variableModifiers tref= type name= variableDeclaratorId ;
    public final Java_JavaP.formalParameter_return formalParameter() throws RecognitionException {
        Java_JavaP.formalParameter_return retval = new Java_JavaP.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return tref = null;

        Java_JavaP.variableDeclaratorId_return name = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // JavaP.g:1279:5: (mods= variableModifiers tref= type name= variableDeclaratorId )
            // JavaP.g:1279:9: mods= variableModifiers tref= type name= variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableModifiers_in_formalParameter6759);
            mods=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            pushFollow(FOLLOW_type_in_formalParameter6763);
            tref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter6767);
            name=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new FormalParameter(new SimpleNameSignature(name.element.name()), myToArray(tref.element, name.element));
                       setLocation(retval.element, mods.start, name.stop);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        public List<SwitchCase> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // JavaP.g:1285:1: switchBlockStatementGroups returns [List<SwitchCase> element] : (cs= switchCase )* ;
    public final Java_JavaP.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        Java_JavaP.switchBlockStatementGroups_return retval = new Java_JavaP.switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.switchCase_return cs = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // JavaP.g:1287:5: ( (cs= switchCase )* )
            // JavaP.g:1287:9: (cs= switchCase )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<SwitchCase>();
            }
            // JavaP.g:1287:56: (cs= switchCase )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==74||LA121_0==89) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // JavaP.g:1287:57: cs= switchCase
            	    {
            	    pushFollow(FOLLOW_switchCase_in_switchBlockStatementGroups6817);
            	    cs=switchCase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cs.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(cs.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchCase_return extends ParserRuleReturnScope {
        public SwitchCase element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCase"
    // JavaP.g:1294:1: switchCase returns [SwitchCase element] : label= switchLabel ( blockStatement )* ;
    public final Java_JavaP.switchCase_return switchCase() throws RecognitionException {
        Java_JavaP.switchCase_return retval = new Java_JavaP.switchCase_return();
        retval.start = input.LT(1);
        int switchCase_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.switchLabel_return label = null;

        Java_JavaP.blockStatement_return blockStatement171 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // JavaP.g:1296:5: (label= switchLabel ( blockStatement )* )
            // JavaP.g:1296:9: label= switchLabel ( blockStatement )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_switchLabel_in_switchCase6856);
            label=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, label.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new SwitchCase(label.element);
            }
            // JavaP.g:1296:77: ( blockStatement )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( ((LA122_0>=HexLiteral && LA122_0<=OctalLiteral)||LA122_0==FloatingPointLiteral||(LA122_0>=CharacterLiteral && LA122_0<=StringLiteral)||(LA122_0>=ENUM && LA122_0<=ASSERT)||LA122_0==Identifier||LA122_0==26||LA122_0==28||(LA122_0>=31 && LA122_0<=37)||LA122_0==44||(LA122_0>=46 && LA122_0<=47)||LA122_0==53||(LA122_0>=56 && LA122_0<=63)||(LA122_0>=65 && LA122_0<=66)||(LA122_0>=69 && LA122_0<=73)||LA122_0==76||(LA122_0>=78 && LA122_0<=81)||(LA122_0>=83 && LA122_0<=87)||(LA122_0>=105 && LA122_0<=106)||(LA122_0>=109 && LA122_0<=113)) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // JavaP.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchCase6860);
            	    blockStatement171=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement171.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, switchCase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCase"

    public static class switchLabel_return extends ParserRuleReturnScope {
        public SwitchLabel element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // JavaP.g:1299:1: switchLabel returns [SwitchLabel element] : ( 'case' csexpr= constantExpression ':' | 'case' enumname= enumConstantName ':' | 'default' ':' );
    public final Java_JavaP.switchLabel_return switchLabel() throws RecognitionException {
        Java_JavaP.switchLabel_return retval = new Java_JavaP.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal172=null;
        Token char_literal173=null;
        Token string_literal174=null;
        Token char_literal175=null;
        Token string_literal176=null;
        Token char_literal177=null;
        Java_JavaP.constantExpression_return csexpr = null;

        Java_JavaP.enumConstantName_return enumname = null;


        Object string_literal172_tree=null;
        Object char_literal173_tree=null;
        Object string_literal174_tree=null;
        Object char_literal175_tree=null;
        Object string_literal176_tree=null;
        Object char_literal177_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // JavaP.g:1301:5: ( 'case' csexpr= constantExpression ':' | 'case' enumname= enumConstantName ':' | 'default' ':' )
            int alt123=3;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==89) ) {
                int LA123_1 = input.LA(2);

                if ( ((LA123_1>=HexLiteral && LA123_1<=OctalLiteral)||LA123_1==FloatingPointLiteral||(LA123_1>=CharacterLiteral && LA123_1<=StringLiteral)||LA123_1==47||(LA123_1>=56 && LA123_1<=63)||(LA123_1>=65 && LA123_1<=66)||(LA123_1>=69 && LA123_1<=72)||(LA123_1>=105 && LA123_1<=106)||(LA123_1>=109 && LA123_1<=113)) ) {
                    alt123=1;
                }
                else if ( (LA123_1==Identifier) ) {
                    int LA123_4 = input.LA(3);

                    if ( ((LA123_4>=29 && LA123_4<=30)||LA123_4==40||(LA123_4>=42 && LA123_4<=43)||LA123_4==48||LA123_4==51||LA123_4==64||LA123_4==66||(LA123_4>=90 && LA123_4<=110)) ) {
                        alt123=1;
                    }
                    else if ( (LA123_4==75) ) {
                        int LA123_5 = input.LA(4);

                        if ( (synpred172_JavaP()) ) {
                            alt123=1;
                        }
                        else if ( (synpred173_JavaP()) ) {
                            alt123=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 123, 5, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 123, 4, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==74) ) {
                alt123=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // JavaP.g:1301:9: 'case' csexpr= constantExpression ':'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal172=(Token)match(input,89,FOLLOW_89_in_switchLabel6892); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal172_tree = (Object)adaptor.create(string_literal172);
                    adaptor.addChild(root_0, string_literal172_tree);
                    }
                    pushFollow(FOLLOW_constantExpression_in_switchLabel6896);
                    csexpr=constantExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, csexpr.getTree());
                    char_literal173=(Token)match(input,75,FOLLOW_75_in_switchLabel6898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal173_tree = (Object)adaptor.create(char_literal173);
                    adaptor.addChild(root_0, char_literal173_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new CaseLabel(csexpr.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1302:9: 'case' enumname= enumConstantName ':'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal174=(Token)match(input,89,FOLLOW_89_in_switchLabel6910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal174_tree = (Object)adaptor.create(string_literal174);
                    adaptor.addChild(root_0, string_literal174_tree);
                    }
                    pushFollow(FOLLOW_enumConstantName_in_switchLabel6914);
                    enumname=enumConstantName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumname.getTree());
                    char_literal175=(Token)match(input,75,FOLLOW_75_in_switchLabel6916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal175_tree = (Object)adaptor.create(char_literal175);
                    adaptor.addChild(root_0, char_literal175_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new EnumLabel(enumname.element);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1303:9: 'default' ':'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal176=(Token)match(input,74,FOLLOW_74_in_switchLabel6928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal176_tree = (Object)adaptor.create(string_literal176);
                    adaptor.addChild(root_0, string_literal176_tree);
                    }
                    char_literal177=(Token)match(input,75,FOLLOW_75_in_switchLabel6930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal177_tree = (Object)adaptor.create(char_literal177);
                    adaptor.addChild(root_0, char_literal177_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new DefaultLabel();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class forControl_return extends ParserRuleReturnScope {
        public ForControl element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forControl"
    // JavaP.g:1306:1: forControl returns [ForControl element] options {k=3; } : (enh= enhancedForControl | (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )? );
    public final Java_JavaP.forControl_return forControl() throws RecognitionException {
        Java_JavaP.forControl_return retval = new Java_JavaP.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal178=null;
        Token char_literal179=null;
        Java_JavaP.enhancedForControl_return enh = null;

        Java_JavaP.forInit_return in = null;

        Java_JavaP.expression_return e = null;

        Java_JavaP.forUpdate_return u = null;


        Object char_literal178_tree=null;
        Object char_literal179_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // JavaP.g:1309:5: (enh= enhancedForControl | (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )? )
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // JavaP.g:1309:9: enh= enhancedForControl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enhancedForControl_in_forControl6972);
                    enh=enhancedForControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enh.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=enh.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1310:9: (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:1310:11: (in= forInit )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( ((LA124_0>=HexLiteral && LA124_0<=OctalLiteral)||LA124_0==FloatingPointLiteral||(LA124_0>=CharacterLiteral && LA124_0<=StringLiteral)||LA124_0==Identifier||LA124_0==35||LA124_0==47||(LA124_0>=56 && LA124_0<=63)||(LA124_0>=65 && LA124_0<=66)||(LA124_0>=69 && LA124_0<=73)||(LA124_0>=105 && LA124_0<=106)||(LA124_0>=109 && LA124_0<=113)) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // JavaP.g:0:0: in= forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl6986);
                            in=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());

                            }
                            break;

                    }

                    char_literal178=(Token)match(input,26,FOLLOW_26_in_forControl6989); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal178_tree = (Object)adaptor.create(char_literal178);
                    adaptor.addChild(root_0, char_literal178_tree);
                    }
                    // JavaP.g:1310:26: (e= expression )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( ((LA125_0>=HexLiteral && LA125_0<=OctalLiteral)||LA125_0==FloatingPointLiteral||(LA125_0>=CharacterLiteral && LA125_0<=StringLiteral)||LA125_0==Identifier||LA125_0==47||(LA125_0>=56 && LA125_0<=63)||(LA125_0>=65 && LA125_0<=66)||(LA125_0>=69 && LA125_0<=72)||(LA125_0>=105 && LA125_0<=106)||(LA125_0>=109 && LA125_0<=113)) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // JavaP.g:0:0: e= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl6993);
                            e=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());

                            }
                            break;

                    }

                    char_literal179=(Token)match(input,26,FOLLOW_26_in_forControl6996); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal179_tree = (Object)adaptor.create(char_literal179);
                    adaptor.addChild(root_0, char_literal179_tree);
                    }
                    // JavaP.g:1310:44: (u= forUpdate )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( ((LA126_0>=HexLiteral && LA126_0<=OctalLiteral)||LA126_0==FloatingPointLiteral||(LA126_0>=CharacterLiteral && LA126_0<=StringLiteral)||LA126_0==Identifier||LA126_0==47||(LA126_0>=56 && LA126_0<=63)||(LA126_0>=65 && LA126_0<=66)||(LA126_0>=69 && LA126_0<=72)||(LA126_0>=105 && LA126_0<=106)||(LA126_0>=109 && LA126_0<=113)) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // JavaP.g:0:0: u= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl7000);
                            u=forUpdate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, u.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      retval.element = new SimpleForControl((in!=null?in.element:null),(e!=null?e.element:null),(u!=null?u.element:null));
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInit_return extends ParserRuleReturnScope {
        public ForInit element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // JavaP.g:1313:1: forInit returns [ForInit element] : (local= localVariableDeclaration | el= expressionList );
    public final Java_JavaP.forInit_return forInit() throws RecognitionException {
        Java_JavaP.forInit_return retval = new Java_JavaP.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.localVariableDeclaration_return local = null;

        Java_JavaP.expressionList_return el = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // JavaP.g:1315:5: (local= localVariableDeclaration | el= expressionList )
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // JavaP.g:1315:9: local= localVariableDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit7032);
                    local=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=local.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1316:9: el= expressionList
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit7046);
                    el=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, el.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new StatementExprList(); for(Expression expr: el.element){((StatementExprList)retval.element).addStatement(new StatementExpression(expr));};
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class enhancedForControl_return extends ParserRuleReturnScope {
        public ForControl element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enhancedForControl"
    // JavaP.g:1319:1: enhancedForControl returns [ForControl element] : local= localVariableDeclaration ':' ex= expression ;
    public final Java_JavaP.enhancedForControl_return enhancedForControl() throws RecognitionException {
        Java_JavaP.enhancedForControl_return retval = new Java_JavaP.enhancedForControl_return();
        retval.start = input.LT(1);
        int enhancedForControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal180=null;
        Java_JavaP.localVariableDeclaration_return local = null;

        Java_JavaP.expression_return ex = null;


        Object char_literal180_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // JavaP.g:1321:5: (local= localVariableDeclaration ':' ex= expression )
            // JavaP.g:1321:9: local= localVariableDeclaration ':' ex= expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_localVariableDeclaration_in_enhancedForControl7081);
            local=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
            char_literal180=(Token)match(input,75,FOLLOW_75_in_enhancedForControl7083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal180_tree = (Object)adaptor.create(char_literal180);
            adaptor.addChild(root_0, char_literal180_tree);
            }
            pushFollow(FOLLOW_expression_in_enhancedForControl7087);
            ex=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new EnhancedForControl(local.element, ex.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, enhancedForControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enhancedForControl"

    public static class forUpdate_return extends ParserRuleReturnScope {
        public StatementExprList element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdate"
    // JavaP.g:1324:1: forUpdate returns [StatementExprList element] : el= expressionList ;
    public final Java_JavaP.forUpdate_return forUpdate() throws RecognitionException {
        Java_JavaP.forUpdate_return retval = new Java_JavaP.forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.expressionList_return el = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // JavaP.g:1325:5: (el= expressionList )
            // JavaP.g:1325:9: el= expressionList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expressionList_in_forUpdate7114);
            el=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, el.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new StatementExprList(); for(Expression expr: el.element){((StatementExprList)retval.element).addStatement(new StatementExpression(expr));};
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, forUpdate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class parExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // JavaP.g:1330:1: parExpression returns [Expression element] : s= '(' expr= expression e= ')' ;
    public final Java_JavaP.parExpression_return parExpression() throws RecognitionException {
        Java_JavaP.parExpression_return retval = new Java_JavaP.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Object root_0 = null;

        Token s=null;
        Token e=null;
        Java_JavaP.expression_return expr = null;


        Object s_tree=null;
        Object e_tree=null;


        Token start=null;
        Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // JavaP.g:1338:5: (s= '(' expr= expression e= ')' )
            // JavaP.g:1338:9: s= '(' expr= expression e= ')'
            {
            root_0 = (Object)adaptor.nil();

            s=(Token)match(input,66,FOLLOW_66_in_parExpression7151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            s_tree = (Object)adaptor.create(s);
            adaptor.addChild(root_0, s_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression7155);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
            if ( state.backtracking==0 ) {
              retval.element = expr.element;
            }
            e=(Token)match(input,67,FOLLOW_67_in_parExpression7161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            e_tree = (Object)adaptor.create(e);
            adaptor.addChild(root_0, e_tree);
            }
            if ( state.backtracking==0 ) {

                        start = s;
                        stop = e;
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              setLocation(retval.element,start,stop);

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        public List<Expression> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // JavaP.g:1345:1: expressionList returns [List<Expression> element] : e= expression ( ',' ex= expression )* ;
    public final Java_JavaP.expressionList_return expressionList() throws RecognitionException {
        Java_JavaP.expressionList_return retval = new Java_JavaP.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal181=null;
        Java_JavaP.expression_return e = null;

        Java_JavaP.expression_return ex = null;


        Object char_literal181_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // JavaP.g:1346:5: (e= expression ( ',' ex= expression )* )
            // JavaP.g:1346:9: e= expression ( ',' ex= expression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<Expression>();
            }
            pushFollow(FOLLOW_expression_in_expressionList7202);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              if(e.element == null) {System.out.println((e!=null?input.toString(e.start,e.stop):null));throw new RuntimeException("parser error");}
                       retval.element.add(e.element);
            }
            // JavaP.g:1349:10: ( ',' ex= expression )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==41) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // JavaP.g:1349:11: ',' ex= expression
            	    {
            	    char_literal181=(Token)match(input,41,FOLLOW_41_in_expressionList7225); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal181_tree = (Object)adaptor.create(char_literal181);
            	    adaptor.addChild(root_0, char_literal181_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_expressionList7229);
            	    ex=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(ex.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class statementExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statementExpression"
    // JavaP.g:1352:1: statementExpression returns [Expression element] : e= expression ;
    public final Java_JavaP.statementExpression_return statementExpression() throws RecognitionException {
        Java_JavaP.statementExpression_return retval = new Java_JavaP.statementExpression_return();
        retval.start = input.LT(1);
        int statementExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.expression_return e = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // JavaP.g:1353:5: (e= expression )
            // JavaP.g:1353:9: e= expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_statementExpression7258);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              retval.element = e.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, statementExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statementExpression"

    public static class constantExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantExpression"
    // JavaP.g:1356:1: constantExpression returns [Expression element] : e= expression ;
    public final Java_JavaP.constantExpression_return constantExpression() throws RecognitionException {
        Java_JavaP.constantExpression_return retval = new Java_JavaP.constantExpression_return();
        retval.start = input.LT(1);
        int constantExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.expression_return e = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // JavaP.g:1357:5: (e= expression )
            // JavaP.g:1357:9: e= expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_constantExpression7289);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              retval.element = e.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, constantExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantExpression"

    public static class expression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // JavaP.g:1360:1: expression returns [Expression element] : ex= conditionalExpression (op= assignmentOperator exx= expression )? ;
    public final Java_JavaP.expression_return expression() throws RecognitionException {
        Java_JavaP.expression_return retval = new Java_JavaP.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.conditionalExpression_return ex = null;

        Java_JavaP.assignmentOperator_return op = null;

        Java_JavaP.expression_return exx = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // JavaP.g:1361:5: (ex= conditionalExpression (op= assignmentOperator exx= expression )? )
            // JavaP.g:1361:9: ex= conditionalExpression (op= assignmentOperator exx= expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression7320);
            ex=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element=ex.element;
            }
            // JavaP.g:1361:63: (op= assignmentOperator exx= expression )?
            int alt130=2;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // JavaP.g:1361:64: op= assignmentOperator exx= expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression7327);
                    op=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
                    pushFollow(FOLLOW_expression_in_expression7331);
                    exx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    if ( state.backtracking==0 ) {
                      String txt = (op!=null?input.toString(op.start,op.stop):null); 
                               if(txt.equals("=")) {
                                 retval.element = new AssignmentExpression(ex.element,exx.element);
                               } else {
                                 retval.element = new InfixOperatorInvocation((op!=null?input.toString(op.start,op.stop):null),ex.element);
                                 ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
                               }
                               //setName(retval.element,op.start,op.stop);
                               setLocation(retval.element,retval.start,exx.stop);
                              
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // JavaP.g:1375:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?);
    public final Java_JavaP.assignmentOperator_return assignmentOperator() throws RecognitionException {
        Java_JavaP.assignmentOperator_return retval = new Java_JavaP.assignmentOperator_return();
        retval.start = input.LT(1);
        int assignmentOperator_StartIndex = input.index();
        Object root_0 = null;

        Token t1=null;
        Token t2=null;
        Token t3=null;
        Token t4=null;
        Token char_literal182=null;
        Token string_literal183=null;
        Token string_literal184=null;
        Token string_literal185=null;
        Token string_literal186=null;
        Token string_literal187=null;
        Token string_literal188=null;
        Token string_literal189=null;
        Token string_literal190=null;

        Object t1_tree=null;
        Object t2_tree=null;
        Object t3_tree=null;
        Object t4_tree=null;
        Object char_literal182_tree=null;
        Object string_literal183_tree=null;
        Object string_literal184_tree=null;
        Object string_literal185_tree=null;
        Object string_literal186_tree=null;
        Object string_literal187_tree=null;
        Object string_literal188_tree=null;
        Object string_literal189_tree=null;
        Object string_literal190_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // JavaP.g:1376:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?)
            int alt131=12;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // JavaP.g:1376:9: '='
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal182=(Token)match(input,51,FOLLOW_51_in_assignmentOperator7376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal182_tree = (Object)adaptor.create(char_literal182);
                    adaptor.addChild(root_0, char_literal182_tree);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1377:9: '+='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal183=(Token)match(input,90,FOLLOW_90_in_assignmentOperator7386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal183_tree = (Object)adaptor.create(string_literal183);
                    adaptor.addChild(root_0, string_literal183_tree);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1378:9: '-='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal184=(Token)match(input,91,FOLLOW_91_in_assignmentOperator7396); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal184_tree = (Object)adaptor.create(string_literal184);
                    adaptor.addChild(root_0, string_literal184_tree);
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1379:9: '*='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal185=(Token)match(input,92,FOLLOW_92_in_assignmentOperator7406); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal185_tree = (Object)adaptor.create(string_literal185);
                    adaptor.addChild(root_0, string_literal185_tree);
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1380:9: '/='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal186=(Token)match(input,93,FOLLOW_93_in_assignmentOperator7416); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal186_tree = (Object)adaptor.create(string_literal186);
                    adaptor.addChild(root_0, string_literal186_tree);
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1381:9: '&='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal187=(Token)match(input,94,FOLLOW_94_in_assignmentOperator7426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal187_tree = (Object)adaptor.create(string_literal187);
                    adaptor.addChild(root_0, string_literal187_tree);
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1382:9: '|='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal188=(Token)match(input,95,FOLLOW_95_in_assignmentOperator7436); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal188_tree = (Object)adaptor.create(string_literal188);
                    adaptor.addChild(root_0, string_literal188_tree);
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:1383:9: '^='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal189=(Token)match(input,96,FOLLOW_96_in_assignmentOperator7446); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal189_tree = (Object)adaptor.create(string_literal189);
                    adaptor.addChild(root_0, string_literal189_tree);
                    }

                    }
                    break;
                case 9 :
                    // JavaP.g:1384:9: '%='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal190=(Token)match(input,97,FOLLOW_97_in_assignmentOperator7456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal190_tree = (Object)adaptor.create(string_literal190);
                    adaptor.addChild(root_0, string_literal190_tree);
                    }

                    }
                    break;
                case 10 :
                    // JavaP.g:1385:9: ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,40,FOLLOW_40_in_assignmentOperator7477); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,40,FOLLOW_40_in_assignmentOperator7481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,51,FOLLOW_51_in_assignmentOperator7485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() && 
                              t2.getLine() == t3.getLine() && 
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\r\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() && \r\n          $t2.getLine() == $t3.getLine() && \r\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 11 :
                    // JavaP.g:1390:9: ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,42,FOLLOW_42_in_assignmentOperator7519); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,42,FOLLOW_42_in_assignmentOperator7523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,42,FOLLOW_42_in_assignmentOperator7527); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    t4=(Token)match(input,51,FOLLOW_51_in_assignmentOperator7531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t4_tree = (Object)adaptor.create(t4);
                    adaptor.addChild(root_0, t4_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() && 
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() &&
                              t3.getLine() == t4.getLine() && 
                              t3.getCharPositionInLine() + 1 == t4.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() && \r\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\r\n          $t2.getLine() == $t3.getLine() && \r\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() &&\r\n          $t3.getLine() == $t4.getLine() && \r\n          $t3.getCharPositionInLine() + 1 == $t4.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 12 :
                    // JavaP.g:1397:9: ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,42,FOLLOW_42_in_assignmentOperator7562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,42,FOLLOW_42_in_assignmentOperator7566); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,51,FOLLOW_51_in_assignmentOperator7570); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() && 
                              t2.getLine() == t3.getLine() && 
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() && \r\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() && \r\n          $t2.getLine() == $t3.getLine() && \r\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, assignmentOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // JavaP.g:1404:1: conditionalExpression returns [Expression element] : ex= conditionalOrExpression ( '?' exx= expression ':' exxx= expression )? ;
    public final Java_JavaP.conditionalExpression_return conditionalExpression() throws RecognitionException {
        Java_JavaP.conditionalExpression_return retval = new Java_JavaP.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal191=null;
        Token char_literal192=null;
        Java_JavaP.conditionalOrExpression_return ex = null;

        Java_JavaP.expression_return exx = null;

        Java_JavaP.expression_return exxx = null;


        Object char_literal191_tree=null;
        Object char_literal192_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // JavaP.g:1405:5: (ex= conditionalOrExpression ( '?' exx= expression ':' exxx= expression )? )
            // JavaP.g:1405:9: ex= conditionalOrExpression ( '?' exx= expression ':' exxx= expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression7605);
            ex=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1405:66: ( '?' exx= expression ':' exxx= expression )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==64) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // JavaP.g:1405:68: '?' exx= expression ':' exxx= expression
                    {
                    char_literal191=(Token)match(input,64,FOLLOW_64_in_conditionalExpression7610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal191_tree = (Object)adaptor.create(char_literal191);
                    adaptor.addChild(root_0, char_literal191_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression7614);
                    exx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    char_literal192=(Token)match(input,75,FOLLOW_75_in_conditionalExpression7616); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal192_tree = (Object)adaptor.create(char_literal192);
                    adaptor.addChild(root_0, char_literal192_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression7620);
                    exxx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exxx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ConditionalExpression(retval.element,exx.element,exxx.element);
                               setLocation(retval.element,retval.start,exxx.stop);
                              
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // JavaP.g:1412:1: conditionalOrExpression returns [Expression element] : ex= conditionalAndExpression ( '||' exx= conditionalAndExpression )* ;
    public final Java_JavaP.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        Java_JavaP.conditionalOrExpression_return retval = new Java_JavaP.conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal193=null;
        Java_JavaP.conditionalAndExpression_return ex = null;

        Java_JavaP.conditionalAndExpression_return exx = null;


        Object string_literal193_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // JavaP.g:1413:5: (ex= conditionalAndExpression ( '||' exx= conditionalAndExpression )* )
            // JavaP.g:1413:9: ex= conditionalAndExpression ( '||' exx= conditionalAndExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression7663);
            ex=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1413:68: ( '||' exx= conditionalAndExpression )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==98) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // JavaP.g:1413:70: '||' exx= conditionalAndExpression
            	    {
            	    string_literal193=(Token)match(input,98,FOLLOW_98_in_conditionalOrExpression7669); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal193_tree = (Object)adaptor.create(string_literal193);
            	    adaptor.addChild(root_0, string_literal193_tree);
            	    }
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression7673);
            	    exx=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element = new ConditionalOrExpression(retval.element, exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // JavaP.g:1419:1: conditionalAndExpression returns [Expression element] : ex= inclusiveOrExpression ( '&&' exx= inclusiveOrExpression )* ;
    public final Java_JavaP.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        Java_JavaP.conditionalAndExpression_return retval = new Java_JavaP.conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal194=null;
        Java_JavaP.inclusiveOrExpression_return ex = null;

        Java_JavaP.inclusiveOrExpression_return exx = null;


        Object string_literal194_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // JavaP.g:1420:5: (ex= inclusiveOrExpression ( '&&' exx= inclusiveOrExpression )* )
            // JavaP.g:1420:9: ex= inclusiveOrExpression ( '&&' exx= inclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7711);
            ex=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1420:65: ( '&&' exx= inclusiveOrExpression )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==99) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // JavaP.g:1420:67: '&&' exx= inclusiveOrExpression
            	    {
            	    string_literal194=(Token)match(input,99,FOLLOW_99_in_conditionalAndExpression7717); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal194_tree = (Object)adaptor.create(string_literal194);
            	    adaptor.addChild(root_0, string_literal194_tree);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7721);
            	    exx=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element = new ConditionalAndExpression(retval.element, exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // JavaP.g:1426:1: inclusiveOrExpression returns [Expression element] : ex= exclusiveOrExpression ( '|' exx= exclusiveOrExpression )* ;
    public final Java_JavaP.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        Java_JavaP.inclusiveOrExpression_return retval = new Java_JavaP.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal195=null;
        Java_JavaP.exclusiveOrExpression_return ex = null;

        Java_JavaP.exclusiveOrExpression_return exx = null;


        Object char_literal195_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // JavaP.g:1427:5: (ex= exclusiveOrExpression ( '|' exx= exclusiveOrExpression )* )
            // JavaP.g:1427:9: ex= exclusiveOrExpression ( '|' exx= exclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7759);
            ex=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1427:65: ( '|' exx= exclusiveOrExpression )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==100) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // JavaP.g:1427:67: '|' exx= exclusiveOrExpression
            	    {
            	    char_literal195=(Token)match(input,100,FOLLOW_100_in_inclusiveOrExpression7765); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal195_tree = (Object)adaptor.create(char_literal195);
            	    adaptor.addChild(root_0, char_literal195_tree);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7769);
            	    exx=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = new InfixOperatorInvocation("|", retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // JavaP.g:1435:1: exclusiveOrExpression returns [Expression element] : ex= andExpression ( '^' exx= andExpression )* ;
    public final Java_JavaP.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        Java_JavaP.exclusiveOrExpression_return retval = new Java_JavaP.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal196=null;
        Java_JavaP.andExpression_return ex = null;

        Java_JavaP.andExpression_return exx = null;


        Object char_literal196_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // JavaP.g:1436:5: (ex= andExpression ( '^' exx= andExpression )* )
            // JavaP.g:1436:9: ex= andExpression ( '^' exx= andExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression7807);
            ex=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1436:57: ( '^' exx= andExpression )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==101) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // JavaP.g:1436:59: '^' exx= andExpression
            	    {
            	    char_literal196=(Token)match(input,101,FOLLOW_101_in_exclusiveOrExpression7813); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal196_tree = (Object)adaptor.create(char_literal196);
            	    adaptor.addChild(root_0, char_literal196_tree);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression7817);
            	    exx=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = new InfixOperatorInvocation("^", retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // JavaP.g:1444:1: andExpression returns [Expression element] : ex= equalityExpression ( '&' exx= equalityExpression )* ;
    public final Java_JavaP.andExpression_return andExpression() throws RecognitionException {
        Java_JavaP.andExpression_return retval = new Java_JavaP.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal197=null;
        Java_JavaP.equalityExpression_return ex = null;

        Java_JavaP.equalityExpression_return exx = null;


        Object char_literal197_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // JavaP.g:1445:5: (ex= equalityExpression ( '&' exx= equalityExpression )* )
            // JavaP.g:1445:9: ex= equalityExpression ( '&' exx= equalityExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression7851);
            ex=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1445:62: ( '&' exx= equalityExpression )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==43) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // JavaP.g:1445:64: '&' exx= equalityExpression
            	    {
            	    char_literal197=(Token)match(input,43,FOLLOW_43_in_andExpression7857); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal197_tree = (Object)adaptor.create(char_literal197);
            	    adaptor.addChild(root_0, char_literal197_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression7861);
            	    exx=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = new InfixOperatorInvocation("&", retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // JavaP.g:1453:1: equalityExpression returns [Expression element] : ex= instanceOfExpression ( ( '==' | '!=' ) exx= instanceOfExpression )* ;
    public final Java_JavaP.equalityExpression_return equalityExpression() throws RecognitionException {
        Java_JavaP.equalityExpression_return retval = new Java_JavaP.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal198=null;
        Token string_literal199=null;
        Java_JavaP.instanceOfExpression_return ex = null;

        Java_JavaP.instanceOfExpression_return exx = null;


        Object string_literal198_tree=null;
        Object string_literal199_tree=null;

        String op=null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // JavaP.g:1455:5: (ex= instanceOfExpression ( ( '==' | '!=' ) exx= instanceOfExpression )* )
            // JavaP.g:1455:9: ex= instanceOfExpression ( ( '==' | '!=' ) exx= instanceOfExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7899);
            ex=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1456:11: ( ( '==' | '!=' ) exx= instanceOfExpression )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( ((LA139_0>=102 && LA139_0<=103)) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // JavaP.g:1456:13: ( '==' | '!=' ) exx= instanceOfExpression
            	    {
            	    // JavaP.g:1456:13: ( '==' | '!=' )
            	    int alt138=2;
            	    int LA138_0 = input.LA(1);

            	    if ( (LA138_0==102) ) {
            	        alt138=1;
            	    }
            	    else if ( (LA138_0==103) ) {
            	        alt138=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 138, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt138) {
            	        case 1 :
            	            // JavaP.g:1456:14: '=='
            	            {
            	            string_literal198=(Token)match(input,102,FOLLOW_102_in_equalityExpression7918); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal198_tree = (Object)adaptor.create(string_literal198);
            	            adaptor.addChild(root_0, string_literal198_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="==";
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // JavaP.g:1456:32: '!='
            	            {
            	            string_literal199=(Token)match(input,103,FOLLOW_103_in_equalityExpression7924); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal199_tree = (Object)adaptor.create(string_literal199);
            	            adaptor.addChild(root_0, string_literal199_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="!=";
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7931);
            	    exx=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = new InfixOperatorInvocation(op, retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // JavaP.g:1464:1: instanceOfExpression returns [Expression element] : ex= relationalExpression ( 'instanceof' tref= type )? ;
    public final Java_JavaP.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        Java_JavaP.instanceOfExpression_return retval = new Java_JavaP.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal200=null;
        Java_JavaP.relationalExpression_return ex = null;

        Java_JavaP.type_return tref = null;


        Object string_literal200_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // JavaP.g:1466:5: (ex= relationalExpression ( 'instanceof' tref= type )? )
            // JavaP.g:1466:9: ex= relationalExpression ( 'instanceof' tref= type )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression7974);
            ex=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {

                          //if(ex.element == null) {throw new Error("retval is null");} 
                          retval.element = ex.element;
            }
            // JavaP.g:1469:8: ( 'instanceof' tref= type )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==104) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // JavaP.g:1469:9: 'instanceof' tref= type
                    {
                    string_literal200=(Token)match(input,104,FOLLOW_104_in_instanceOfExpression7987); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal200_tree = (Object)adaptor.create(string_literal200);
                    adaptor.addChild(root_0, string_literal200_tree);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression7991);
                    tref=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new InstanceofExpression(ex.element, tref.element);
                               setLocation(retval.element,ex.start,tref.stop);
                             
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // JavaP.g:1475:1: relationalExpression returns [Expression element] : ex= shiftExpression (op= relationalOp exx= shiftExpression )* ;
    public final Java_JavaP.relationalExpression_return relationalExpression() throws RecognitionException {
        Java_JavaP.relationalExpression_return retval = new Java_JavaP.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.shiftExpression_return ex = null;

        Java_JavaP.relationalOp_return op = null;

        Java_JavaP.shiftExpression_return exx = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // JavaP.g:1476:5: (ex= shiftExpression (op= relationalOp exx= shiftExpression )* )
            // JavaP.g:1476:9: ex= shiftExpression (op= relationalOp exx= shiftExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression8028);
            ex=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {

                            //if(ex.element == null) {throw new Error("retval is null");}
                            retval.element = ex.element;
            }
            // JavaP.g:1478:45: (op= relationalOp exx= shiftExpression )*
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);

                if ( (LA141_0==40) ) {
                    int LA141_2 = input.LA(2);

                    if ( ((LA141_2>=HexLiteral && LA141_2<=OctalLiteral)||LA141_2==FloatingPointLiteral||(LA141_2>=CharacterLiteral && LA141_2<=StringLiteral)||LA141_2==Identifier||LA141_2==47||LA141_2==51||(LA141_2>=56 && LA141_2<=63)||(LA141_2>=65 && LA141_2<=66)||(LA141_2>=69 && LA141_2<=72)||(LA141_2>=105 && LA141_2<=106)||(LA141_2>=109 && LA141_2<=113)) ) {
                        alt141=1;
                    }


                }
                else if ( (LA141_0==42) ) {
                    int LA141_3 = input.LA(2);

                    if ( ((LA141_3>=HexLiteral && LA141_3<=OctalLiteral)||LA141_3==FloatingPointLiteral||(LA141_3>=CharacterLiteral && LA141_3<=StringLiteral)||LA141_3==Identifier||LA141_3==47||LA141_3==51||(LA141_3>=56 && LA141_3<=63)||(LA141_3>=65 && LA141_3<=66)||(LA141_3>=69 && LA141_3<=72)||(LA141_3>=105 && LA141_3<=106)||(LA141_3>=109 && LA141_3<=113)) ) {
                        alt141=1;
                    }


                }


                switch (alt141) {
            	case 1 :
            	    // JavaP.g:1478:47: op= relationalOp exx= shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression8036);
            	    op=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression8040);
            	    exx=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = new InfixOperatorInvocation((op!=null?input.toString(op.start,op.stop):null), retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // JavaP.g:1487:1: relationalOp : ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' );
    public final Java_JavaP.relationalOp_return relationalOp() throws RecognitionException {
        Java_JavaP.relationalOp_return retval = new Java_JavaP.relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        Object root_0 = null;

        Token t1=null;
        Token t2=null;
        Token char_literal201=null;
        Token char_literal202=null;

        Object t1_tree=null;
        Object t2_tree=null;
        Object char_literal201_tree=null;
        Object char_literal202_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // JavaP.g:1488:5: ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' )
            int alt142=4;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==40) ) {
                int LA142_1 = input.LA(2);

                if ( (LA142_1==51) && (synpred203_JavaP())) {
                    alt142=1;
                }
                else if ( ((LA142_1>=HexLiteral && LA142_1<=OctalLiteral)||LA142_1==FloatingPointLiteral||(LA142_1>=CharacterLiteral && LA142_1<=StringLiteral)||LA142_1==Identifier||LA142_1==47||(LA142_1>=56 && LA142_1<=63)||(LA142_1>=65 && LA142_1<=66)||(LA142_1>=69 && LA142_1<=72)||(LA142_1>=105 && LA142_1<=106)||(LA142_1>=109 && LA142_1<=113)) ) {
                    alt142=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA142_0==42) ) {
                int LA142_2 = input.LA(2);

                if ( (LA142_2==51) && (synpred204_JavaP())) {
                    alt142=2;
                }
                else if ( ((LA142_2>=HexLiteral && LA142_2<=OctalLiteral)||LA142_2==FloatingPointLiteral||(LA142_2>=CharacterLiteral && LA142_2<=StringLiteral)||LA142_2==Identifier||LA142_2==47||(LA142_2>=56 && LA142_2<=63)||(LA142_2>=65 && LA142_2<=66)||(LA142_2>=69 && LA142_2<=72)||(LA142_2>=105 && LA142_2<=106)||(LA142_2>=109 && LA142_2<=113)) ) {
                    alt142=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    // JavaP.g:1488:9: ( '<' '=' )=>t1= '<' t2= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,40,FOLLOW_40_in_relationalOp8090); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,51,FOLLOW_51_in_relationalOp8094); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "relationalOp", " $t1.getLine() == $t2.getLine() && \r\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1491:9: ( '>' '=' )=>t1= '>' t2= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,42,FOLLOW_42_in_relationalOp8124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,51,FOLLOW_51_in_relationalOp8128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "relationalOp", " $t1.getLine() == $t2.getLine() && \r\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1494:9: '<'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal201=(Token)match(input,40,FOLLOW_40_in_relationalOp8149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal201_tree = (Object)adaptor.create(char_literal201);
                    adaptor.addChild(root_0, char_literal201_tree);
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1495:9: '>'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal202=(Token)match(input,42,FOLLOW_42_in_relationalOp8160); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal202_tree = (Object)adaptor.create(char_literal202);
                    adaptor.addChild(root_0, char_literal202_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, relationalOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // JavaP.g:1498:1: shiftExpression returns [Expression element] : ex= additiveExpression (op= shiftOp exx= additiveExpression )* ;
    public final Java_JavaP.shiftExpression_return shiftExpression() throws RecognitionException {
        Java_JavaP.shiftExpression_return retval = new Java_JavaP.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.additiveExpression_return ex = null;

        Java_JavaP.shiftOp_return op = null;

        Java_JavaP.additiveExpression_return exx = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // JavaP.g:1499:5: (ex= additiveExpression (op= shiftOp exx= additiveExpression )* )
            // JavaP.g:1499:9: ex= additiveExpression (op= shiftOp exx= additiveExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression8186);
            ex=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              check_null(ex.element); retval.element = ex.element;
            }
            // JavaP.g:1499:86: (op= shiftOp exx= additiveExpression )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==40) ) {
                    int LA143_1 = input.LA(2);

                    if ( (LA143_1==40) ) {
                        int LA143_4 = input.LA(3);

                        if ( ((LA143_4>=HexLiteral && LA143_4<=OctalLiteral)||LA143_4==FloatingPointLiteral||(LA143_4>=CharacterLiteral && LA143_4<=StringLiteral)||LA143_4==Identifier||LA143_4==47||(LA143_4>=56 && LA143_4<=63)||(LA143_4>=65 && LA143_4<=66)||(LA143_4>=69 && LA143_4<=72)||(LA143_4>=105 && LA143_4<=106)||(LA143_4>=109 && LA143_4<=113)) ) {
                            alt143=1;
                        }


                    }


                }
                else if ( (LA143_0==42) ) {
                    int LA143_2 = input.LA(2);

                    if ( (LA143_2==42) ) {
                        int LA143_5 = input.LA(3);

                        if ( (LA143_5==42) ) {
                            int LA143_7 = input.LA(4);

                            if ( ((LA143_7>=HexLiteral && LA143_7<=OctalLiteral)||LA143_7==FloatingPointLiteral||(LA143_7>=CharacterLiteral && LA143_7<=StringLiteral)||LA143_7==Identifier||LA143_7==47||(LA143_7>=56 && LA143_7<=63)||(LA143_7>=65 && LA143_7<=66)||(LA143_7>=69 && LA143_7<=72)||(LA143_7>=105 && LA143_7<=106)||(LA143_7>=109 && LA143_7<=113)) ) {
                                alt143=1;
                            }


                        }
                        else if ( ((LA143_5>=HexLiteral && LA143_5<=OctalLiteral)||LA143_5==FloatingPointLiteral||(LA143_5>=CharacterLiteral && LA143_5<=StringLiteral)||LA143_5==Identifier||LA143_5==47||(LA143_5>=56 && LA143_5<=63)||(LA143_5>=65 && LA143_5<=66)||(LA143_5>=69 && LA143_5<=72)||(LA143_5>=105 && LA143_5<=106)||(LA143_5>=109 && LA143_5<=113)) ) {
                            alt143=1;
                        }


                    }


                }


                switch (alt143) {
            	case 1 :
            	    // JavaP.g:1499:88: op= shiftOp exx= additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression8194);
            	    op=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression8198);
            	    exx=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = new InfixOperatorInvocation((op!=null?input.toString(op.start,op.stop):null), retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // JavaP.g:1508:1: shiftOp : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);
    public final Java_JavaP.shiftOp_return shiftOp() throws RecognitionException {
        Java_JavaP.shiftOp_return retval = new Java_JavaP.shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        Object root_0 = null;

        Token t1=null;
        Token t2=null;
        Token t3=null;

        Object t1_tree=null;
        Object t2_tree=null;
        Object t3_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // JavaP.g:1509:5: ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?)
            int alt144=3;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // JavaP.g:1509:9: ( '<' '<' )=>t1= '<' t2= '<' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,40,FOLLOW_40_in_shiftOp8240); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,40,FOLLOW_40_in_shiftOp8244); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \r\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1512:9: ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,42,FOLLOW_42_in_shiftOp8276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,42,FOLLOW_42_in_shiftOp8280); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,42,FOLLOW_42_in_shiftOp8284); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() && 
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \r\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\r\n          $t2.getLine() == $t3.getLine() && \r\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1517:9: ( '>' '>' )=>t1= '>' t2= '>' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,42,FOLLOW_42_in_shiftOp8314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,42,FOLLOW_42_in_shiftOp8318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() && 
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() && \r\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, shiftOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // JavaP.g:1523:1: additiveExpression returns [Expression element] : ex= multiplicativeExpression ( ( '+' | '-' ) exx= multiplicativeExpression )* ;
    public final Java_JavaP.additiveExpression_return additiveExpression() throws RecognitionException {
        Java_JavaP.additiveExpression_return retval = new Java_JavaP.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal203=null;
        Token char_literal204=null;
        Java_JavaP.multiplicativeExpression_return ex = null;

        Java_JavaP.multiplicativeExpression_return exx = null;


        Object char_literal203_tree=null;
        Object char_literal204_tree=null;

        String op = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // JavaP.g:1525:5: (ex= multiplicativeExpression ( ( '+' | '-' ) exx= multiplicativeExpression )* )
            // JavaP.g:1525:9: ex= multiplicativeExpression ( ( '+' | '-' ) exx= multiplicativeExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression8358);
            ex=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              check_null(ex.element); retval.element = ex.element;
            }
            // JavaP.g:1525:92: ( ( '+' | '-' ) exx= multiplicativeExpression )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( ((LA146_0>=105 && LA146_0<=106)) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // JavaP.g:1525:94: ( '+' | '-' ) exx= multiplicativeExpression
            	    {
            	    // JavaP.g:1525:94: ( '+' | '-' )
            	    int alt145=2;
            	    int LA145_0 = input.LA(1);

            	    if ( (LA145_0==105) ) {
            	        alt145=1;
            	    }
            	    else if ( (LA145_0==106) ) {
            	        alt145=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 145, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt145) {
            	        case 1 :
            	            // JavaP.g:1525:95: '+'
            	            {
            	            char_literal203=(Token)match(input,105,FOLLOW_105_in_additiveExpression8365); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal203_tree = (Object)adaptor.create(char_literal203);
            	            adaptor.addChild(root_0, char_literal203_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="+";
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // JavaP.g:1525:111: '-'
            	            {
            	            char_literal204=(Token)match(input,106,FOLLOW_106_in_additiveExpression8371); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal204_tree = (Object)adaptor.create(char_literal204);
            	            adaptor.addChild(root_0, char_literal204_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="-";
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression8378);
            	    exx=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = new InfixOperatorInvocation(op, retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // JavaP.g:1533:1: multiplicativeExpression returns [Expression element] : ex= unaryExpression ( ( '*' | '/' | '%' ) exx= unaryExpression )* ;
    public final Java_JavaP.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        Java_JavaP.multiplicativeExpression_return retval = new Java_JavaP.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal205=null;
        Token char_literal206=null;
        Token char_literal207=null;
        Java_JavaP.unaryExpression_return ex = null;

        Java_JavaP.unaryExpression_return exx = null;


        Object char_literal205_tree=null;
        Object char_literal206_tree=null;
        Object char_literal207_tree=null;

        String op = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // JavaP.g:1535:5: (ex= unaryExpression ( ( '*' | '/' | '%' ) exx= unaryExpression )* )
            // JavaP.g:1535:9: ex= unaryExpression ( ( '*' | '/' | '%' ) exx= unaryExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression8416);
            ex=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              check_null(ex.element); retval.element = ex.element;
            }
            // JavaP.g:1535:83: ( ( '*' | '/' | '%' ) exx= unaryExpression )*
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==30||(LA148_0>=107 && LA148_0<=108)) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // JavaP.g:1535:85: ( '*' | '/' | '%' ) exx= unaryExpression
            	    {
            	    // JavaP.g:1535:85: ( '*' | '/' | '%' )
            	    int alt147=3;
            	    switch ( input.LA(1) ) {
            	    case 30:
            	        {
            	        alt147=1;
            	        }
            	        break;
            	    case 107:
            	        {
            	        alt147=2;
            	        }
            	        break;
            	    case 108:
            	        {
            	        alt147=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 147, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt147) {
            	        case 1 :
            	            // JavaP.g:1535:87: '*'
            	            {
            	            char_literal205=(Token)match(input,30,FOLLOW_30_in_multiplicativeExpression8424); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal205_tree = (Object)adaptor.create(char_literal205);
            	            adaptor.addChild(root_0, char_literal205_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="*";
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // JavaP.g:1535:103: '/'
            	            {
            	            char_literal206=(Token)match(input,107,FOLLOW_107_in_multiplicativeExpression8430); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal206_tree = (Object)adaptor.create(char_literal206);
            	            adaptor.addChild(root_0, char_literal206_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="/";
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // JavaP.g:1535:119: '%'
            	            {
            	            char_literal207=(Token)match(input,108,FOLLOW_108_in_multiplicativeExpression8436); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal207_tree = (Object)adaptor.create(char_literal207);
            	            adaptor.addChild(root_0, char_literal207_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="%";
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression8443);
            	    exx=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = new InfixOperatorInvocation(op, retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // JavaP.g:1543:1: unaryExpression returns [Expression element] : ( '+' ex= unaryExpression | '-' exx= unaryExpression | '++' exxx= unaryExpression | '--' exxxx= unaryExpression | eks= unaryExpressionNotPlusMinus );
    public final Java_JavaP.unaryExpression_return unaryExpression() throws RecognitionException {
        Java_JavaP.unaryExpression_return retval = new Java_JavaP.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal208=null;
        Token char_literal209=null;
        Token string_literal210=null;
        Token string_literal211=null;
        Java_JavaP.unaryExpression_return ex = null;

        Java_JavaP.unaryExpression_return exx = null;

        Java_JavaP.unaryExpression_return exxx = null;

        Java_JavaP.unaryExpression_return exxxx = null;

        Java_JavaP.unaryExpressionNotPlusMinus_return eks = null;


        Object char_literal208_tree=null;
        Object char_literal209_tree=null;
        Object string_literal210_tree=null;
        Object string_literal211_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // JavaP.g:1544:5: ( '+' ex= unaryExpression | '-' exx= unaryExpression | '++' exxx= unaryExpression | '--' exxxx= unaryExpression | eks= unaryExpressionNotPlusMinus )
            int alt149=5;
            switch ( input.LA(1) ) {
            case 105:
                {
                alt149=1;
                }
                break;
            case 106:
                {
                alt149=2;
                }
                break;
            case 109:
                {
                alt149=3;
                }
                break;
            case 110:
                {
                alt149=4;
                }
                break;
            case HexLiteral:
            case DecimalLiteral:
            case OctalLiteral:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case Identifier:
            case 47:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 65:
            case 66:
            case 69:
            case 70:
            case 71:
            case 72:
            case 111:
            case 112:
            case 113:
                {
                alt149=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // JavaP.g:1544:9: '+' ex= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal208=(Token)match(input,105,FOLLOW_105_in_unaryExpression8479); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal208_tree = (Object)adaptor.create(char_literal208);
                    adaptor.addChild(root_0, char_literal208_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8483);
                    ex=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new PrefixOperatorInvocation("+",ex.element);
                      	setLocation(retval.element,retval.start,ex.stop);
                          
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1547:9: '-' exx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal209=(Token)match(input,106,FOLLOW_106_in_unaryExpression8495); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal209_tree = (Object)adaptor.create(char_literal209);
                    adaptor.addChild(root_0, char_literal209_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8499);
                    exx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new PrefixOperatorInvocation("-",exx.element);
                      	setLocation(retval.element,retval.start,exx.stop);
                          
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1550:9: '++' exxx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal210=(Token)match(input,109,FOLLOW_109_in_unaryExpression8511); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal210_tree = (Object)adaptor.create(string_literal210);
                    adaptor.addChild(root_0, string_literal210_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8515);
                    exxx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exxx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new PrefixOperatorInvocation("++",exxx.element);
                      	setLocation(retval.element,retval.start,exxx.stop);
                          
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1553:9: '--' exxxx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal211=(Token)match(input,110,FOLLOW_110_in_unaryExpression8527); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal211_tree = (Object)adaptor.create(string_literal211);
                    adaptor.addChild(root_0, string_literal211_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8531);
                    exxxx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exxxx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new PrefixOperatorInvocation("--",exxxx.element);
                      	setLocation(retval.element,retval.start,exxxx.stop);
                          
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1556:9: eks= unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression8545);
                    eks=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eks.getTree());
                    if ( state.backtracking==0 ) {
                      check_null(eks.element); retval.element = eks.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // JavaP.g:1559:1: unaryExpressionNotPlusMinus returns [Expression element] : (a= '~' ex= unaryExpression | b= '!' exx= unaryExpression | castex= castExpression | prim= primary (sel= selector )* (c= '++' | d= '--' )? );
    public final Java_JavaP.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.unaryExpressionNotPlusMinus_return retval = new Java_JavaP.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token a=null;
        Token b=null;
        Token c=null;
        Token d=null;
        Java_JavaP.unaryExpression_return ex = null;

        Java_JavaP.unaryExpression_return exx = null;

        Java_JavaP.castExpression_return castex = null;

        Java_JavaP.primary_return prim = null;

        Java_JavaP.selector_return sel = null;


        Object a_tree=null;
        Object b_tree=null;
        Object c_tree=null;
        Object d_tree=null;


        Token start=null;
        Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // JavaP.g:1565:5: (a= '~' ex= unaryExpression | b= '!' exx= unaryExpression | castex= castExpression | prim= primary (sel= selector )* (c= '++' | d= '--' )? )
            int alt152=4;
            alt152 = dfa152.predict(input);
            switch (alt152) {
                case 1 :
                    // JavaP.g:1565:9: a= '~' ex= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    a=(Token)match(input,111,FOLLOW_111_in_unaryExpressionNotPlusMinus8582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    a_tree = (Object)adaptor.create(a);
                    adaptor.addChild(root_0, a_tree);
                    }
                    if ( state.backtracking==0 ) {
                      start=a;
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8588);
                    ex=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new PrefixOperatorInvocation("~",ex.element); 
                               stop=ex.stop;
                               setLocation(retval.element,start,stop);
                              
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1570:9: b= '!' exx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    b=(Token)match(input,112,FOLLOW_112_in_unaryExpressionNotPlusMinus8611); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    b_tree = (Object)adaptor.create(b);
                    adaptor.addChild(root_0, b_tree);
                    }
                    if ( state.backtracking==0 ) {
                      start=b;
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8617);
                    exx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new PrefixOperatorInvocation("!",exx.element); 
                               stop=exx.stop;
                               setLocation(retval.element,start,stop);
                              
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1575:9: castex= castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus8640);
                    castex=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castex.getTree());
                    if ( state.backtracking==0 ) {
                      check_null(castex.element); retval.element = castex.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1576:9: prim= primary (sel= selector )* (c= '++' | d= '--' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus8654);
                    prim=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prim.getTree());
                    if ( state.backtracking==0 ) {
                      check_null((prim!=null?prim.element:null));  
                                  ((TargetScope_scope)TargetScope_stack.peek()).target =(prim!=null?prim.element:null); 
                                  retval.element=(prim!=null?prim.element:null);
                                  start=prim.start;
                                  ((TargetScope_scope)TargetScope_stack.peek()).start = start;
                                 
                    }
                    // JavaP.g:1583:9: (sel= selector )*
                    loop150:
                    do {
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==29||LA150_0==48) ) {
                            alt150=1;
                        }


                        switch (alt150) {
                    	case 1 :
                    	    // JavaP.g:1583:10: sel= selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus8680);
                    	    sel=selector();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sel.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      check_null(sel.element); 
                    	                  ((TargetScope_scope)TargetScope_stack.peek()).target =(sel!=null?sel.element:null); 
                    	                  retval.element = (sel!=null?sel.element:null); 
                    	                  stop=sel.stop;
                    	                  setLocation(retval.element,start,stop);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop150;
                        }
                    } while (true);

                    // JavaP.g:1590:9: (c= '++' | d= '--' )?
                    int alt151=3;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==109) ) {
                        alt151=1;
                    }
                    else if ( (LA151_0==110) ) {
                        alt151=2;
                    }
                    switch (alt151) {
                        case 1 :
                            // JavaP.g:1591:12: c= '++'
                            {
                            c=(Token)match(input,109,FOLLOW_109_in_unaryExpressionNotPlusMinus8730); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            c_tree = (Object)adaptor.create(c);
                            adaptor.addChild(root_0, c_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.element = new PostfixOperatorInvocation("++", retval.element); 
                              		   stop=c;
                              		   setLocation(retval.element,start,stop);
                            }

                            }
                            break;
                        case 2 :
                            // JavaP.g:1594:12: d= '--'
                            {
                            d=(Token)match(input,110,FOLLOW_110_in_unaryExpressionNotPlusMinus8747); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            d_tree = (Object)adaptor.create(d);
                            adaptor.addChild(root_0, d_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.element = new PostfixOperatorInvocation("--", retval.element); 
                                        	   stop=d;
                                        	   setLocation(retval.element,start,stop);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, unaryExpressionNotPlusMinus_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class selector_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // JavaP.g:1603:1: selector returns [Expression element] : ( '.' name= identifierRule (args= arguments )? | '.' thiskw= 'this' | '.' spkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator | '[' arrex= expression bracket= ']' );
    public final Java_JavaP.selector_return selector() throws RecognitionException {
        Java_JavaP.selector_return retval = new Java_JavaP.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token thiskw=null;
        Token spkw=null;
        Token newkw=null;
        Token bracket=null;
        Token char_literal212=null;
        Token char_literal213=null;
        Token char_literal214=null;
        Token char_literal215=null;
        Token char_literal216=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.innerCreator_return in = null;

        Java_JavaP.expression_return arrex = null;


        Object thiskw_tree=null;
        Object spkw_tree=null;
        Object newkw_tree=null;
        Object bracket_tree=null;
        Object char_literal212_tree=null;
        Object char_literal213_tree=null;
        Object char_literal214_tree=null;
        Object char_literal215_tree=null;
        Object char_literal216_tree=null;


        Token start=((TargetScope_scope)TargetScope_stack.peek()).start;
        Token stop=null;
        InvocationTarget old = ((TargetScope_scope)TargetScope_stack.peek()).target;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // JavaP.g:1609:2: ( '.' name= identifierRule (args= arguments )? | '.' thiskw= 'this' | '.' spkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator | '[' arrex= expression bracket= ']' )
            int alt154=5;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==29) ) {
                switch ( input.LA(2) ) {
                case 69:
                    {
                    alt154=2;
                    }
                    break;
                case 65:
                    {
                    alt154=3;
                    }
                    break;
                case 113:
                    {
                    alt154=4;
                    }
                    break;
                case Identifier:
                    {
                    alt154=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 154, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA154_0==48) ) {
                alt154=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // JavaP.g:1610:2: '.' name= identifierRule (args= arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal212=(Token)match(input,29,FOLLOW_29_in_selector8787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal212_tree = (Object)adaptor.create(char_literal212);
                    adaptor.addChild(root_0, char_literal212_tree);
                    }
                    pushFollow(FOLLOW_identifierRule_in_selector8791);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    if ( state.backtracking==0 ) {

                      	         retval.element = new NamedTargetExpression((name!=null?input.toString(name.start,name.stop):null),cloneTarget(((TargetScope_scope)TargetScope_stack.peek()).target));
                      	         stop=name.start;
                      	        
                    }
                    // JavaP.g:1615:6: (args= arguments )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==66) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // JavaP.g:1615:7: args= arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector8814);
                            args=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                            if ( state.backtracking==0 ) {
                              retval.element = invocation((name!=null?input.toString(name.start,name.stop):null), ((TargetScope_scope)TargetScope_stack.peek()).target);
                              	         ((RegularMethodInvocation)retval.element).addAllArguments(args.element);
                              	         stop=args.stop;
                              	        
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      setLocation(retval.element,start,stop);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1621:9: '.' thiskw= 'this'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal213=(Token)match(input,29,FOLLOW_29_in_selector8849); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal213_tree = (Object)adaptor.create(char_literal213);
                    adaptor.addChild(root_0, char_literal213_tree);
                    }
                    thiskw=(Token)match(input,69,FOLLOW_69_in_selector8853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thiskw_tree = (Object)adaptor.create(thiskw);
                    adaptor.addChild(root_0, thiskw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ThisLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));setLocation(retval.element,start,spkw);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1622:9: '.' spkw= 'super' supsuf= superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal214=(Token)match(input,29,FOLLOW_29_in_selector8865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal214_tree = (Object)adaptor.create(char_literal214);
                    adaptor.addChild(root_0, char_literal214_tree);
                    }
                    spkw=(Token)match(input,65,FOLLOW_65_in_selector8869); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    spkw_tree = (Object)adaptor.create(spkw);
                    adaptor.addChild(root_0, spkw_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_selector8886);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {

                                    check_null(supsuf.element); 
                                    retval.element = supsuf.element;
                                    InvocationTarget tar = new SuperTarget(old);
                                    ((TargetedExpression)retval.element).setTarget(tar);
                                    setKeyword(tar,spkw);
                                    setLocation(old,start,spkw);
                                  
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1632:9: '.' newkw= 'new' in= innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal215=(Token)match(input,29,FOLLOW_29_in_selector8911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal215_tree = (Object)adaptor.create(char_literal215);
                    adaptor.addChild(root_0, char_literal215_tree);
                    }
                    newkw=(Token)match(input,113,FOLLOW_113_in_selector8915); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    newkw_tree = (Object)adaptor.create(newkw);
                    adaptor.addChild(root_0, newkw_tree);
                    }
                    pushFollow(FOLLOW_innerCreator_in_selector8919);
                    in=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());
                    if ( state.backtracking==0 ) {
                      check_null(in.element); 
                                                               retval.element = in.element;
                                                               setKeyword(retval.element,newkw);
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1635:9: '[' arrex= expression bracket= ']'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal216=(Token)match(input,48,FOLLOW_48_in_selector8931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal216_tree = (Object)adaptor.create(char_literal216);
                    adaptor.addChild(root_0, char_literal216_tree);
                    }
                    pushFollow(FOLLOW_expression_in_selector8935);
                    arrex=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrex.getTree());
                    bracket=(Token)match(input,49,FOLLOW_49_in_selector8939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    bracket_tree = (Object)adaptor.create(bracket);
                    adaptor.addChild(root_0, bracket_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayAccessExpression((Expression)((TargetScope_scope)TargetScope_stack.peek()).target);
                                 ((ArrayAccessExpression)retval.element).addIndex(new FilledArrayIndex(arrex.element));
                                 setLocation(retval.element, start, bracket);
                                
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class castExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // JavaP.g:1642:1: castExpression returns [Expression element] : ( '(' tref= primitiveType ')' unex= unaryExpression | '(' treff= type ')' unexx= unaryExpressionNotPlusMinus );
    public final Java_JavaP.castExpression_return castExpression() throws RecognitionException {
        Java_JavaP.castExpression_return retval = new Java_JavaP.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal217=null;
        Token char_literal218=null;
        Token char_literal219=null;
        Token char_literal220=null;
        Java_JavaP.primitiveType_return tref = null;

        Java_JavaP.unaryExpression_return unex = null;

        Java_JavaP.type_return treff = null;

        Java_JavaP.unaryExpressionNotPlusMinus_return unexx = null;


        Object char_literal217_tree=null;
        Object char_literal218_tree=null;
        Object char_literal219_tree=null;
        Object char_literal220_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // JavaP.g:1644:5: ( '(' tref= primitiveType ')' unex= unaryExpression | '(' treff= type ')' unexx= unaryExpressionNotPlusMinus )
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==66) ) {
                int LA155_1 = input.LA(2);

                if ( (synpred230_JavaP()) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    // JavaP.g:1644:8: '(' tref= primitiveType ')' unex= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal217=(Token)match(input,66,FOLLOW_66_in_castExpression8982); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal217_tree = (Object)adaptor.create(char_literal217);
                    adaptor.addChild(root_0, char_literal217_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression8986);
                    tref=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
                    char_literal218=(Token)match(input,67,FOLLOW_67_in_castExpression8988); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal218_tree = (Object)adaptor.create(char_literal218);
                    adaptor.addChild(root_0, char_literal218_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression8992);
                    unex=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassCastExpression(tref.element,unex.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1645:8: '(' treff= type ')' unexx= unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal219=(Token)match(input,66,FOLLOW_66_in_castExpression9003); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal219_tree = (Object)adaptor.create(char_literal219);
                    adaptor.addChild(root_0, char_literal219_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression9007);
                    treff=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, treff.getTree());
                    char_literal220=(Token)match(input,67,FOLLOW_67_in_castExpression9009); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal220_tree = (Object)adaptor.create(char_literal220);
                    adaptor.addChild(root_0, char_literal220_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression9013);
                    unexx=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unexx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassCastExpression(treff.element,unexx.element);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element,retval.start,retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primary_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // JavaP.g:1648:1: primary returns [Expression element] : (parex= parExpression | rubex= identifierSuffixRubbush | skw= 'super' supsuf= superSuffix | nt= nonTargetPrimary | nkw= 'new' cr= creator | morerubex= moreidentifierRuleSuffixRubbish | vt= voidType '.' clkw= 'class' | tref= type '.' clkww= 'class' );
    public final Java_JavaP.primary_return primary() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.primary_return retval = new Java_JavaP.primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Object root_0 = null;

        Token skw=null;
        Token nkw=null;
        Token clkw=null;
        Token clkww=null;
        Token char_literal221=null;
        Token char_literal222=null;
        Java_JavaP.parExpression_return parex = null;

        Java_JavaP.identifierSuffixRubbush_return rubex = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.nonTargetPrimary_return nt = null;

        Java_JavaP.creator_return cr = null;

        Java_JavaP.moreidentifierRuleSuffixRubbish_return morerubex = null;

        Java_JavaP.voidType_return vt = null;

        Java_JavaP.type_return tref = null;


        Object skw_tree=null;
        Object nkw_tree=null;
        Object clkw_tree=null;
        Object clkww_tree=null;
        Object char_literal221_tree=null;
        Object char_literal222_tree=null;


        Token start=null;
        Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // JavaP.g:1654:5: (parex= parExpression | rubex= identifierSuffixRubbush | skw= 'super' supsuf= superSuffix | nt= nonTargetPrimary | nkw= 'new' cr= creator | morerubex= moreidentifierRuleSuffixRubbish | vt= voidType '.' clkw= 'class' | tref= type '.' clkww= 'class' )
            int alt156=8;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // JavaP.g:1654:9: parex= parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary9049);
                    parex=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = parex.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1655:9: rubex= identifierSuffixRubbush
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierSuffixRubbush_in_primary9063);
                    rubex=identifierSuffixRubbush();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rubex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = rubex.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1656:10: skw= 'super' supsuf= superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    skw=(Token)match(input,65,FOLLOW_65_in_primary9078); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    skw_tree = (Object)adaptor.create(skw);
                    adaptor.addChild(root_0, skw_tree);
                    }
                    if ( state.backtracking==0 ) {
                       
                                           start=skw; stop=skw; 
                                           ((TargetScope_scope)TargetScope_stack.peek()).start =skw;
                                           
                    }
                    pushFollow(FOLLOW_superSuffix_in_primary9093);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {
                      InvocationTarget tar = new SuperTarget();
                               setKeyword(tar,skw);
                               retval.element = supsuf.element;
                               ((TargetedExpression)retval.element).setTarget(tar); 
                              setLocation(tar,start,stop); // put locations on the SuperTarget.
                              
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1667:9: nt= nonTargetPrimary
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonTargetPrimary_in_primary9116);
                    nt=nonTargetPrimary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nt.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=nt.element;
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1668:9: nkw= 'new' cr= creator
                    {
                    root_0 = (Object)adaptor.nil();

                    nkw=(Token)match(input,113,FOLLOW_113_in_primary9130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    nkw_tree = (Object)adaptor.create(nkw);
                    adaptor.addChild(root_0, nkw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      start=nkw;
                    }
                    pushFollow(FOLLOW_creator_in_primary9136);
                    cr=creator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cr.element;setKeyword(retval.element,nkw);
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1669:9: morerubex= moreidentifierRuleSuffixRubbish
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moreidentifierRuleSuffixRubbish_in_primary9150);
                    morerubex=moreidentifierRuleSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, morerubex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = morerubex.element;
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1670:9: vt= voidType '.' clkw= 'class'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_voidType_in_primary9164);
                    vt=voidType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vt.getTree());
                    char_literal221=(Token)match(input,29,FOLLOW_29_in_primary9166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal221_tree = (Object)adaptor.create(char_literal221);
                    adaptor.addChild(root_0, char_literal221_tree);
                    }
                    clkw=(Token)match(input,37,FOLLOW_37_in_primary9170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    clkw_tree = (Object)adaptor.create(clkw);
                    adaptor.addChild(root_0, clkw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassLiteral(vt.element); start=vt.start;stop=clkw; setLocation(retval.element,start,stop);
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:1671:9: tref= type '.' clkww= 'class'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_primary9184);
                    tref=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
                    char_literal222=(Token)match(input,29,FOLLOW_29_in_primary9186); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal222_tree = (Object)adaptor.create(char_literal222);
                    adaptor.addChild(root_0, char_literal222_tree);
                    }
                    clkww=(Token)match(input,37,FOLLOW_37_in_primary9190); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    clkww_tree = (Object)adaptor.create(clkww);
                    adaptor.addChild(root_0, clkww_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassLiteral(tref.element);start=tref.start;stop=clkww; setLocation(retval.element,start,stop);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, primary_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class nonTargetPrimary_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonTargetPrimary"
    // JavaP.g:1674:1: nonTargetPrimary returns [Expression element] : lit= literal ;
    public final Java_JavaP.nonTargetPrimary_return nonTargetPrimary() throws RecognitionException {
        Java_JavaP.nonTargetPrimary_return retval = new Java_JavaP.nonTargetPrimary_return();
        retval.start = input.LT(1);
        int nonTargetPrimary_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.literal_return lit = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // JavaP.g:1675:4: (lit= literal )
            // JavaP.g:1676:6: lit= literal
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_literal_in_nonTargetPrimary9219);
            lit=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lit.getTree());
            if ( state.backtracking==0 ) {
              retval.element = lit.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, nonTargetPrimary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonTargetPrimary"

    public static class moreidentifierRuleSuffixRubbish_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moreidentifierRuleSuffixRubbish"
    // JavaP.g:1679:1: moreidentifierRuleSuffixRubbish returns [Expression element] : id= identifierRule ( '.' idx= identifierRule )* ( ( '[' ']' )+ '.' 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? ;
    public final Java_JavaP.moreidentifierRuleSuffixRubbish_return moreidentifierRuleSuffixRubbish() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.moreidentifierRuleSuffixRubbish_return retval = new Java_JavaP.moreidentifierRuleSuffixRubbish_return();
        retval.start = input.LT(1);
        int moreidentifierRuleSuffixRubbish_StartIndex = input.index();
        Object root_0 = null;

        Token clkw=null;
        Token thiskw=null;
        Token supkw=null;
        Token newkw=null;
        Token char_literal223=null;
        Token char_literal224=null;
        Token char_literal225=null;
        Token char_literal226=null;
        Token string_literal227=null;
        Token char_literal228=null;
        Token char_literal229=null;
        Token char_literal230=null;
        Token char_literal231=null;
        Token char_literal232=null;
        Java_JavaP.identifierRule_return id = null;

        Java_JavaP.identifierRule_return idx = null;

        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;

        Java_JavaP.argumentsSuffixRubbish_return arg = null;

        Java_JavaP.explicitGenericInvocation_return gen = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.innerCreator_return in = null;


        Object clkw_tree=null;
        Object thiskw_tree=null;
        Object supkw_tree=null;
        Object newkw_tree=null;
        Object char_literal223_tree=null;
        Object char_literal224_tree=null;
        Object char_literal225_tree=null;
        Object char_literal226_tree=null;
        Object string_literal227_tree=null;
        Object char_literal228_tree=null;
        Object char_literal229_tree=null;
        Object char_literal230_tree=null;
        Object char_literal231_tree=null;
        Object char_literal232_tree=null;


        Token stop = null;
        InvocationTarget scopeTarget = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // JavaP.g:1690:2: (id= identifierRule ( '.' idx= identifierRule )* ( ( '[' ']' )+ '.' 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? )
            // JavaP.g:1690:4: id= identifierRule ( '.' idx= identifierRule )* ( ( '[' ']' )+ '.' 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish9254);
            id=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              ((TargetScope_scope)TargetScope_stack.peek()).target = new NamedTarget((id!=null?input.toString(id.start,id.stop):null));
              	            scopeTarget = ((TargetScope_scope)TargetScope_stack.peek()).target;  
              	            ((TargetScope_scope)TargetScope_stack.peek()).start =id.start; 
              	            stop=id.start;
              	            setLocation(((TargetScope_scope)TargetScope_stack.peek()).target,((TargetScope_scope)TargetScope_stack.peek()).start,stop);
              	            
            }
            // JavaP.g:1697:4: ( '.' idx= identifierRule )*
            loop157:
            do {
                int alt157=2;
                int LA157_0 = input.LA(1);

                if ( (LA157_0==29) ) {
                    int LA157_2 = input.LA(2);

                    if ( (LA157_2==Identifier) ) {
                        int LA157_3 = input.LA(3);

                        if ( (synpred238_JavaP()) ) {
                            alt157=1;
                        }


                    }


                }


                switch (alt157) {
            	case 1 :
            	    // JavaP.g:1697:5: '.' idx= identifierRule
            	    {
            	    char_literal223=(Token)match(input,29,FOLLOW_29_in_moreidentifierRuleSuffixRubbish9275); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal223_tree = (Object)adaptor.create(char_literal223);
            	    adaptor.addChild(root_0, char_literal223_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish9279);
            	    idx=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, idx.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((TargetScope_scope)TargetScope_stack.peek()).target = new NamedTarget((idx!=null?input.toString(idx.start,idx.stop):null),((TargetScope_scope)TargetScope_stack.peek()).target);
            	      	        scopeTarget = ((TargetScope_scope)TargetScope_stack.peek()).target;
            	      	        stop=idx.start;
            	      	        setLocation(((TargetScope_scope)TargetScope_stack.peek()).target, ((TargetScope_scope)TargetScope_stack.peek()).start, idx.start);
            	      	       
            	    }

            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.element = new NamedTargetExpression(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target).name(),cloneTargetOfTarget(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target)));
              	 setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, stop);
              	 //The variable reference is only returned if none of the following subrules match.
              	
            }
            // JavaP.g:1708:1: ( ( '[' ']' )+ '.' 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            int alt159=9;
            alt159 = dfa159.predict(input);
            switch (alt159) {
                case 1 :
                    // JavaP.g:1708:9: ( '[' ']' )+ '.' 'class'
                    {
                    // JavaP.g:1708:9: ( '[' ']' )+
                    int cnt158=0;
                    loop158:
                    do {
                        int alt158=2;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==48) ) {
                            alt158=1;
                        }


                        switch (alt158) {
                    	case 1 :
                    	    // JavaP.g:1708:10: '[' ']'
                    	    {
                    	    char_literal224=(Token)match(input,48,FOLLOW_48_in_moreidentifierRuleSuffixRubbish9311); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal224_tree = (Object)adaptor.create(char_literal224);
                    	    adaptor.addChild(root_0, char_literal224_tree);
                    	    }
                    	    char_literal225=(Token)match(input,49,FOLLOW_49_in_moreidentifierRuleSuffixRubbish9313); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal225_tree = (Object)adaptor.create(char_literal225);
                    	    adaptor.addChild(root_0, char_literal225_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt158 >= 1 ) break loop158;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(158, input);
                                throw eee;
                        }
                        cnt158++;
                    } while (true);

                    char_literal226=(Token)match(input,29,FOLLOW_29_in_moreidentifierRuleSuffixRubbish9317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal226_tree = (Object)adaptor.create(char_literal226);
                    adaptor.addChild(root_0, char_literal226_tree);
                    }
                    string_literal227=(Token)match(input,37,FOLLOW_37_in_moreidentifierRuleSuffixRubbish9319); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal227_tree = (Object)adaptor.create(string_literal227);
                    adaptor.addChild(root_0, string_literal227_tree);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1710:9: arr= arrayAccessSuffixRubbish
                    {
                    pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_moreidentifierRuleSuffixRubbish9340);
                    arr=arrayAccessSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = arr.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1711:9: arg= argumentsSuffixRubbish
                    {
                    pushFollow(FOLLOW_argumentsSuffixRubbish_in_moreidentifierRuleSuffixRubbish9354);
                    arg=argumentsSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arg.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllTags(); retval.element = arg.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1712:9: '.' clkw= 'class'
                    {
                    char_literal228=(Token)match(input,29,FOLLOW_29_in_moreidentifierRuleSuffixRubbish9367); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal228_tree = (Object)adaptor.create(char_literal228);
                    adaptor.addChild(root_0, char_literal228_tree);
                    }
                    clkw=(Token)match(input,37,FOLLOW_37_in_moreidentifierRuleSuffixRubbish9371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    clkw_tree = (Object)adaptor.create(clkw);
                    adaptor.addChild(root_0, clkw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllTags();
                               retval.element = new ClassLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
                                setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, clkw);
                               
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1717:9: '.' gen= explicitGenericInvocation
                    {
                    char_literal229=(Token)match(input,29,FOLLOW_29_in_moreidentifierRuleSuffixRubbish9393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal229_tree = (Object)adaptor.create(char_literal229);
                    adaptor.addChild(root_0, char_literal229_tree);
                    }
                    pushFollow(FOLLOW_explicitGenericInvocation_in_moreidentifierRuleSuffixRubbish9397);
                    gen=explicitGenericInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllTags(); retval.element = gen.element;
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1718:9: '.' thiskw= 'this'
                    {
                    char_literal230=(Token)match(input,29,FOLLOW_29_in_moreidentifierRuleSuffixRubbish9410); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal230_tree = (Object)adaptor.create(char_literal230);
                    adaptor.addChild(root_0, char_literal230_tree);
                    }
                    thiskw=(Token)match(input,69,FOLLOW_69_in_moreidentifierRuleSuffixRubbish9414); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thiskw_tree = (Object)adaptor.create(thiskw);
                    adaptor.addChild(root_0, thiskw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllTags();
                                retval.element = new ThisLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
                                setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, thiskw);
                              
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1723:9: '.' supkw= 'super' supsuf= superSuffix
                    {
                    char_literal231=(Token)match(input,29,FOLLOW_29_in_moreidentifierRuleSuffixRubbish9435); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal231_tree = (Object)adaptor.create(char_literal231);
                    adaptor.addChild(root_0, char_literal231_tree);
                    }
                    supkw=(Token)match(input,65,FOLLOW_65_in_moreidentifierRuleSuffixRubbish9439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    supkw_tree = (Object)adaptor.create(supkw);
                    adaptor.addChild(root_0, supkw_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_moreidentifierRuleSuffixRubbish9457);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {

                                     retval.element.removeAllTags();
                                     InvocationTarget tar = new SuperTarget(((TargetScope_scope)TargetScope_stack.peek()).target);
                                     setKeyword(tar,supkw); 
                                     setLocation(tar,((TargetScope_scope)TargetScope_stack.peek()).start,supkw);
                                     retval.element = supsuf.element;
                                     ((TargetedExpression)retval.element).setTarget(tar);
                                  
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:1732:9: '.' newkw= 'new' in= innerCreator
                    {
                    char_literal232=(Token)match(input,29,FOLLOW_29_in_moreidentifierRuleSuffixRubbish9469); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal232_tree = (Object)adaptor.create(char_literal232);
                    adaptor.addChild(root_0, char_literal232_tree);
                    }
                    newkw=(Token)match(input,113,FOLLOW_113_in_moreidentifierRuleSuffixRubbish9473); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    newkw_tree = (Object)adaptor.create(newkw);
                    adaptor.addChild(root_0, newkw_tree);
                    }
                    pushFollow(FOLLOW_innerCreator_in_moreidentifierRuleSuffixRubbish9477);
                    in=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = in.element;setKeyword(retval.element,newkw);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              if(! retval.element.descendants().contains(scopeTarget)) {
                scopeTarget.removeAllTags();
              }

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, moreidentifierRuleSuffixRubbish_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "moreidentifierRuleSuffixRubbish"

    public static class identifierSuffixRubbush_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierSuffixRubbush"
    // JavaP.g:1735:1: identifierSuffixRubbush returns [Expression element] : 'this' ( '.' id= identifierRule )* (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? ;
    public final Java_JavaP.identifierSuffixRubbush_return identifierSuffixRubbush() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.identifierSuffixRubbush_return retval = new Java_JavaP.identifierSuffixRubbush_return();
        retval.start = input.LT(1);
        int identifierSuffixRubbush_StartIndex = input.index();
        Object root_0 = null;

        Token supkw=null;
        Token newkw=null;
        Token string_literal233=null;
        Token char_literal234=null;
        Token char_literal235=null;
        Token string_literal236=null;
        Token char_literal237=null;
        Token char_literal238=null;
        Token char_literal239=null;
        Java_JavaP.identifierRule_return id = null;

        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;

        Java_JavaP.argumentsSuffixRubbish_return arg = null;

        Java_JavaP.explicitGenericInvocation_return gen = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.innerCreator_return in = null;


        Object supkw_tree=null;
        Object newkw_tree=null;
        Object string_literal233_tree=null;
        Object char_literal234_tree=null;
        Object char_literal235_tree=null;
        Object string_literal236_tree=null;
        Object char_literal237_tree=null;
        Object char_literal238_tree=null;
        Object char_literal239_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // JavaP.g:1737:2: ( 'this' ( '.' id= identifierRule )* (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? )
            // JavaP.g:1737:4: 'this' ( '.' id= identifierRule )* (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal233=(Token)match(input,69,FOLLOW_69_in_identifierSuffixRubbush9501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal233_tree = (Object)adaptor.create(string_literal233);
            adaptor.addChild(root_0, string_literal233_tree);
            }
            if ( state.backtracking==0 ) {
              ((TargetScope_scope)TargetScope_stack.peek()).target = new ThisLiteral();
            }
            // JavaP.g:1737:54: ( '.' id= identifierRule )*
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==29) ) {
                    int LA160_2 = input.LA(2);

                    if ( (LA160_2==Identifier) ) {
                        int LA160_3 = input.LA(3);

                        if ( (synpred248_JavaP()) ) {
                            alt160=1;
                        }


                    }


                }


                switch (alt160) {
            	case 1 :
            	    // JavaP.g:1737:55: '.' id= identifierRule
            	    {
            	    char_literal234=(Token)match(input,29,FOLLOW_29_in_identifierSuffixRubbush9505); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal234_tree = (Object)adaptor.create(char_literal234);
            	    adaptor.addChild(root_0, char_literal234_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_identifierSuffixRubbush9509);
            	    id=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((TargetScope_scope)TargetScope_stack.peek()).target = new NamedTarget((id!=null?input.toString(id.start,id.stop):null),((TargetScope_scope)TargetScope_stack.peek()).target);
            	    }

            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if(((TargetScope_scope)TargetScope_stack.peek()).target instanceof ThisLiteral) {
              	  retval.element = (ThisLiteral)((TargetScope_scope)TargetScope_stack.peek()).target;
              	 } else {
              	  retval.element = new NamedTargetExpression(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target).name(),cloneTargetOfTarget((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
              	 }
            }
            // JavaP.g:1743:4: (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            int alt161=7;
            alt161 = dfa161.predict(input);
            switch (alt161) {
                case 1 :
                    // JavaP.g:1744:9: arr= arrayAccessSuffixRubbish
                    {
                    pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_identifierSuffixRubbush9534);
                    arr=arrayAccessSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = arr.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1745:9: arg= argumentsSuffixRubbish
                    {
                    pushFollow(FOLLOW_argumentsSuffixRubbish_in_identifierSuffixRubbush9548);
                    arg=argumentsSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arg.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = arg.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1746:9: '.' 'class'
                    {
                    char_literal235=(Token)match(input,29,FOLLOW_29_in_identifierSuffixRubbush9560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal235_tree = (Object)adaptor.create(char_literal235);
                    adaptor.addChild(root_0, char_literal235_tree);
                    }
                    string_literal236=(Token)match(input,37,FOLLOW_37_in_identifierSuffixRubbush9562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal236_tree = (Object)adaptor.create(string_literal236);
                    adaptor.addChild(root_0, string_literal236_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1747:9: '.' gen= explicitGenericInvocation
                    {
                    char_literal237=(Token)match(input,29,FOLLOW_29_in_identifierSuffixRubbush9574); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal237_tree = (Object)adaptor.create(char_literal237);
                    adaptor.addChild(root_0, char_literal237_tree);
                    }
                    pushFollow(FOLLOW_explicitGenericInvocation_in_identifierSuffixRubbush9578);
                    gen=explicitGenericInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = gen.element;
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1748:9: '.' supkw= 'super' supsuf= superSuffix
                    {
                    char_literal238=(Token)match(input,29,FOLLOW_29_in_identifierSuffixRubbush9590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal238_tree = (Object)adaptor.create(char_literal238);
                    adaptor.addChild(root_0, char_literal238_tree);
                    }
                    supkw=(Token)match(input,65,FOLLOW_65_in_identifierSuffixRubbush9594); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    supkw_tree = (Object)adaptor.create(supkw);
                    adaptor.addChild(root_0, supkw_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_identifierSuffixRubbush9598);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {

                                    InvocationTarget tar = new SuperTarget(((TargetScope_scope)TargetScope_stack.peek()).target);
                                    setKeyword(tar,supkw);
                                    setLocation(tar, ((TargetScope_scope)TargetScope_stack.peek()).start,supkw);
                                    retval.element = supsuf.element;
                                     ((TargetedExpression)retval.element).setTarget(tar);
                                   
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1755:9: '.' newkw= 'new' in= innerCreator
                    {
                    char_literal239=(Token)match(input,29,FOLLOW_29_in_identifierSuffixRubbush9610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal239_tree = (Object)adaptor.create(char_literal239);
                    adaptor.addChild(root_0, char_literal239_tree);
                    }
                    newkw=(Token)match(input,113,FOLLOW_113_in_identifierSuffixRubbush9614); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    newkw_tree = (Object)adaptor.create(newkw);
                    adaptor.addChild(root_0, newkw_tree);
                    }
                    pushFollow(FOLLOW_innerCreator_in_identifierSuffixRubbush9618);
                    in=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = in.element;setKeyword(retval.element,newkw);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, identifierSuffixRubbush_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "identifierSuffixRubbush"

    public static class argumentsSuffixRubbish_return extends ParserRuleReturnScope {
        public RegularMethodInvocation element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argumentsSuffixRubbish"
    // JavaP.g:1760:1: argumentsSuffixRubbish returns [RegularMethodInvocation element] : args= arguments ;
    public final Java_JavaP.argumentsSuffixRubbish_return argumentsSuffixRubbish() throws RecognitionException {
        Java_JavaP.argumentsSuffixRubbish_return retval = new Java_JavaP.argumentsSuffixRubbish_return();
        retval.start = input.LT(1);
        int argumentsSuffixRubbish_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.arguments_return args = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // JavaP.g:1762:2: (args= arguments )
            // JavaP.g:1762:4: args= arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_argumentsSuffixRubbish9645);
            args=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
            if ( state.backtracking==0 ) {
              String name = ((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target).name();
              	         ((TargetScope_scope)TargetScope_stack.peek()).target = ((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target).getTarget(); //chop off head
              	         retval.element = invocation(name, ((TargetScope_scope)TargetScope_stack.peek()).target);
              	         retval.element.addAllArguments(args.element);
              	         setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, args.stop);
              	        
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, argumentsSuffixRubbish_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argumentsSuffixRubbish"

    public static class arrayAccessSuffixRubbish_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayAccessSuffixRubbish"
    // JavaP.g:1772:1: arrayAccessSuffixRubbish returns [Expression element] : (open= '[' arrex= expression close= ']' )+ ;
    public final Java_JavaP.arrayAccessSuffixRubbish_return arrayAccessSuffixRubbish() throws RecognitionException {
        Java_JavaP.arrayAccessSuffixRubbish_return retval = new Java_JavaP.arrayAccessSuffixRubbish_return();
        retval.start = input.LT(1);
        int arrayAccessSuffixRubbish_StartIndex = input.index();
        Object root_0 = null;

        Token open=null;
        Token close=null;
        Java_JavaP.expression_return arrex = null;


        Object open_tree=null;
        Object close_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // JavaP.g:1774:2: ( (open= '[' arrex= expression close= ']' )+ )
            // JavaP.g:1774:4: (open= '[' arrex= expression close= ']' )+
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayAccessExpression(new NamedTargetExpression(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target).name(),cloneTargetOfTarget((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target)));
            }
            // JavaP.g:1775:10: (open= '[' arrex= expression close= ']' )+
            int cnt162=0;
            loop162:
            do {
                int alt162=2;
                alt162 = dfa162.predict(input);
                switch (alt162) {
            	case 1 :
            	    // JavaP.g:1775:11: open= '[' arrex= expression close= ']'
            	    {
            	    open=(Token)match(input,48,FOLLOW_48_in_arrayAccessSuffixRubbish9692); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    open_tree = (Object)adaptor.create(open);
            	    adaptor.addChild(root_0, open_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_arrayAccessSuffixRubbish9696);
            	    arrex=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrex.getTree());
            	    close=(Token)match(input,49,FOLLOW_49_in_arrayAccessSuffixRubbish9700); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    close_tree = (Object)adaptor.create(close);
            	    adaptor.addChild(root_0, close_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       FilledArrayIndex index = new FilledArrayIndex(arrex.element);
            	      	           ((ArrayAccessExpression)retval.element).addIndex(index);
            	      	           setLocation(index, open, close);
            	      	          
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt162 >= 1 ) break loop162;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(162, input);
                        throw eee;
                }
                cnt162++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, arrayAccessSuffixRubbish_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayAccessSuffixRubbish"

    public static class creator_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "creator"
    // JavaP.g:1785:1: creator returns [Expression element] : (targs= nonWildcardTypeArguments tx= createdName restx= classCreatorRest | tt= createdName ( '[' ']' )+ init= arrayInitializer | ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* | t= createdName rest= classCreatorRest );
    public final Java_JavaP.creator_return creator() throws RecognitionException {
        Java_JavaP.creator_return retval = new Java_JavaP.creator_return();
        retval.start = input.LT(1);
        int creator_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal240=null;
        Token char_literal241=null;
        Token char_literal242=null;
        Token char_literal243=null;
        Token char_literal244=null;
        Token char_literal245=null;
        Java_JavaP.nonWildcardTypeArguments_return targs = null;

        Java_JavaP.createdName_return tx = null;

        Java_JavaP.classCreatorRest_return restx = null;

        Java_JavaP.createdName_return tt = null;

        Java_JavaP.arrayInitializer_return init = null;

        Java_JavaP.createdName_return ttt = null;

        Java_JavaP.expression_return exx = null;

        Java_JavaP.createdName_return t = null;

        Java_JavaP.classCreatorRest_return rest = null;


        Object char_literal240_tree=null;
        Object char_literal241_tree=null;
        Object char_literal242_tree=null;
        Object char_literal243_tree=null;
        Object char_literal244_tree=null;
        Object char_literal245_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // JavaP.g:1788:5: (targs= nonWildcardTypeArguments tx= createdName restx= classCreatorRest | tt= createdName ( '[' ']' )+ init= arrayInitializer | ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* | t= createdName rest= classCreatorRest )
            int alt166=4;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // JavaP.g:1788:9: targs= nonWildcardTypeArguments tx= createdName restx= classCreatorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator9757);
                    targs=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, targs.getTree());
                    pushFollow(FOLLOW_createdName_in_creator9761);
                    tx=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tx.getTree());
                    pushFollow(FOLLOW_classCreatorRest_in_creator9765);
                    restx=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, restx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ConstructorInvocation((BasicJavaTypeReference)tx.element,((TargetScope_scope)TargetScope_stack.peek()).target);
                                ((ConstructorInvocation)retval.element).setBody(restx.element.body());
                                ((ConstructorInvocation)retval.element).addAllArguments(restx.element.arguments());
                                ((ConstructorInvocation)retval.element).addAllTypeArguments(targs.element);
                               
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1794:10: tt= createdName ( '[' ']' )+ init= arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_createdName_in_creator9789);
                    tt=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tt.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayCreationExpression(tt.element);
                    }
                    // JavaP.g:1795:14: ( '[' ']' )+
                    int cnt163=0;
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);

                        if ( (LA163_0==48) ) {
                            alt163=1;
                        }


                        switch (alt163) {
                    	case 1 :
                    	    // JavaP.g:1795:15: '[' ']'
                    	    {
                    	    char_literal240=(Token)match(input,48,FOLLOW_48_in_creator9808); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal240_tree = (Object)adaptor.create(char_literal240);
                    	    adaptor.addChild(root_0, char_literal240_tree);
                    	    }
                    	    char_literal241=(Token)match(input,49,FOLLOW_49_in_creator9810); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal241_tree = (Object)adaptor.create(char_literal241);
                    	    adaptor.addChild(root_0, char_literal241_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((ArrayCreationExpression)retval.element).addDimensionInitializer(new EmptyArrayIndex(1));
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt163 >= 1 ) break loop163;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(163, input);
                                throw eee;
                        }
                        cnt163++;
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_creator9818);
                    init=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      ((ArrayCreationExpression)retval.element).setInitializer(init.element);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1797:10: ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_createdName_in_creator9842);
                    ttt=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ttt.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayCreationExpression(ttt.element);
                    }
                    // JavaP.g:1798:11: ( '[' exx= expression ']' )+
                    int cnt164=0;
                    loop164:
                    do {
                        int alt164=2;
                        alt164 = dfa164.predict(input);
                        switch (alt164) {
                    	case 1 :
                    	    // JavaP.g:1798:12: '[' exx= expression ']'
                    	    {
                    	    char_literal242=(Token)match(input,48,FOLLOW_48_in_creator9859); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal242_tree = (Object)adaptor.create(char_literal242);
                    	    adaptor.addChild(root_0, char_literal242_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_creator9863);
                    	    exx=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    	    char_literal243=(Token)match(input,49,FOLLOW_49_in_creator9865); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal243_tree = (Object)adaptor.create(char_literal243);
                    	    adaptor.addChild(root_0, char_literal243_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((ArrayCreationExpression)retval.element).addDimensionInitializer(new FilledArrayIndex(exx.element));
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt164 >= 1 ) break loop164;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(164, input);
                                throw eee;
                        }
                        cnt164++;
                    } while (true);

                    // JavaP.g:1799:13: ( '[' ']' )*
                    loop165:
                    do {
                        int alt165=2;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==48) ) {
                            int LA165_2 = input.LA(2);

                            if ( (LA165_2==49) ) {
                                alt165=1;
                            }


                        }


                        switch (alt165) {
                    	case 1 :
                    	    // JavaP.g:1799:14: '[' ']'
                    	    {
                    	    char_literal244=(Token)match(input,48,FOLLOW_48_in_creator9885); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal244_tree = (Object)adaptor.create(char_literal244);
                    	    adaptor.addChild(root_0, char_literal244_tree);
                    	    }
                    	    char_literal245=(Token)match(input,49,FOLLOW_49_in_creator9887); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal245_tree = (Object)adaptor.create(char_literal245);
                    	    adaptor.addChild(root_0, char_literal245_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((ArrayCreationExpression)retval.element).addDimensionInitializer(new EmptyArrayIndex(1));
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop165;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // JavaP.g:1800:9: t= createdName rest= classCreatorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_createdName_in_creator9903);
                    t=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    pushFollow(FOLLOW_classCreatorRest_in_creator9907);
                    rest=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ConstructorInvocation((BasicJavaTypeReference)t.element,((TargetScope_scope)TargetScope_stack.peek()).target);
                                ((ConstructorInvocation)retval.element).setBody(rest.element.body());
                                ((ConstructorInvocation)retval.element).addAllArguments(rest.element.arguments());
                               
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, creator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "creator"

    public static class createdName_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createdName"
    // JavaP.g:1808:1: createdName returns [JavaTypeReference element] : (cd= classOrInterfaceType | prim= primitiveType );
    public final Java_JavaP.createdName_return createdName() throws RecognitionException {
        Java_JavaP.createdName_return retval = new Java_JavaP.createdName_return();
        retval.start = input.LT(1);
        int createdName_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.classOrInterfaceType_return cd = null;

        Java_JavaP.primitiveType_return prim = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // JavaP.g:1809:5: (cd= classOrInterfaceType | prim= primitiveType )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==Identifier) ) {
                alt167=1;
            }
            else if ( ((LA167_0>=56 && LA167_0<=63)) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // JavaP.g:1809:9: cd= classOrInterfaceType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_createdName9956);
                    cd=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cd.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1810:9: prim= primitiveType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_createdName9970);
                    prim=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prim.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = prim.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, createdName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "createdName"

    public static class innerCreator_return extends ParserRuleReturnScope {
        public ConstructorInvocation element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // JavaP.g:1815:1: innerCreator returns [ConstructorInvocation element] : (targs= nonWildcardTypeArguments )? name= identifierRule rest= classCreatorRest ;
    public final Java_JavaP.innerCreator_return innerCreator() throws RecognitionException {
        Java_JavaP.innerCreator_return retval = new Java_JavaP.innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.nonWildcardTypeArguments_return targs = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.classCreatorRest_return rest = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // JavaP.g:1816:5: ( (targs= nonWildcardTypeArguments )? name= identifierRule rest= classCreatorRest )
            // JavaP.g:1816:9: (targs= nonWildcardTypeArguments )? name= identifierRule rest= classCreatorRest
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:1816:9: (targs= nonWildcardTypeArguments )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==40) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // JavaP.g:1816:10: targs= nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_innerCreator10000);
                    targs=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, targs.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_identifierRule_in_innerCreator10015);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator10019);
            rest=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
            if ( state.backtracking==0 ) {
              BasicJavaTypeReference tref = (BasicJavaTypeReference)typeRef((name!=null?input.toString(name.start,name.stop):null));
                       setLocation(tref,name.start,name.start);
                       retval.element = new ConstructorInvocation((BasicJavaTypeReference)tref,((TargetScope_scope)TargetScope_stack.peek()).target);
                       retval.element.setBody(rest.element.body());
                       retval.element.addAllArguments(rest.element.arguments());
                       if(targs != null) {
                         retval.element.addAllTypeArguments(targs.element);
                       }
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        public ClassCreatorRest element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // JavaP.g:1830:1: classCreatorRest returns [ClassCreatorRest element] : args= arguments (body= classBody )? ;
    public final Java_JavaP.classCreatorRest_return classCreatorRest() throws RecognitionException {
        Java_JavaP.classCreatorRest_return retval = new Java_JavaP.classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.arguments_return args = null;

        Java_JavaP.classBody_return body = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // JavaP.g:1831:5: (args= arguments (body= classBody )? )
            // JavaP.g:1831:9: args= arguments (body= classBody )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_classCreatorRest10056);
            args=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ClassCreatorRest(args.element);
            }
            // JavaP.g:1831:78: (body= classBody )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==44) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // JavaP.g:1831:79: body= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest10062);
                    body=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.setBody(body.element);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // JavaP.g:1835:1: explicitGenericInvocation returns [Expression element] : targs= nonWildcardTypeArguments name= identifierRule args= arguments ;
    public final Java_JavaP.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        Java_JavaP.explicitGenericInvocation_return retval = new Java_JavaP.explicitGenericInvocation_return();
        retval.start = input.LT(1);
        int explicitGenericInvocation_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.nonWildcardTypeArguments_return targs = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // JavaP.g:1836:5: (targs= nonWildcardTypeArguments name= identifierRule args= arguments )
            // JavaP.g:1836:9: targs= nonWildcardTypeArguments name= identifierRule args= arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation10096);
            targs=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, targs.getTree());
            pushFollow(FOLLOW_identifierRule_in_explicitGenericInvocation10100);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            pushFollow(FOLLOW_arguments_in_explicitGenericInvocation10104);
            args=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
            if ( state.backtracking==0 ) {
              retval.element = invocation((name!=null?input.toString(name.start,name.stop):null),((TargetScope_scope)TargetScope_stack.peek()).target);
                         ((RegularMethodInvocation)retval.element).addAllArguments(args.element);
                         ((RegularMethodInvocation)retval.element).addAllTypeArguments(targs.element);
                        
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, explicitGenericInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        public List<ActualTypeArgument> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // JavaP.g:1843:1: nonWildcardTypeArguments returns [List<ActualTypeArgument> element] : '<' list= typeList '>' ;
    public final Java_JavaP.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        Java_JavaP.nonWildcardTypeArguments_return retval = new Java_JavaP.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal246=null;
        Token char_literal247=null;
        Java_JavaP.typeList_return list = null;


        Object char_literal246_tree=null;
        Object char_literal247_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // JavaP.g:1844:5: ( '<' list= typeList '>' )
            // JavaP.g:1844:9: '<' list= typeList '>'
            {
            root_0 = (Object)adaptor.nil();

            char_literal246=(Token)match(input,40,FOLLOW_40_in_nonWildcardTypeArguments10143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal246_tree = (Object)adaptor.create(char_literal246);
            adaptor.addChild(root_0, char_literal246_tree);
            }
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments10147);
            list=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, list.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<ActualTypeArgument>();for(TypeReference tref:list.element){retval.element.add(java().createBasicTypeArgument(tref));}
            }
            char_literal247=(Token)match(input,42,FOLLOW_42_in_nonWildcardTypeArguments10150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal247_tree = (Object)adaptor.create(char_literal247);
            adaptor.addChild(root_0, char_literal247_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class superSuffix_return extends ParserRuleReturnScope {
        public TargetedExpression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // JavaP.g:1848:1: superSuffix returns [TargetedExpression element] : '.' name= identifierRule (args= arguments )? ;
    public final Java_JavaP.superSuffix_return superSuffix() throws RecognitionException {
        Java_JavaP.superSuffix_return retval = new Java_JavaP.superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal248=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;


        Object char_literal248_tree=null;


           Token start=null;
           Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // JavaP.g:1853:5: ( '.' name= identifierRule (args= arguments )? )
            // JavaP.g:1855:5: '.' name= identifierRule (args= arguments )?
            {
            root_0 = (Object)adaptor.nil();

            char_literal248=(Token)match(input,29,FOLLOW_29_in_superSuffix10196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal248_tree = (Object)adaptor.create(char_literal248);
            adaptor.addChild(root_0, char_literal248_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_superSuffix10200);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new NamedTargetExpression((name!=null?input.toString(name.start,name.stop):null));
                                       start = name.start;
                                       stop = name.start;
            }
            // JavaP.g:1858:9: (args= arguments )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==66) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // JavaP.g:1858:10: args= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix10216);
                    args=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = invocation((name!=null?input.toString(name.start,name.stop):null),null);
                                ((RegularMethodInvocation)retval.element).addAllArguments(args.element);
                                stop = args.stop;
                                
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setLocation(retval.element,start,stop);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class arguments_return extends ParserRuleReturnScope {
        public List<Expression> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // JavaP.g:1867:1: arguments returns [List<Expression> element] : '(' (list= expressionList )? ')' ;
    public final Java_JavaP.arguments_return arguments() throws RecognitionException {
        Java_JavaP.arguments_return retval = new Java_JavaP.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal249=null;
        Token char_literal250=null;
        Java_JavaP.expressionList_return list = null;


        Object char_literal249_tree=null;
        Object char_literal250_tree=null;

        retval.element = new ArrayList<Expression>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // JavaP.g:1869:5: ( '(' (list= expressionList )? ')' )
            // JavaP.g:1869:9: '(' (list= expressionList )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal249=(Token)match(input,66,FOLLOW_66_in_arguments10276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal249_tree = (Object)adaptor.create(char_literal249);
            adaptor.addChild(root_0, char_literal249_tree);
            }
            // JavaP.g:1869:13: (list= expressionList )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( ((LA171_0>=HexLiteral && LA171_0<=OctalLiteral)||LA171_0==FloatingPointLiteral||(LA171_0>=CharacterLiteral && LA171_0<=StringLiteral)||LA171_0==Identifier||LA171_0==47||(LA171_0>=56 && LA171_0<=63)||(LA171_0>=65 && LA171_0<=66)||(LA171_0>=69 && LA171_0<=72)||(LA171_0>=105 && LA171_0<=106)||(LA171_0>=109 && LA171_0<=113)) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // JavaP.g:1869:14: list= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments10281);
                    list=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list.getTree());
                    if ( state.backtracking==0 ) {
                       for(Expression ex: list.element) {retval.element.add(ex);}
                    }

                    }
                    break;

            }

            char_literal250=(Token)match(input,67,FOLLOW_67_in_arguments10288); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal250_tree = (Object)adaptor.create(char_literal250);
            adaptor.addChild(root_0, char_literal250_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred5_JavaP
    public final void synpred5_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.packageDeclaration_return np = null;

        Java_JavaP.importDeclaration_return imp = null;

        Java_JavaP.typeDeclaration_return typech = null;

        Java_JavaP.classOrInterfaceDeclaration_return cd = null;


        // JavaP.g:352:10: ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) )
        // JavaP.g:352:10: annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
        {
        pushFollow(FOLLOW_annotations_in_synpred5_JavaP141);
        annotations();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:353:9: (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
        int alt177=2;
        int LA177_0 = input.LA(1);

        if ( (LA177_0==25) ) {
            alt177=1;
        }
        else if ( (LA177_0==ENUM||LA177_0==28||(LA177_0>=31 && LA177_0<=37)||LA177_0==46||LA177_0==73) ) {
            alt177=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 177, 0, input);

            throw nvae;
        }
        switch (alt177) {
            case 1 :
                // JavaP.g:353:13: np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )*
                {
                pushFollow(FOLLOW_packageDeclaration_in_synpred5_JavaP157);
                np=packageDeclaration();

                state._fsp--;
                if (state.failed) return ;
                // JavaP.g:358:13: (imp= importDeclaration )*
                loop174:
                do {
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==27) ) {
                        alt174=1;
                    }


                    switch (alt174) {
                	case 1 :
                	    // JavaP.g:358:14: imp= importDeclaration
                	    {
                	    pushFollow(FOLLOW_importDeclaration_in_synpred5_JavaP193);
                	    imp=importDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop174;
                    }
                } while (true);

                // JavaP.g:359:13: (typech= typeDeclaration )*
                loop175:
                do {
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==ENUM||LA175_0==26||LA175_0==28||(LA175_0>=31 && LA175_0<=37)||LA175_0==46||LA175_0==73) ) {
                        alt175=1;
                    }


                    switch (alt175) {
                	case 1 :
                	    // JavaP.g:359:14: typech= typeDeclaration
                	    {
                	    pushFollow(FOLLOW_typeDeclaration_in_synpred5_JavaP214);
                	    typech=typeDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop175;
                    }
                } while (true);


                }
                break;
            case 2 :
                // JavaP.g:363:13: cd= classOrInterfaceDeclaration (typech= typeDeclaration )*
                {
                pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred5_JavaP263);
                cd=classOrInterfaceDeclaration();

                state._fsp--;
                if (state.failed) return ;
                // JavaP.g:369:13: (typech= typeDeclaration )*
                loop176:
                do {
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==ENUM||LA176_0==26||LA176_0==28||(LA176_0>=31 && LA176_0<=37)||LA176_0==46||LA176_0==73) ) {
                        alt176=1;
                    }


                    switch (alt176) {
                	case 1 :
                	    // JavaP.g:369:14: typech= typeDeclaration
                	    {
                	    pushFollow(FOLLOW_typeDeclaration_in_synpred5_JavaP298);
                	    typech=typeDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop176;
                    }
                } while (true);


                }
                break;

        }


        }
    }
    // $ANTLR end synpred5_JavaP

    // $ANTLR start synpred52_JavaP
    public final void synpred52_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.methodDeclaration_return method = null;


        // JavaP.g:689:9: (method= methodDeclaration )
        // JavaP.g:689:9: method= methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred52_JavaP2448);
        method=methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_JavaP

    // $ANTLR start synpred60_JavaP
    public final void synpred60_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.interfaceConstant_return cst = null;


        // JavaP.g:749:9: (cst= interfaceConstant )
        // JavaP.g:749:9: cst= interfaceConstant
        {
        pushFollow(FOLLOW_interfaceConstant_in_synpred60_JavaP2886);
        cst=interfaceConstant();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_JavaP

    // $ANTLR start synpred105_JavaP
    public final void synpred105_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return t = null;

        Java_JavaP.variableDeclaratorId_return id = null;

        Java_JavaP.formalParameterDecls_return decls = null;


        // JavaP.g:1006:9: (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? )
        // JavaP.g:1006:9: mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )?
        {
        pushFollow(FOLLOW_variableModifiers_in_synpred105_JavaP4611);
        mods=variableModifiers();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred105_JavaP4615);
        t=type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variableDeclaratorId_in_synpred105_JavaP4619);
        id=variableDeclaratorId();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:1007:9: ( ',' decls= formalParameterDecls )?
        int alt184=2;
        int LA184_0 = input.LA(1);

        if ( (LA184_0==41) ) {
            alt184=1;
        }
        switch (alt184) {
            case 1 :
                // JavaP.g:1007:10: ',' decls= formalParameterDecls
                {
                match(input,41,FOLLOW_41_in_synpred105_JavaP4631); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterDecls_in_synpred105_JavaP4635);
                decls=formalParameterDecls();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred105_JavaP

    // $ANTLR start synpred106_JavaP
    public final void synpred106_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.explicitConstructorInvocation_return inv = null;


        // JavaP.g:1031:11: (inv= explicitConstructorInvocation )
        // JavaP.g:1031:11: inv= explicitConstructorInvocation
        {
        pushFollow(FOLLOW_explicitConstructorInvocation_in_synpred106_JavaP4758);
        inv=explicitConstructorInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred106_JavaP

    // $ANTLR start synpred109_JavaP
    public final void synpred109_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.arguments_return args = null;


        // JavaP.g:1037:9: ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' )
        // JavaP.g:1037:9: ( nonWildcardTypeArguments )? 'this' args= arguments ';'
        {
        // JavaP.g:1037:9: ( nonWildcardTypeArguments )?
        int alt185=2;
        int LA185_0 = input.LA(1);

        if ( (LA185_0==40) ) {
            alt185=1;
        }
        switch (alt185) {
            case 1 :
                // JavaP.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred109_JavaP4810);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,69,FOLLOW_69_in_synpred109_JavaP4813); if (state.failed) return ;
        pushFollow(FOLLOW_arguments_in_synpred109_JavaP4817);
        args=arguments();

        state._fsp--;
        if (state.failed) return ;
        match(input,26,FOLLOW_26_in_synpred109_JavaP4819); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_JavaP

    // $ANTLR start synpred121_JavaP
    public final void synpred121_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.annotation_return a = null;


        // JavaP.g:1086:10: (a= annotation )
        // JavaP.g:1086:10: a= annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred121_JavaP5130);
        a=annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_JavaP

    // $ANTLR start synpred144_JavaP
    public final void synpred144_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.localVariableDeclarationStatement_return local = null;


        // JavaP.g:1183:9: (local= localVariableDeclarationStatement )
        // JavaP.g:1183:9: local= localVariableDeclarationStatement
        {
        pushFollow(FOLLOW_localVariableDeclarationStatement_in_synpred144_JavaP5851);
        local=localVariableDeclarationStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_JavaP

    // $ANTLR start synpred145_JavaP
    public final void synpred145_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.classOrInterfaceDeclaration_return cd = null;


        // JavaP.g:1184:9: (cd= classOrInterfaceDeclaration )
        // JavaP.g:1184:9: cd= classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred145_JavaP5865);
        cd=classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_JavaP

    // $ANTLR start synpred150_JavaP
    public final void synpred150_JavaP_fragment() throws RecognitionException {   
        Token elsekey=null;
        Java_JavaP.statement_return ifelse = null;


        // JavaP.g:1207:72: (elsekey= 'else' ifelse= statement )
        // JavaP.g:1207:72: elsekey= 'else' ifelse= statement
        {
        elsekey=(Token)match(input,77,FOLLOW_77_in_synpred150_JavaP6089); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred150_JavaP6093);
        ifelse=statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred150_JavaP

    // $ANTLR start synpred155_JavaP
    public final void synpred155_JavaP_fragment() throws RecognitionException {   
        Token finkey=null;
        Java_JavaP.catches_return cts = null;

        Java_JavaP.block_return trybl = null;


        // JavaP.g:1227:11: (cts= catches finkey= 'finally' trybl= block )
        // JavaP.g:1227:11: cts= catches finkey= 'finally' trybl= block
        {
        pushFollow(FOLLOW_catches_in_synpred155_JavaP6251);
        cts=catches();

        state._fsp--;
        if (state.failed) return ;
        finkey=(Token)match(input,82,FOLLOW_82_in_synpred155_JavaP6255); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred155_JavaP6259);
        trybl=block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_JavaP

    // $ANTLR start synpred156_JavaP
    public final void synpred156_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.catches_return ctss = null;


        // JavaP.g:1232:11: (ctss= catches )
        // JavaP.g:1232:11: ctss= catches
        {
        pushFollow(FOLLOW_catches_in_synpred156_JavaP6287);
        ctss=catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_JavaP

    // $ANTLR start synpred172_JavaP
    public final void synpred172_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.constantExpression_return csexpr = null;


        // JavaP.g:1301:9: ( 'case' csexpr= constantExpression ':' )
        // JavaP.g:1301:9: 'case' csexpr= constantExpression ':'
        {
        match(input,89,FOLLOW_89_in_synpred172_JavaP6892); if (state.failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred172_JavaP6896);
        csexpr=constantExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,75,FOLLOW_75_in_synpred172_JavaP6898); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_JavaP

    // $ANTLR start synpred173_JavaP
    public final void synpred173_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.enumConstantName_return enumname = null;


        // JavaP.g:1302:9: ( 'case' enumname= enumConstantName ':' )
        // JavaP.g:1302:9: 'case' enumname= enumConstantName ':'
        {
        match(input,89,FOLLOW_89_in_synpred173_JavaP6910); if (state.failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred173_JavaP6914);
        enumname=enumConstantName();

        state._fsp--;
        if (state.failed) return ;
        match(input,75,FOLLOW_75_in_synpred173_JavaP6916); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_JavaP

    // $ANTLR start synpred174_JavaP
    public final void synpred174_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.enhancedForControl_return enh = null;


        // JavaP.g:1309:9: (enh= enhancedForControl )
        // JavaP.g:1309:9: enh= enhancedForControl
        {
        pushFollow(FOLLOW_enhancedForControl_in_synpred174_JavaP6972);
        enh=enhancedForControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_JavaP

    // $ANTLR start synpred178_JavaP
    public final void synpred178_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.localVariableDeclaration_return local = null;


        // JavaP.g:1315:9: (local= localVariableDeclaration )
        // JavaP.g:1315:9: local= localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred178_JavaP7032);
        local=localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_JavaP

    // $ANTLR start synpred180_JavaP
    public final void synpred180_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.assignmentOperator_return op = null;

        Java_JavaP.expression_return exx = null;


        // JavaP.g:1361:64: (op= assignmentOperator exx= expression )
        // JavaP.g:1361:64: op= assignmentOperator exx= expression
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred180_JavaP7327);
        op=assignmentOperator();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred180_JavaP7331);
        exx=expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_JavaP

    // $ANTLR start synpred190_JavaP
    public final void synpred190_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1385:9: ( '<' '<' '=' )
        // JavaP.g:1385:10: '<' '<' '='
        {
        match(input,40,FOLLOW_40_in_synpred190_JavaP7467); if (state.failed) return ;
        match(input,40,FOLLOW_40_in_synpred190_JavaP7469); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred190_JavaP7471); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_JavaP

    // $ANTLR start synpred191_JavaP
    public final void synpred191_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1390:9: ( '>' '>' '>' '=' )
        // JavaP.g:1390:10: '>' '>' '>' '='
        {
        match(input,42,FOLLOW_42_in_synpred191_JavaP7507); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred191_JavaP7509); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred191_JavaP7511); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred191_JavaP7513); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_JavaP

    // $ANTLR start synpred192_JavaP
    public final void synpred192_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1397:9: ( '>' '>' '=' )
        // JavaP.g:1397:10: '>' '>' '='
        {
        match(input,42,FOLLOW_42_in_synpred192_JavaP7552); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred192_JavaP7554); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred192_JavaP7556); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_JavaP

    // $ANTLR start synpred203_JavaP
    public final void synpred203_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1488:9: ( '<' '=' )
        // JavaP.g:1488:10: '<' '='
        {
        match(input,40,FOLLOW_40_in_synpred203_JavaP8082); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred203_JavaP8084); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_JavaP

    // $ANTLR start synpred204_JavaP
    public final void synpred204_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1491:9: ( '>' '=' )
        // JavaP.g:1491:10: '>' '='
        {
        match(input,42,FOLLOW_42_in_synpred204_JavaP8116); if (state.failed) return ;
        match(input,51,FOLLOW_51_in_synpred204_JavaP8118); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred204_JavaP

    // $ANTLR start synpred207_JavaP
    public final void synpred207_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1509:9: ( '<' '<' )
        // JavaP.g:1509:10: '<' '<'
        {
        match(input,40,FOLLOW_40_in_synpred207_JavaP8232); if (state.failed) return ;
        match(input,40,FOLLOW_40_in_synpred207_JavaP8234); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_JavaP

    // $ANTLR start synpred208_JavaP
    public final void synpred208_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1512:9: ( '>' '>' '>' )
        // JavaP.g:1512:10: '>' '>' '>'
        {
        match(input,42,FOLLOW_42_in_synpred208_JavaP8266); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred208_JavaP8268); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred208_JavaP8270); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_JavaP

    // $ANTLR start synpred209_JavaP
    public final void synpred209_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1517:9: ( '>' '>' )
        // JavaP.g:1517:10: '>' '>'
        {
        match(input,42,FOLLOW_42_in_synpred209_JavaP8306); if (state.failed) return ;
        match(input,42,FOLLOW_42_in_synpred209_JavaP8308); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_JavaP

    // $ANTLR start synpred221_JavaP
    public final void synpred221_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.castExpression_return castex = null;


        // JavaP.g:1575:9: (castex= castExpression )
        // JavaP.g:1575:9: castex= castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred221_JavaP8640);
        castex=castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_JavaP

    // $ANTLR start synpred230_JavaP
    public final void synpred230_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.primitiveType_return tref = null;

        Java_JavaP.unaryExpression_return unex = null;


        // JavaP.g:1644:8: ( '(' tref= primitiveType ')' unex= unaryExpression )
        // JavaP.g:1644:8: '(' tref= primitiveType ')' unex= unaryExpression
        {
        match(input,66,FOLLOW_66_in_synpred230_JavaP8982); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred230_JavaP8986);
        tref=primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,67,FOLLOW_67_in_synpred230_JavaP8988); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred230_JavaP8992);
        unex=unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_JavaP

    // $ANTLR start synpred236_JavaP
    public final void synpred236_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.moreidentifierRuleSuffixRubbish_return morerubex = null;


        // JavaP.g:1669:9: (morerubex= moreidentifierRuleSuffixRubbish )
        // JavaP.g:1669:9: morerubex= moreidentifierRuleSuffixRubbish
        {
        pushFollow(FOLLOW_moreidentifierRuleSuffixRubbish_in_synpred236_JavaP9150);
        morerubex=moreidentifierRuleSuffixRubbish();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_JavaP

    // $ANTLR start synpred238_JavaP
    public final void synpred238_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.identifierRule_return idx = null;


        // JavaP.g:1697:5: ( '.' idx= identifierRule )
        // JavaP.g:1697:5: '.' idx= identifierRule
        {
        match(input,29,FOLLOW_29_in_synpred238_JavaP9275); if (state.failed) return ;
        pushFollow(FOLLOW_identifierRule_in_synpred238_JavaP9279);
        idx=identifierRule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_JavaP

    // $ANTLR start synpred240_JavaP
    public final void synpred240_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1708:9: ( ( '[' ']' )+ '.' 'class' )
        // JavaP.g:1708:9: ( '[' ']' )+ '.' 'class'
        {
        // JavaP.g:1708:9: ( '[' ']' )+
        int cnt198=0;
        loop198:
        do {
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==48) ) {
                alt198=1;
            }


            switch (alt198) {
        	case 1 :
        	    // JavaP.g:1708:10: '[' ']'
        	    {
        	    match(input,48,FOLLOW_48_in_synpred240_JavaP9311); if (state.failed) return ;
        	    match(input,49,FOLLOW_49_in_synpred240_JavaP9313); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt198 >= 1 ) break loop198;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(198, input);
                    throw eee;
            }
            cnt198++;
        } while (true);

        match(input,29,FOLLOW_29_in_synpred240_JavaP9317); if (state.failed) return ;
        match(input,37,FOLLOW_37_in_synpred240_JavaP9319); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_JavaP

    // $ANTLR start synpred241_JavaP
    public final void synpred241_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;


        // JavaP.g:1710:9: (arr= arrayAccessSuffixRubbish )
        // JavaP.g:1710:9: arr= arrayAccessSuffixRubbish
        {
        pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_synpred241_JavaP9340);
        arr=arrayAccessSuffixRubbish();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_JavaP

    // $ANTLR start synpred243_JavaP
    public final void synpred243_JavaP_fragment() throws RecognitionException {   
        Token clkw=null;

        // JavaP.g:1712:9: ( '.' clkw= 'class' )
        // JavaP.g:1712:9: '.' clkw= 'class'
        {
        match(input,29,FOLLOW_29_in_synpred243_JavaP9367); if (state.failed) return ;
        clkw=(Token)match(input,37,FOLLOW_37_in_synpred243_JavaP9371); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_JavaP

    // $ANTLR start synpred244_JavaP
    public final void synpred244_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.explicitGenericInvocation_return gen = null;


        // JavaP.g:1717:9: ( '.' gen= explicitGenericInvocation )
        // JavaP.g:1717:9: '.' gen= explicitGenericInvocation
        {
        match(input,29,FOLLOW_29_in_synpred244_JavaP9393); if (state.failed) return ;
        pushFollow(FOLLOW_explicitGenericInvocation_in_synpred244_JavaP9397);
        gen=explicitGenericInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_JavaP

    // $ANTLR start synpred245_JavaP
    public final void synpred245_JavaP_fragment() throws RecognitionException {   
        Token thiskw=null;

        // JavaP.g:1718:9: ( '.' thiskw= 'this' )
        // JavaP.g:1718:9: '.' thiskw= 'this'
        {
        match(input,29,FOLLOW_29_in_synpred245_JavaP9410); if (state.failed) return ;
        thiskw=(Token)match(input,69,FOLLOW_69_in_synpred245_JavaP9414); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_JavaP

    // $ANTLR start synpred246_JavaP
    public final void synpred246_JavaP_fragment() throws RecognitionException {   
        Token supkw=null;
        Java_JavaP.superSuffix_return supsuf = null;


        // JavaP.g:1723:9: ( '.' supkw= 'super' supsuf= superSuffix )
        // JavaP.g:1723:9: '.' supkw= 'super' supsuf= superSuffix
        {
        match(input,29,FOLLOW_29_in_synpred246_JavaP9435); if (state.failed) return ;
        supkw=(Token)match(input,65,FOLLOW_65_in_synpred246_JavaP9439); if (state.failed) return ;
        pushFollow(FOLLOW_superSuffix_in_synpred246_JavaP9457);
        supsuf=superSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_JavaP

    // $ANTLR start synpred247_JavaP
    public final void synpred247_JavaP_fragment() throws RecognitionException {   
        Token newkw=null;
        Java_JavaP.innerCreator_return in = null;


        // JavaP.g:1732:9: ( '.' newkw= 'new' in= innerCreator )
        // JavaP.g:1732:9: '.' newkw= 'new' in= innerCreator
        {
        match(input,29,FOLLOW_29_in_synpred247_JavaP9469); if (state.failed) return ;
        newkw=(Token)match(input,113,FOLLOW_113_in_synpred247_JavaP9473); if (state.failed) return ;
        pushFollow(FOLLOW_innerCreator_in_synpred247_JavaP9477);
        in=innerCreator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred247_JavaP

    // $ANTLR start synpred248_JavaP
    public final void synpred248_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.identifierRule_return id = null;


        // JavaP.g:1737:55: ( '.' id= identifierRule )
        // JavaP.g:1737:55: '.' id= identifierRule
        {
        match(input,29,FOLLOW_29_in_synpred248_JavaP9505); if (state.failed) return ;
        pushFollow(FOLLOW_identifierRule_in_synpred248_JavaP9509);
        id=identifierRule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_JavaP

    // $ANTLR start synpred249_JavaP
    public final void synpred249_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;


        // JavaP.g:1744:9: (arr= arrayAccessSuffixRubbish )
        // JavaP.g:1744:9: arr= arrayAccessSuffixRubbish
        {
        pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_synpred249_JavaP9534);
        arr=arrayAccessSuffixRubbish();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_JavaP

    // $ANTLR start synpred251_JavaP
    public final void synpred251_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1746:9: ( '.' 'class' )
        // JavaP.g:1746:9: '.' 'class'
        {
        match(input,29,FOLLOW_29_in_synpred251_JavaP9560); if (state.failed) return ;
        match(input,37,FOLLOW_37_in_synpred251_JavaP9562); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_JavaP

    // $ANTLR start synpred252_JavaP
    public final void synpred252_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.explicitGenericInvocation_return gen = null;


        // JavaP.g:1747:9: ( '.' gen= explicitGenericInvocation )
        // JavaP.g:1747:9: '.' gen= explicitGenericInvocation
        {
        match(input,29,FOLLOW_29_in_synpred252_JavaP9574); if (state.failed) return ;
        pushFollow(FOLLOW_explicitGenericInvocation_in_synpred252_JavaP9578);
        gen=explicitGenericInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_JavaP

    // $ANTLR start synpred253_JavaP
    public final void synpred253_JavaP_fragment() throws RecognitionException {   
        Token supkw=null;
        Java_JavaP.superSuffix_return supsuf = null;


        // JavaP.g:1748:9: ( '.' supkw= 'super' supsuf= superSuffix )
        // JavaP.g:1748:9: '.' supkw= 'super' supsuf= superSuffix
        {
        match(input,29,FOLLOW_29_in_synpred253_JavaP9590); if (state.failed) return ;
        supkw=(Token)match(input,65,FOLLOW_65_in_synpred253_JavaP9594); if (state.failed) return ;
        pushFollow(FOLLOW_superSuffix_in_synpred253_JavaP9598);
        supsuf=superSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_JavaP

    // $ANTLR start synpred254_JavaP
    public final void synpred254_JavaP_fragment() throws RecognitionException {   
        Token newkw=null;
        Java_JavaP.innerCreator_return in = null;


        // JavaP.g:1755:9: ( '.' newkw= 'new' in= innerCreator )
        // JavaP.g:1755:9: '.' newkw= 'new' in= innerCreator
        {
        match(input,29,FOLLOW_29_in_synpred254_JavaP9610); if (state.failed) return ;
        newkw=(Token)match(input,113,FOLLOW_113_in_synpred254_JavaP9614); if (state.failed) return ;
        pushFollow(FOLLOW_innerCreator_in_synpred254_JavaP9618);
        in=innerCreator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_JavaP

    // $ANTLR start synpred255_JavaP
    public final void synpred255_JavaP_fragment() throws RecognitionException {   
        Token open=null;
        Token close=null;
        Java_JavaP.expression_return arrex = null;


        // JavaP.g:1775:11: (open= '[' arrex= expression close= ']' )
        // JavaP.g:1775:11: open= '[' arrex= expression close= ']'
        {
        open=(Token)match(input,48,FOLLOW_48_in_synpred255_JavaP9692); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred255_JavaP9696);
        arrex=expression();

        state._fsp--;
        if (state.failed) return ;
        close=(Token)match(input,49,FOLLOW_49_in_synpred255_JavaP9700); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_JavaP

    // $ANTLR start synpred258_JavaP
    public final void synpred258_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.createdName_return tt = null;

        Java_JavaP.arrayInitializer_return init = null;


        // JavaP.g:1794:10: (tt= createdName ( '[' ']' )+ init= arrayInitializer )
        // JavaP.g:1794:10: tt= createdName ( '[' ']' )+ init= arrayInitializer
        {
        pushFollow(FOLLOW_createdName_in_synpred258_JavaP9789);
        tt=createdName();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:1795:14: ( '[' ']' )+
        int cnt199=0;
        loop199:
        do {
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==48) ) {
                alt199=1;
            }


            switch (alt199) {
        	case 1 :
        	    // JavaP.g:1795:15: '[' ']'
        	    {
        	    match(input,48,FOLLOW_48_in_synpred258_JavaP9808); if (state.failed) return ;
        	    match(input,49,FOLLOW_49_in_synpred258_JavaP9810); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt199 >= 1 ) break loop199;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(199, input);
                    throw eee;
            }
            cnt199++;
        } while (true);

        pushFollow(FOLLOW_arrayInitializer_in_synpred258_JavaP9818);
        init=arrayInitializer();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_JavaP

    // $ANTLR start synpred259_JavaP
    public final void synpred259_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.expression_return exx = null;


        // JavaP.g:1798:12: ( '[' exx= expression ']' )
        // JavaP.g:1798:12: '[' exx= expression ']'
        {
        match(input,48,FOLLOW_48_in_synpred259_JavaP9859); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred259_JavaP9863);
        exx=expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,49,FOLLOW_49_in_synpred259_JavaP9865); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_JavaP

    // $ANTLR start synpred261_JavaP
    public final void synpred261_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.createdName_return ttt = null;

        Java_JavaP.expression_return exx = null;


        // JavaP.g:1797:10: (ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* )
        // JavaP.g:1797:10: ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )*
        {
        pushFollow(FOLLOW_createdName_in_synpred261_JavaP9842);
        ttt=createdName();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:1798:11: ( '[' exx= expression ']' )+
        int cnt200=0;
        loop200:
        do {
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==48) ) {
                int LA200_1 = input.LA(2);

                if ( ((LA200_1>=HexLiteral && LA200_1<=OctalLiteral)||LA200_1==FloatingPointLiteral||(LA200_1>=CharacterLiteral && LA200_1<=StringLiteral)||LA200_1==Identifier||LA200_1==47||(LA200_1>=56 && LA200_1<=63)||(LA200_1>=65 && LA200_1<=66)||(LA200_1>=69 && LA200_1<=72)||(LA200_1>=105 && LA200_1<=106)||(LA200_1>=109 && LA200_1<=113)) ) {
                    alt200=1;
                }


            }


            switch (alt200) {
        	case 1 :
        	    // JavaP.g:1798:12: '[' exx= expression ']'
        	    {
        	    match(input,48,FOLLOW_48_in_synpred261_JavaP9859); if (state.failed) return ;
        	    pushFollow(FOLLOW_expression_in_synpred261_JavaP9863);
        	    exx=expression();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    match(input,49,FOLLOW_49_in_synpred261_JavaP9865); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt200 >= 1 ) break loop200;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(200, input);
                    throw eee;
            }
            cnt200++;
        } while (true);

        // JavaP.g:1799:13: ( '[' ']' )*
        loop201:
        do {
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==48) ) {
                alt201=1;
            }


            switch (alt201) {
        	case 1 :
        	    // JavaP.g:1799:14: '[' ']'
        	    {
        	    match(input,48,FOLLOW_48_in_synpred261_JavaP9885); if (state.failed) return ;
        	    match(input,49,FOLLOW_49_in_synpred261_JavaP9887); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop201;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred261_JavaP

    // Delegated rules

    public final boolean synpred230_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA8 dfa8 = new DFA8(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA164 dfa164 = new DFA164(this);
    static final String DFA8_eotS =
        "\21\uffff";
    static final String DFA8_eofS =
        "\1\2\20\uffff";
    static final String DFA8_minS =
        "\1\21\1\0\17\uffff";
    static final String DFA8_maxS =
        "\1\111\1\0\17\uffff";
    static final String DFA8_acceptS =
        "\2\uffff\1\2\15\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\17\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\2\7\uffff\4\2\2\uffff\7\2\10\uffff\1\2\32\uffff\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "347:1: compilationUnit returns [CompilationUnit element] : ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) | (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_JavaP()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\14\uffff";
    static final String DFA41_eofS =
        "\14\uffff";
    static final String DFA41_minS =
        "\1\25\11\0\2\uffff";
    static final String DFA41_maxS =
        "\1\77\11\0\2\uffff";
    static final String DFA41_acceptS =
        "\12\uffff\1\1\1\2";
    static final String DFA41_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\1\42\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "688:1: memberDeclaration returns [TypeElement element] : (method= methodDeclaration | field= fieldDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_1 = input.LA(1);

                         
                        int index41_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA41_2 = input.LA(1);

                         
                        int index41_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA41_3 = input.LA(1);

                         
                        int index41_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA41_4 = input.LA(1);

                         
                        int index41_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA41_5 = input.LA(1);

                         
                        int index41_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA41_6 = input.LA(1);

                         
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA41_7 = input.LA(1);

                         
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA41_8 = input.LA(1);

                         
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA41_9 = input.LA(1);

                         
                        int index41_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\14\uffff";
    static final String DFA46_eofS =
        "\14\uffff";
    static final String DFA46_minS =
        "\1\25\11\0\2\uffff";
    static final String DFA46_maxS =
        "\1\77\11\0\2\uffff";
    static final String DFA46_acceptS =
        "\12\uffff\1\1\1\2";
    static final String DFA46_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\1\42\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "748:1: interfaceMethodOrFieldDecl returns [TypeElement element] : (cst= interfaceConstant | m= interfaceMethod );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_1 = input.LA(1);

                         
                        int index46_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_2 = input.LA(1);

                         
                        int index46_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA46_3 = input.LA(1);

                         
                        int index46_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA46_4 = input.LA(1);

                         
                        int index46_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA46_5 = input.LA(1);

                         
                        int index46_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA46_6 = input.LA(1);

                         
                        int index46_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA46_7 = input.LA(1);

                         
                        int index46_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA46_8 = input.LA(1);

                         
                        int index46_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA46_9 = input.LA(1);

                         
                        int index46_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA82_eotS =
        "\16\uffff";
    static final String DFA82_eofS =
        "\16\uffff";
    static final String DFA82_minS =
        "\1\25\13\0\2\uffff";
    static final String DFA82_maxS =
        "\1\111\13\0\2\uffff";
    static final String DFA82_acceptS =
        "\14\uffff\1\1\1\2";
    static final String DFA82_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\3\15\uffff\1\1\24\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1"+
            "\13\11\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "1005:1: formalParameterDecls returns [List<FormalParameter> element] : (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? | modss= variableModifiers tt= type '...' idd= variableDeclaratorId );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_1 = input.LA(1);

                         
                        int index82_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index82_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA82_2 = input.LA(1);

                         
                        int index82_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index82_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA82_3 = input.LA(1);

                         
                        int index82_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index82_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA82_4 = input.LA(1);

                         
                        int index82_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index82_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA82_5 = input.LA(1);

                         
                        int index82_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index82_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA82_6 = input.LA(1);

                         
                        int index82_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index82_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA82_7 = input.LA(1);

                         
                        int index82_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index82_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA82_8 = input.LA(1);

                         
                        int index82_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index82_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA82_9 = input.LA(1);

                         
                        int index82_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index82_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA82_10 = input.LA(1);

                         
                        int index82_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index82_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA82_11 = input.LA(1);

                         
                        int index82_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index82_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA83_eotS =
        "\71\uffff";
    static final String DFA83_eofS =
        "\71\uffff";
    static final String DFA83_minS =
        "\1\6\1\uffff\27\0\40\uffff";
    static final String DFA83_maxS =
        "\1\161\1\uffff\27\0\40\uffff";
    static final String DFA83_acceptS =
        "\1\uffff\1\1\27\uffff\1\2\37\uffff";
    static final String DFA83_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\40\uffff}>";
    static final String[] DFA83_transitionS = {
            "\1\5\1\7\1\6\2\uffff\1\10\1\uffff\1\11\1\12\2\uffff\2\31\2"+
            "\uffff\1\17\4\uffff\1\31\1\uffff\1\31\2\uffff\7\31\2\uffff\1"+
            "\1\3\uffff\3\31\1\20\5\uffff\1\31\2\uffff\1\21\1\22\1\23\1\24"+
            "\1\25\1\26\1\27\1\30\1\uffff\1\4\1\3\2\uffff\1\2\1\15\1\13\1"+
            "\14\1\31\2\uffff\1\31\1\uffff\4\31\1\uffff\5\31\21\uffff\2\31"+
            "\2\uffff\4\31\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "1031:10: (inv= explicitConstructorInvocation )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_2 = input.LA(1);

                         
                        int index83_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA83_3 = input.LA(1);

                         
                        int index83_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA83_4 = input.LA(1);

                         
                        int index83_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA83_5 = input.LA(1);

                         
                        int index83_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA83_6 = input.LA(1);

                         
                        int index83_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA83_7 = input.LA(1);

                         
                        int index83_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA83_8 = input.LA(1);

                         
                        int index83_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA83_9 = input.LA(1);

                         
                        int index83_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA83_10 = input.LA(1);

                         
                        int index83_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA83_11 = input.LA(1);

                         
                        int index83_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA83_12 = input.LA(1);

                         
                        int index83_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA83_13 = input.LA(1);

                         
                        int index83_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA83_14 = input.LA(1);

                         
                        int index83_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA83_15 = input.LA(1);

                         
                        int index83_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA83_16 = input.LA(1);

                         
                        int index83_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA83_17 = input.LA(1);

                         
                        int index83_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA83_18 = input.LA(1);

                         
                        int index83_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA83_19 = input.LA(1);

                         
                        int index83_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA83_20 = input.LA(1);

                         
                        int index83_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA83_21 = input.LA(1);

                         
                        int index83_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA83_22 = input.LA(1);

                         
                        int index83_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA83_23 = input.LA(1);

                         
                        int index83_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA83_24 = input.LA(1);

                         
                        int index83_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index83_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA88_eotS =
        "\32\uffff";
    static final String DFA88_eofS =
        "\32\uffff";
    static final String DFA88_minS =
        "\1\6\2\0\27\uffff";
    static final String DFA88_maxS =
        "\1\161\2\0\27\uffff";
    static final String DFA88_acceptS =
        "\3\uffff\1\2\25\uffff\1\1";
    static final String DFA88_specialS =
        "\1\uffff\1\0\1\1\27\uffff}>";
    static final String[] DFA88_transitionS = {
            "\3\3\2\uffff\1\3\1\uffff\2\3\6\uffff\1\3\22\uffff\1\1\6\uffff"+
            "\1\3\10\uffff\10\3\1\uffff\2\3\2\uffff\1\2\3\3\50\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "1035:1: explicitConstructorInvocation returns [MethodInvocation element] : ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' | (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_1 = input.LA(1);

                         
                        int index88_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 25;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index88_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA88_2 = input.LA(1);

                         
                        int index88_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 25;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index88_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA111_eotS =
        "\70\uffff";
    static final String DFA111_eofS =
        "\70\uffff";
    static final String DFA111_minS =
        "\1\6\13\0\54\uffff";
    static final String DFA111_maxS =
        "\1\161\13\0\54\uffff";
    static final String DFA111_acceptS =
        "\14\uffff\1\2\10\uffff\1\3\41\uffff\1\1";
    static final String DFA111_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\54\uffff}>";
    static final String[] DFA111_transitionS = {
            "\3\25\2\uffff\1\25\1\uffff\2\25\2\uffff\1\14\1\25\2\uffff\1"+
            "\3\4\uffff\1\25\1\uffff\1\14\2\uffff\4\14\1\1\2\14\6\uffff\1"+
            "\25\1\uffff\1\14\1\25\5\uffff\1\25\2\uffff\1\4\1\5\1\6\1\7\1"+
            "\10\1\11\1\12\1\13\1\uffff\2\25\2\uffff\4\25\1\2\2\uffff\1\25"+
            "\1\uffff\4\25\1\uffff\5\25\21\uffff\2\25\2\uffff\5\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "1181:1: blockStatement returns [Statement element] : (local= localVariableDeclarationStatement | cd= classOrInterfaceDeclaration | stat= statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_1 = input.LA(1);

                         
                        int index111_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_JavaP()) ) {s = 55;}

                        else if ( (synpred145_JavaP()) ) {s = 12;}

                         
                        input.seek(index111_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_JavaP()) ) {s = 55;}

                        else if ( (synpred145_JavaP()) ) {s = 12;}

                         
                        input.seek(index111_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA111_3 = input.LA(1);

                         
                        int index111_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_JavaP()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA111_4 = input.LA(1);

                         
                        int index111_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_JavaP()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA111_5 = input.LA(1);

                         
                        int index111_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_JavaP()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA111_6 = input.LA(1);

                         
                        int index111_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_JavaP()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA111_7 = input.LA(1);

                         
                        int index111_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_JavaP()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA111_8 = input.LA(1);

                         
                        int index111_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_JavaP()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA111_9 = input.LA(1);

                         
                        int index111_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_JavaP()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA111_10 = input.LA(1);

                         
                        int index111_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_JavaP()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA111_11 = input.LA(1);

                         
                        int index111_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_JavaP()) ) {s = 55;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index111_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA119_eotS =
        "\22\uffff";
    static final String DFA119_eofS =
        "\22\uffff";
    static final String DFA119_minS =
        "\1\6\17\uffff\1\32\1\uffff";
    static final String DFA119_maxS =
        "\1\161\17\uffff\1\156\1\uffff";
    static final String DFA119_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\uffff\1\20";
    static final String DFA119_specialS =
        "\22\uffff}>";
    static final String[] DFA119_transitionS = {
            "\3\17\2\uffff\1\17\1\uffff\2\17\3\uffff\1\2\2\uffff\1\20\4"+
            "\uffff\1\16\21\uffff\1\1\2\uffff\1\17\5\uffff\1\11\2\uffff\10"+
            "\17\1\uffff\2\17\2\uffff\4\17\3\uffff\1\3\1\uffff\1\4\1\5\1"+
            "\6\1\7\1\uffff\1\10\1\12\1\13\1\14\1\15\21\uffff\2\17\2\uffff"+
            "\5\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\2\uffff\2\17\11\uffff\1\17\1\uffff\2\17\4\uffff\1\17"+
            "\2\uffff\1\17\14\uffff\1\17\1\uffff\1\17\10\uffff\1\21\16\uffff"+
            "\25\17",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "1202:1: statement returns [Statement element] : (bl= block | ASSERT asexpr= expression ( ':' asexprx= expression )? ';' | ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )? | forkey= 'for' '(' forc= forControl ')' forstat= statement | whilkey= 'while' wexs= parExpression wstat= statement | dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';' | trykey= 'try' traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block ) | switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}' | synkey= 'synchronized' synexpr= parExpression synstat= block | retkey= 'return' (retex= expression )? ';' | throwkey= 'throw' threx= expression ';' | breakkey= 'break' (name= identifierRule )? ';' | continuekey= 'continue' (name= identifierRule )? ';' | ';' | stattex= statementExpression ';' | name= identifierRule ':' labstat= statement );";
        }
    }
    static final String DFA127_eotS =
        "\u010c\uffff";
    static final String DFA127_eofS =
        "\u010c\uffff";
    static final String DFA127_minS =
        "\1\6\13\25\25\uffff\14\25\1\6\1\25\1\6\1\32\35\uffff\1\61\1\32"+
        "\1\uffff\1\61\1\32\1\uffff\1\61\1\32\1\uffff\1\61\1\32\1\uffff\1"+
        "\61\1\32\1\uffff\1\61\1\32\1\uffff\1\61\1\32\1\uffff\1\61\1\32\1"+
        "\uffff\55\0\2\uffff\12\0\30\uffff\1\0\1\uffff\1\0\35\uffff\3\0\2"+
        "\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff"+
        "\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff";
    static final String DFA127_maxS =
        "\1\161\1\111\1\25\1\156\10\60\25\uffff\11\60\1\111\1\25\1\111\3"+
        "\161\1\113\35\uffff\1\61\1\113\1\uffff\1\61\1\113\1\uffff\1\61\1"+
        "\113\1\uffff\1\61\1\113\1\uffff\1\61\1\113\1\uffff\1\61\1\113\1"+
        "\uffff\1\61\1\113\1\uffff\1\61\1\113\1\uffff\55\0\2\uffff\12\0\30"+
        "\uffff\1\0\1\uffff\1\0\35\uffff\3\0\2\uffff\4\0\2\uffff\4\0\2\uffff"+
        "\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0"+
        "\2\uffff";
    static final String DFA127_acceptS =
        "\14\uffff\1\2\u00cd\uffff\1\1\61\uffff";
    static final String DFA127_specialS =
        "\146\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\2\uffff\1\55\1\56\1\57\1\60"+
        "\1\61\1\62\1\63\1\64\1\65\1\66\30\uffff\1\67\1\uffff\1\70\35\uffff"+
        "\1\71\1\72\1\73\2\uffff\1\74\1\75\1\76\1\77\2\uffff\1\100\1\101"+
        "\1\102\1\103\2\uffff\1\104\1\105\1\106\1\107\2\uffff\1\110\1\111"+
        "\1\112\1\113\2\uffff\1\114\1\115\1\116\1\117\2\uffff\1\120\1\121"+
        "\1\122\1\123\2\uffff\1\124\1\125\1\126\1\127\2\uffff\1\130\1\131"+
        "\1\132\1\133\2\uffff}>";
    static final String[] DFA127_transitionS = {
            "\3\14\2\uffff\1\14\1\uffff\2\14\6\uffff\1\3\4\uffff\1\14\10"+
            "\uffff\1\1\13\uffff\1\14\10\uffff\1\4\1\5\1\6\1\7\1\10\1\11"+
            "\1\12\1\13\1\uffff\2\14\2\uffff\4\14\1\2\37\uffff\2\14\2\uffff"+
            "\5\14",
            "\1\41\15\uffff\1\52\24\uffff\1\42\1\43\1\44\1\45\1\46\1\47"+
            "\1\50\1\51\11\uffff\1\53",
            "\1\54",
            "\1\60\4\uffff\1\14\2\uffff\1\56\1\14\11\uffff\1\55\3\14\4"+
            "\uffff\1\57\2\uffff\1\14\14\uffff\1\14\1\uffff\1\14\27\uffff"+
            "\25\14",
            "\1\117\7\uffff\1\14\22\uffff\1\116",
            "\1\122\7\uffff\1\14\22\uffff\1\121",
            "\1\125\7\uffff\1\14\22\uffff\1\124",
            "\1\130\7\uffff\1\14\22\uffff\1\127",
            "\1\133\7\uffff\1\14\22\uffff\1\132",
            "\1\136\7\uffff\1\14\22\uffff\1\135",
            "\1\141\7\uffff\1\14\22\uffff\1\140",
            "\1\144\7\uffff\1\14\22\uffff\1\143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\151\7\uffff\1\147\12\uffff\1\146\7\uffff\1\150",
            "\1\153\32\uffff\1\152",
            "\1\155\32\uffff\1\154",
            "\1\157\32\uffff\1\156",
            "\1\161\32\uffff\1\160",
            "\1\163\32\uffff\1\162",
            "\1\165\32\uffff\1\164",
            "\1\167\32\uffff\1\166",
            "\1\171\32\uffff\1\170",
            "\1\172\15\uffff\1\u0083\24\uffff\1\173\1\174\1\175\1\176\1"+
            "\177\1\u0080\1\u0081\1\u0082\11\uffff\1\u0084",
            "\1\u0085",
            "\1\u0088\7\uffff\1\u0086\5\uffff\1\u0091\24\uffff\1\u0089"+
            "\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\2\uffff"+
            "\1\u0087\6\uffff\1\u0092",
            "\3\14\2\uffff\1\14\1\uffff\2\14\6\uffff\1\u0095\22\uffff\1"+
            "\14\6\uffff\1\14\3\uffff\1\14\4\uffff\1\u0096\1\u0097\1\u0098"+
            "\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\2\14\2\uffff"+
            "\4\14\40\uffff\2\14\2\uffff\5\14",
            "\1\u00b7\17\uffff\1\14\2\uffff\1\14\30\uffff\1\14\3\uffff"+
            "\1\14\53\uffff\1\14",
            "\3\14\2\uffff\1\14\1\uffff\2\14\6\uffff\1\14\31\uffff\1\14"+
            "\1\uffff\1\u00b9\6\uffff\10\14\1\uffff\2\14\2\uffff\4\14\40"+
            "\uffff\2\14\2\uffff\5\14",
            "\1\14\16\uffff\1\u00d9\6\uffff\1\u00d7\2\uffff\1\u00d8\27"+
            "\uffff\1\u00da",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00dc",
            "\1\14\16\uffff\1\u00df\6\uffff\1\u00dd\2\uffff\1\u00de\27"+
            "\uffff\1\u00da",
            "",
            "\1\u00e2",
            "\1\14\16\uffff\1\u00e5\6\uffff\1\u00e3\2\uffff\1\u00e4\27"+
            "\uffff\1\u00da",
            "",
            "\1\u00e8",
            "\1\14\16\uffff\1\u00eb\6\uffff\1\u00e9\2\uffff\1\u00ea\27"+
            "\uffff\1\u00da",
            "",
            "\1\u00ee",
            "\1\14\16\uffff\1\u00f1\6\uffff\1\u00ef\2\uffff\1\u00f0\27"+
            "\uffff\1\u00da",
            "",
            "\1\u00f4",
            "\1\14\16\uffff\1\u00f7\6\uffff\1\u00f5\2\uffff\1\u00f6\27"+
            "\uffff\1\u00da",
            "",
            "\1\u00fa",
            "\1\14\16\uffff\1\u00fd\6\uffff\1\u00fb\2\uffff\1\u00fc\27"+
            "\uffff\1\u00da",
            "",
            "\1\u0100",
            "\1\14\16\uffff\1\u0103\6\uffff\1\u0101\2\uffff\1\u0102\27"+
            "\uffff\1\u00da",
            "",
            "\1\u0106",
            "\1\14\16\uffff\1\u0109\6\uffff\1\u0107\2\uffff\1\u0108\27"+
            "\uffff\1\u00da",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "1306:1: forControl returns [ForControl element] options {k=3; } : (enh= enhancedForControl | (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_102 = input.LA(1);

                         
                        int index127_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_102);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA127_103 = input.LA(1);

                         
                        int index127_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_103);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA127_104 = input.LA(1);

                         
                        int index127_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_104);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA127_105 = input.LA(1);

                         
                        int index127_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_105);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA127_106 = input.LA(1);

                         
                        int index127_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_106);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA127_107 = input.LA(1);

                         
                        int index127_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_107);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA127_108 = input.LA(1);

                         
                        int index127_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_108);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA127_109 = input.LA(1);

                         
                        int index127_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_109);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA127_110 = input.LA(1);

                         
                        int index127_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_110);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA127_111 = input.LA(1);

                         
                        int index127_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_111);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA127_112 = input.LA(1);

                         
                        int index127_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_112);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA127_113 = input.LA(1);

                         
                        int index127_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_113);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA127_114 = input.LA(1);

                         
                        int index127_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_114);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA127_115 = input.LA(1);

                         
                        int index127_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_115);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA127_116 = input.LA(1);

                         
                        int index127_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_116);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA127_117 = input.LA(1);

                         
                        int index127_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_117);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA127_118 = input.LA(1);

                         
                        int index127_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_118);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA127_119 = input.LA(1);

                         
                        int index127_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_119);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA127_120 = input.LA(1);

                         
                        int index127_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_120);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA127_121 = input.LA(1);

                         
                        int index127_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_121);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA127_122 = input.LA(1);

                         
                        int index127_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_122);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA127_123 = input.LA(1);

                         
                        int index127_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_123);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA127_124 = input.LA(1);

                         
                        int index127_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_124);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA127_125 = input.LA(1);

                         
                        int index127_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_125);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA127_126 = input.LA(1);

                         
                        int index127_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_126);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA127_127 = input.LA(1);

                         
                        int index127_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_127);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA127_128 = input.LA(1);

                         
                        int index127_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_128);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA127_129 = input.LA(1);

                         
                        int index127_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_129);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA127_130 = input.LA(1);

                         
                        int index127_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_130);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA127_131 = input.LA(1);

                         
                        int index127_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_131);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA127_132 = input.LA(1);

                         
                        int index127_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_132);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA127_133 = input.LA(1);

                         
                        int index127_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_133);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA127_134 = input.LA(1);

                         
                        int index127_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_134);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA127_135 = input.LA(1);

                         
                        int index127_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_135);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA127_136 = input.LA(1);

                         
                        int index127_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_136);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA127_137 = input.LA(1);

                         
                        int index127_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_137);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA127_138 = input.LA(1);

                         
                        int index127_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_138);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA127_139 = input.LA(1);

                         
                        int index127_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_139);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA127_140 = input.LA(1);

                         
                        int index127_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_140);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA127_141 = input.LA(1);

                         
                        int index127_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_141);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA127_142 = input.LA(1);

                         
                        int index127_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_142);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA127_143 = input.LA(1);

                         
                        int index127_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_143);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA127_144 = input.LA(1);

                         
                        int index127_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_144);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA127_145 = input.LA(1);

                         
                        int index127_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_145);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA127_146 = input.LA(1);

                         
                        int index127_146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_146);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA127_149 = input.LA(1);

                         
                        int index127_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_149);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA127_150 = input.LA(1);

                         
                        int index127_150 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_150);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA127_151 = input.LA(1);

                         
                        int index127_151 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_151);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA127_152 = input.LA(1);

                         
                        int index127_152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_152);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA127_153 = input.LA(1);

                         
                        int index127_153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_153);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA127_154 = input.LA(1);

                         
                        int index127_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_154);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA127_155 = input.LA(1);

                         
                        int index127_155 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_155);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA127_156 = input.LA(1);

                         
                        int index127_156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_156);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA127_157 = input.LA(1);

                         
                        int index127_157 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_157);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA127_158 = input.LA(1);

                         
                        int index127_158 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_158);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA127_183 = input.LA(1);

                         
                        int index127_183 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_183);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA127_185 = input.LA(1);

                         
                        int index127_185 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_185);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA127_215 = input.LA(1);

                         
                        int index127_215 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_215);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA127_216 = input.LA(1);

                         
                        int index127_216 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_216);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA127_217 = input.LA(1);

                         
                        int index127_217 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_217);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA127_220 = input.LA(1);

                         
                        int index127_220 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_220);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA127_221 = input.LA(1);

                         
                        int index127_221 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_221);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA127_222 = input.LA(1);

                         
                        int index127_222 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_222);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA127_223 = input.LA(1);

                         
                        int index127_223 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_223);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA127_226 = input.LA(1);

                         
                        int index127_226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_226);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA127_227 = input.LA(1);

                         
                        int index127_227 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_227);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA127_228 = input.LA(1);

                         
                        int index127_228 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_228);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA127_229 = input.LA(1);

                         
                        int index127_229 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_229);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA127_232 = input.LA(1);

                         
                        int index127_232 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_232);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA127_233 = input.LA(1);

                         
                        int index127_233 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_233);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA127_234 = input.LA(1);

                         
                        int index127_234 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_234);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA127_235 = input.LA(1);

                         
                        int index127_235 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_235);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA127_238 = input.LA(1);

                         
                        int index127_238 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_238);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA127_239 = input.LA(1);

                         
                        int index127_239 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_239);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA127_240 = input.LA(1);

                         
                        int index127_240 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_240);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA127_241 = input.LA(1);

                         
                        int index127_241 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_241);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA127_244 = input.LA(1);

                         
                        int index127_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_244);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA127_245 = input.LA(1);

                         
                        int index127_245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_245);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA127_246 = input.LA(1);

                         
                        int index127_246 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_246);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA127_247 = input.LA(1);

                         
                        int index127_247 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_247);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA127_250 = input.LA(1);

                         
                        int index127_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_250);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA127_251 = input.LA(1);

                         
                        int index127_251 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_251);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA127_252 = input.LA(1);

                         
                        int index127_252 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_252);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA127_253 = input.LA(1);

                         
                        int index127_253 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_253);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA127_256 = input.LA(1);

                         
                        int index127_256 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_256);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA127_257 = input.LA(1);

                         
                        int index127_257 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_257);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA127_258 = input.LA(1);

                         
                        int index127_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_258);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA127_259 = input.LA(1);

                         
                        int index127_259 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_259);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA127_262 = input.LA(1);

                         
                        int index127_262 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_262);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA127_263 = input.LA(1);

                         
                        int index127_263 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_263);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA127_264 = input.LA(1);

                         
                        int index127_264 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_264);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA127_265 = input.LA(1);

                         
                        int index127_265 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_JavaP()) ) {s = 218;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_265);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA128_eotS =
        "\40\uffff";
    static final String DFA128_eofS =
        "\40\uffff";
    static final String DFA128_minS =
        "\1\6\2\uffff\11\0\24\uffff";
    static final String DFA128_maxS =
        "\1\161\2\uffff\11\0\24\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\1\12\uffff\1\2\23\uffff";
    static final String DFA128_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\24\uffff}>";
    static final String[] DFA128_transitionS = {
            "\3\14\2\uffff\1\14\1\uffff\2\14\6\uffff\1\3\15\uffff\1\1\13"+
            "\uffff\1\14\10\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff"+
            "\2\14\2\uffff\4\14\1\1\37\uffff\2\14\2\uffff\5\14",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "1313:1: forInit returns [ForInit element] : (local= localVariableDeclaration | el= expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA128_3 = input.LA(1);

                         
                        int index128_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA128_4 = input.LA(1);

                         
                        int index128_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA128_5 = input.LA(1);

                         
                        int index128_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA128_6 = input.LA(1);

                         
                        int index128_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA128_7 = input.LA(1);

                         
                        int index128_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA128_8 = input.LA(1);

                         
                        int index128_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA128_9 = input.LA(1);

                         
                        int index128_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA128_10 = input.LA(1);

                         
                        int index128_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA128_11 = input.LA(1);

                         
                        int index128_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred178_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index128_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA130_eotS =
        "\16\uffff";
    static final String DFA130_eofS =
        "\1\14\15\uffff";
    static final String DFA130_minS =
        "\1\32\13\0\2\uffff";
    static final String DFA130_maxS =
        "\1\141\13\0\2\uffff";
    static final String DFA130_acceptS =
        "\14\uffff\1\2\1\1";
    static final String DFA130_specialS =
        "\1\uffff\1\1\1\11\1\7\1\4\1\0\1\12\1\10\1\6\1\3\1\2\1\5\2\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\14\15\uffff\1\12\1\14\1\13\2\uffff\1\14\3\uffff\1\14\1\uffff"+
            "\1\1\17\uffff\1\14\7\uffff\1\14\16\uffff\1\2\1\3\1\4\1\5\1\6"+
            "\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "1361:63: (op= assignmentOperator exx= expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA130_5 = input.LA(1);

                         
                        int index130_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA130_1 = input.LA(1);

                         
                        int index130_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA130_10 = input.LA(1);

                         
                        int index130_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA130_9 = input.LA(1);

                         
                        int index130_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA130_4 = input.LA(1);

                         
                        int index130_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA130_11 = input.LA(1);

                         
                        int index130_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA130_8 = input.LA(1);

                         
                        int index130_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA130_3 = input.LA(1);

                         
                        int index130_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA130_7 = input.LA(1);

                         
                        int index130_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA130_2 = input.LA(1);

                         
                        int index130_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_2);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA130_6 = input.LA(1);

                         
                        int index130_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index130_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\17\uffff";
    static final String DFA131_eofS =
        "\17\uffff";
    static final String DFA131_minS =
        "\1\50\12\uffff\2\52\2\uffff";
    static final String DFA131_maxS =
        "\1\141\12\uffff\1\52\1\63\2\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA131_specialS =
        "\1\0\13\uffff\1\1\2\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\12\1\uffff\1\13\10\uffff\1\1\46\uffff\1\2\1\3\1\4\1\5\1"+
            "\6\1\7\1\10\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14",
            "\1\15\10\uffff\1\16",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "1375:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_0 = input.LA(1);

                         
                        int index131_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA131_0==51) ) {s = 1;}

                        else if ( (LA131_0==90) ) {s = 2;}

                        else if ( (LA131_0==91) ) {s = 3;}

                        else if ( (LA131_0==92) ) {s = 4;}

                        else if ( (LA131_0==93) ) {s = 5;}

                        else if ( (LA131_0==94) ) {s = 6;}

                        else if ( (LA131_0==95) ) {s = 7;}

                        else if ( (LA131_0==96) ) {s = 8;}

                        else if ( (LA131_0==97) ) {s = 9;}

                        else if ( (LA131_0==40) && (synpred190_JavaP())) {s = 10;}

                        else if ( (LA131_0==42) ) {s = 11;}

                         
                        input.seek(index131_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA131_12 = input.LA(1);

                         
                        int index131_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA131_12==42) && (synpred191_JavaP())) {s = 13;}

                        else if ( (LA131_12==51) && (synpred192_JavaP())) {s = 14;}

                         
                        input.seek(index131_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\42\uffff";
    static final String DFA144_eofS =
        "\42\uffff";
    static final String DFA144_minS =
        "\1\50\1\uffff\1\52\1\6\36\uffff";
    static final String DFA144_maxS =
        "\1\52\1\uffff\1\52\1\161\36\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\35\3";
    static final String DFA144_specialS =
        "\1\0\2\uffff\1\1\36\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\1\1\uffff\1\2",
            "",
            "\1\3",
            "\1\16\1\20\1\17\2\uffff\1\21\1\uffff\1\22\1\23\6\uffff\1\30"+
            "\24\uffff\1\4\4\uffff\1\31\10\uffff\1\32\1\33\1\34\1\35\1\36"+
            "\1\37\1\40\1\41\1\uffff\1\15\1\13\2\uffff\1\14\1\26\1\24\1\25"+
            "\40\uffff\1\5\1\6\2\uffff\1\7\1\10\1\11\1\12\1\27",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "1508:1: shiftOp : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA144_0 = input.LA(1);

                         
                        int index144_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA144_0==40) && (synpred207_JavaP())) {s = 1;}

                        else if ( (LA144_0==42) ) {s = 2;}

                         
                        input.seek(index144_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA144_3 = input.LA(1);

                         
                        int index144_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA144_3==42) && (synpred208_JavaP())) {s = 4;}

                        else if ( (LA144_3==105) && (synpred209_JavaP())) {s = 5;}

                        else if ( (LA144_3==106) && (synpred209_JavaP())) {s = 6;}

                        else if ( (LA144_3==109) && (synpred209_JavaP())) {s = 7;}

                        else if ( (LA144_3==110) && (synpred209_JavaP())) {s = 8;}

                        else if ( (LA144_3==111) && (synpred209_JavaP())) {s = 9;}

                        else if ( (LA144_3==112) && (synpred209_JavaP())) {s = 10;}

                        else if ( (LA144_3==66) && (synpred209_JavaP())) {s = 11;}

                        else if ( (LA144_3==69) && (synpred209_JavaP())) {s = 12;}

                        else if ( (LA144_3==65) && (synpred209_JavaP())) {s = 13;}

                        else if ( (LA144_3==HexLiteral) && (synpred209_JavaP())) {s = 14;}

                        else if ( (LA144_3==OctalLiteral) && (synpred209_JavaP())) {s = 15;}

                        else if ( (LA144_3==DecimalLiteral) && (synpred209_JavaP())) {s = 16;}

                        else if ( (LA144_3==FloatingPointLiteral) && (synpred209_JavaP())) {s = 17;}

                        else if ( (LA144_3==CharacterLiteral) && (synpred209_JavaP())) {s = 18;}

                        else if ( (LA144_3==StringLiteral) && (synpred209_JavaP())) {s = 19;}

                        else if ( (LA144_3==71) && (synpred209_JavaP())) {s = 20;}

                        else if ( (LA144_3==72) && (synpred209_JavaP())) {s = 21;}

                        else if ( (LA144_3==70) && (synpred209_JavaP())) {s = 22;}

                        else if ( (LA144_3==113) && (synpred209_JavaP())) {s = 23;}

                        else if ( (LA144_3==Identifier) && (synpred209_JavaP())) {s = 24;}

                        else if ( (LA144_3==47) && (synpred209_JavaP())) {s = 25;}

                        else if ( (LA144_3==56) && (synpred209_JavaP())) {s = 26;}

                        else if ( (LA144_3==57) && (synpred209_JavaP())) {s = 27;}

                        else if ( (LA144_3==58) && (synpred209_JavaP())) {s = 28;}

                        else if ( (LA144_3==59) && (synpred209_JavaP())) {s = 29;}

                        else if ( (LA144_3==60) && (synpred209_JavaP())) {s = 30;}

                        else if ( (LA144_3==61) && (synpred209_JavaP())) {s = 31;}

                        else if ( (LA144_3==62) && (synpred209_JavaP())) {s = 32;}

                        else if ( (LA144_3==63) && (synpred209_JavaP())) {s = 33;}

                         
                        input.seek(index144_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA152_eotS =
        "\33\uffff";
    static final String DFA152_eofS =
        "\33\uffff";
    static final String DFA152_minS =
        "\1\6\2\uffff\1\0\27\uffff";
    static final String DFA152_maxS =
        "\1\161\2\uffff\1\0\27\uffff";
    static final String DFA152_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\25\uffff\1\3";
    static final String DFA152_specialS =
        "\3\uffff\1\0\27\uffff}>";
    static final String[] DFA152_transitionS = {
            "\3\4\2\uffff\1\4\1\uffff\2\4\6\uffff\1\4\31\uffff\1\4\10\uffff"+
            "\10\4\1\uffff\1\4\1\3\2\uffff\4\4\46\uffff\1\1\1\2\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "1559:1: unaryExpressionNotPlusMinus returns [Expression element] : (a= '~' ex= unaryExpression | b= '!' exx= unaryExpression | castex= castExpression | prim= primary (sel= selector )* (c= '++' | d= '--' )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA152_3 = input.LA(1);

                         
                        int index152_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_JavaP()) ) {s = 26;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index152_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA156_eotS =
        "\31\uffff";
    static final String DFA156_eofS =
        "\31\uffff";
    static final String DFA156_minS =
        "\1\6\15\uffff\1\0\12\uffff";
    static final String DFA156_maxS =
        "\1\161\15\uffff\1\0\12\uffff";
    static final String DFA156_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\10\uffff\1\5\1\uffff\1\7\1\10\7\uffff"+
        "\1\6";
    static final String DFA156_specialS =
        "\16\uffff\1\0\12\uffff}>";
    static final String[] DFA156_transitionS = {
            "\3\4\2\uffff\1\4\1\uffff\2\4\6\uffff\1\16\31\uffff\1\17\10"+
            "\uffff\10\20\1\uffff\1\3\1\1\2\uffff\1\2\3\4\50\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "1648:1: primary returns [Expression element] : (parex= parExpression | rubex= identifierSuffixRubbush | skw= 'super' supsuf= superSuffix | nt= nonTargetPrimary | nkw= 'new' cr= creator | morerubex= moreidentifierRuleSuffixRubbish | vt= voidType '.' clkw= 'class' | tref= type '.' clkww= 'class' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_14 = input.LA(1);

                         
                        int index156_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_JavaP()) ) {s = 24;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index156_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\55\uffff";
    static final String DFA159_eofS =
        "\1\4\54\uffff";
    static final String DFA159_minS =
        "\1\32\1\0\1\uffff\1\0\51\uffff";
    static final String DFA159_maxS =
        "\1\156\1\0\1\uffff\1\0\51\uffff";
    static final String DFA159_acceptS =
        "\2\uffff\1\3\1\uffff\1\11\41\uffff\1\1\1\2\1\4\1\5\1\6\1\7\1\10";
    static final String DFA159_specialS =
        "\1\uffff\1\0\1\uffff\1\1\51\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\4\2\uffff\1\3\1\4\11\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\14\uffff\1\4\1\uffff\1\2\1\4\7\uffff\1\4\16\uffff"+
            "\25\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "1708:1: ( ( '[' ']' )+ '.' 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_1 = input.LA(1);

                         
                        int index159_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_JavaP()) ) {s = 38;}

                        else if ( (synpred241_JavaP()) ) {s = 39;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA159_3 = input.LA(1);

                         
                        int index159_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_JavaP()) ) {s = 40;}

                        else if ( (synpred244_JavaP()) ) {s = 41;}

                        else if ( (synpred245_JavaP()) ) {s = 42;}

                        else if ( (synpred246_JavaP()) ) {s = 43;}

                        else if ( (synpred247_JavaP()) ) {s = 44;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA161_eotS =
        "\53\uffff";
    static final String DFA161_eofS =
        "\1\4\52\uffff";
    static final String DFA161_minS =
        "\1\32\1\0\1\uffff\1\0\47\uffff";
    static final String DFA161_maxS =
        "\1\156\1\0\1\uffff\1\0\47\uffff";
    static final String DFA161_acceptS =
        "\2\uffff\1\2\1\uffff\1\7\41\uffff\1\1\1\3\1\4\1\5\1\6";
    static final String DFA161_specialS =
        "\1\uffff\1\0\1\uffff\1\1\47\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\4\2\uffff\1\3\1\4\11\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\14\uffff\1\4\1\uffff\1\2\1\4\7\uffff\1\4\16\uffff"+
            "\25\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "1743:4: (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_1 = input.LA(1);

                         
                        int index161_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_JavaP()) ) {s = 38;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA161_3 = input.LA(1);

                         
                        int index161_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_JavaP()) ) {s = 39;}

                        else if ( (synpred252_JavaP()) ) {s = 40;}

                        else if ( (synpred253_JavaP()) ) {s = 41;}

                        else if ( (synpred254_JavaP()) ) {s = 42;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA162_eotS =
        "\46\uffff";
    static final String DFA162_eofS =
        "\1\1\45\uffff";
    static final String DFA162_minS =
        "\1\32\1\uffff\1\0\43\uffff";
    static final String DFA162_maxS =
        "\1\156\1\uffff\1\0\43\uffff";
    static final String DFA162_acceptS =
        "\1\uffff\1\2\43\uffff\1\1";
    static final String DFA162_specialS =
        "\2\uffff\1\0\43\uffff}>";
    static final String[] DFA162_transitionS = {
            "\1\1\2\uffff\2\1\11\uffff\4\1\1\uffff\1\1\2\uffff\1\2\1\1\1"+
            "\uffff\1\1\14\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\25"+
            "\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1775:10: (open= '[' arrex= expression close= ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA162_2 = input.LA(1);

                         
                        int index162_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_JavaP()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index162_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 162, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\16\uffff";
    static final String DFA166_eofS =
        "\16\uffff";
    static final String DFA166_minS =
        "\1\25\1\uffff\11\0\3\uffff";
    static final String DFA166_maxS =
        "\1\77\1\uffff\11\0\3\uffff";
    static final String DFA166_acceptS =
        "\1\uffff\1\1\11\uffff\1\2\1\3\1\4";
    static final String DFA166_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\3\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\2\22\uffff\1\1\17\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1"+
            "\12",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "1785:1: creator returns [Expression element] : (targs= nonWildcardTypeArguments tx= createdName restx= classCreatorRest | tt= createdName ( '[' ']' )+ init= arrayInitializer | ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* | t= createdName rest= classCreatorRest );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_2 = input.LA(1);

                         
                        int index166_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_JavaP()) ) {s = 11;}

                        else if ( (synpred261_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index166_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA166_3 = input.LA(1);

                         
                        int index166_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_JavaP()) ) {s = 11;}

                        else if ( (synpred261_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index166_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA166_4 = input.LA(1);

                         
                        int index166_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_JavaP()) ) {s = 11;}

                        else if ( (synpred261_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index166_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA166_5 = input.LA(1);

                         
                        int index166_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_JavaP()) ) {s = 11;}

                        else if ( (synpred261_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index166_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA166_6 = input.LA(1);

                         
                        int index166_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_JavaP()) ) {s = 11;}

                        else if ( (synpred261_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index166_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA166_7 = input.LA(1);

                         
                        int index166_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_JavaP()) ) {s = 11;}

                        else if ( (synpred261_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index166_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA166_8 = input.LA(1);

                         
                        int index166_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_JavaP()) ) {s = 11;}

                        else if ( (synpred261_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index166_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA166_9 = input.LA(1);

                         
                        int index166_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_JavaP()) ) {s = 11;}

                        else if ( (synpred261_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index166_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA166_10 = input.LA(1);

                         
                        int index166_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_JavaP()) ) {s = 11;}

                        else if ( (synpred261_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index166_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA164_eotS =
        "\46\uffff";
    static final String DFA164_eofS =
        "\1\2\45\uffff";
    static final String DFA164_minS =
        "\1\32\1\0\44\uffff";
    static final String DFA164_maxS =
        "\1\156\1\0\44\uffff";
    static final String DFA164_acceptS =
        "\2\uffff\1\2\42\uffff\1\1";
    static final String DFA164_specialS =
        "\1\uffff\1\0\44\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\4\2\1\uffff\1\2\2\uffff\1\1\1\2\1"+
            "\uffff\1\2\14\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\25"+
            "\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1798:11: ( '[' exx= expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_1 = input.LA(1);

                         
                        int index164_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_JavaP()) ) {s = 37;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index164_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_Identifier_in_identifierRule103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_compilationUnit141 = new BitSet(new long[]{0x0000403F92020000L,0x0000000000000200L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit157 = new BitSet(new long[]{0x0000403F9E020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit193 = new BitSet(new long[]{0x0000403F9E020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit214 = new BitSet(new long[]{0x0000403F96020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_compilationUnit263 = new BitSet(new long[]{0x0000403F96020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit298 = new BitSet(new long[]{0x0000403F96020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit353 = new BitSet(new long[]{0x0000403F9E020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit402 = new BitSet(new long[]{0x0000403F9E020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit439 = new BitSet(new long[]{0x0000403F96020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_25_in_packageDeclaration487 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration491 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_packageDeclaration493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_importDeclaration533 = new BitSet(new long[]{0x0000000010200000L});
    public static final BitSet FOLLOW_28_in_importDeclaration537 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedName_in_importDeclaration542 = new BitSet(new long[]{0x0000000024000000L});
    public static final BitSet FOLLOW_29_in_importDeclaration566 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_importDeclaration568 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_importDeclaration587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_typeDeclaration629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifiers_in_classOrInterfaceDeclaration669 = new BitSet(new long[]{0x0000403F92020000L,0x0000000000000200L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifier_in_classOrInterfaceModifiers804 = new BitSet(new long[]{0x0000001F90000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_annotation_in_classOrInterfaceModifier837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_classOrInterfaceModifier851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_classOrInterfaceModifier867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_classOrInterfaceModifier880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_classOrInterfaceModifier895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_classOrInterfaceModifier909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_classOrInterfaceModifier925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_classOrInterfaceModifier942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiers977 = new BitSet(new long[]{0x00F0001F90000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration1009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration1023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_normalClassDeclaration1054 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_nameAndParams_in_normalClassDeclaration1058 = new BitSet(new long[]{0x000010C000000000L});
    public static final BitSet FOLLOW_38_in_normalClassDeclaration1073 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration1077 = new BitSet(new long[]{0x000010C000000000L});
    public static final BitSet FOLLOW_39_in_normalClassDeclaration1108 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration1112 = new BitSet(new long[]{0x000010C000000000L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration1142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createClassHereBecauseANTLRisAnnoying_in_nameAndParams1183 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_typeParameters_in_nameAndParams1190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_createClassHereBecauseANTLRisAnnoying1222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_typeParameters1254 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1258 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_41_in_typeParameters1262 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1266 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_42_in_typeParameters1271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_typeParameter1300 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_38_in_typeParameter1306 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_typeBound_in_typeParameter1310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeBound1360 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_typeBound1384 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_type_in_typeBound1388 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration1439 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_enumDeclaration1443 = new BitSet(new long[]{0x0000108000000000L});
    public static final BitSet FOLLOW_39_in_enumDeclaration1466 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration1470 = new BitSet(new long[]{0x0000108000000000L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration1545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_enumBody1575 = new BitSet(new long[]{0x0000220004200000L,0x0000000000000200L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody1580 = new BitSet(new long[]{0x0000220004000000L});
    public static final BitSet FOLLOW_41_in_enumBody1598 = new BitSet(new long[]{0x0000200004000000L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody1604 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_enumBody1610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants1635 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_enumConstants1640 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000200L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants1644 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_annotations_in_enumConstant1674 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_enumConstant1679 = new BitSet(new long[]{0x000010C000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_enumConstant1686 = new BitSet(new long[]{0x000010C000000002L});
    public static final BitSet FOLLOW_classBody_in_enumConstant1695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_enumBodyDeclarations1726 = new BitSet(new long[]{0x00F0101F94000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1733 = new BitSet(new long[]{0x00F0101F94000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_normalInterfaceDeclaration1815 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_normalInterfaceDeclaration1819 = new BitSet(new long[]{0x000011C000000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration1836 = new BitSet(new long[]{0x000010C000000000L});
    public static final BitSet FOLLOW_38_in_normalInterfaceDeclaration1854 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration1858 = new BitSet(new long[]{0x000010C000000000L});
    public static final BitSet FOLLOW_classBody_in_normalInterfaceDeclaration1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList1940 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_typeList1944 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_type_in_typeList1948 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_44_in_classBody1979 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody1986 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_45_in_classBody1992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_interfaceBody2019 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody2039 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_45_in_interfaceBody2087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_classBodyDeclaration2120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_classBodyDeclaration2134 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration2139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_classBodyDeclaration2153 = new BitSet(new long[]{0xFF00C13F92220000L,0x0000000000000200L});
    public static final BitSet FOLLOW_memberDecl_in_classBodyDeclaration2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_memberDecl2196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberDeclaration_in_memberDecl2210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidMethodDeclaration_in_memberDecl2224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructorDeclaration_in_memberDecl2238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl2252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl2266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidType_in_voidMethodDeclaration2305 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_voidMethodDeclaration2309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_voidMethodDeclaration2320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_voidType2350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_constructorDeclaration2391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_constructorDeclaration2422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDeclaration2448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDeclaration2462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl2489 = new BitSet(new long[]{0xFF00800000200000L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl2493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest2538 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_47_in_genericMethodOrConstructorRest2543 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_genericMethodOrConstructorRest2550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest2563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_genericMethodOrConstructorRest2575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest2588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration2618 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_methodDeclaration2622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration2635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration2660 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration2666 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_fieldDeclaration2670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_interfaceBodyDeclaration2703 = new BitSet(new long[]{0xFF00C13F92220000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration2707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_interfaceBodyDeclaration2719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl2744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl2758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaration_in_interfaceMemberDecl2772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceMemberDecl2786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceMemberDecl2800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidType_in_voidInterfaceMethodDeclaration2836 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_voidInterfaceMethodDeclaration2840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_voidInterfaceMethodDeclaration2852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceConstant_in_interfaceMethodOrFieldDecl2886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethod_in_interfaceMethodOrFieldDecl2900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceConstant2936 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_constantDeclarator_in_interfaceConstant2942 = new BitSet(new long[]{0x0000020004000000L});
    public static final BitSet FOLLOW_41_in_interfaceConstant2946 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_constantDeclarator_in_interfaceConstant2950 = new BitSet(new long[]{0x0000020004000000L});
    public static final BitSet FOLLOW_26_in_interfaceConstant2956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceMethod2981 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_interfaceMethod2985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethod2999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest3026 = new BitSet(new long[]{0x0005100014000000L});
    public static final BitSet FOLLOW_48_in_methodDeclaratorRest3052 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_methodDeclaratorRest3054 = new BitSet(new long[]{0x0005100014000000L});
    public static final BitSet FOLLOW_50_in_methodDeclaratorRest3082 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaratorRest3086 = new BitSet(new long[]{0x0000100014000000L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest3106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_methodDeclaratorRest3122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest3169 = new BitSet(new long[]{0x0004100014000000L});
    public static final BitSet FOLLOW_50_in_voidMethodDeclaratorRest3185 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest3189 = new BitSet(new long[]{0x0000100014000000L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest3209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_voidMethodDeclaratorRest3225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest3276 = new BitSet(new long[]{0x0005000004000000L});
    public static final BitSet FOLLOW_48_in_interfaceMethodDeclaratorRest3288 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_interfaceMethodDeclaratorRest3290 = new BitSet(new long[]{0x0005000004000000L});
    public static final BitSet FOLLOW_50_in_interfaceMethodDeclaratorRest3317 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest3321 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_interfaceMethodDeclaratorRest3327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl3363 = new BitSet(new long[]{0xFF00800000200000L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl3366 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_47_in_interfaceGenericMethodDecl3370 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_interfaceGenericMethodDecl3373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl3383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest3408 = new BitSet(new long[]{0x0004000004000000L});
    public static final BitSet FOLLOW_50_in_voidInterfaceMethodDeclaratorRest3418 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest3422 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_voidInterfaceMethodDeclaratorRest3434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest3459 = new BitSet(new long[]{0x0004100000000000L});
    public static final BitSet FOLLOW_50_in_constructorDeclaratorRest3469 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_constructorDeclaratorRest3473 = new BitSet(new long[]{0x0004100000000000L});
    public static final BitSet FOLLOW_constructorBody_in_constructorDeclaratorRest3486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_constantDeclarator3521 = new BitSet(new long[]{0x0009000000000000L});
    public static final BitSet FOLLOW_48_in_constantDeclarator3525 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_constantDeclarator3527 = new BitSet(new long[]{0x0009000000000000L});
    public static final BitSet FOLLOW_51_in_constantDeclarator3533 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclarator3537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators3577 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_variableDeclarators3581 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators3585 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_variableDeclarator3618 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_51_in_variableDeclarator3637 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclarator3641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_variableDeclaratorId3684 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_variableDeclaratorId3687 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_variableDeclaratorId3689 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer3720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer3734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_arrayInitializer3767 = new BitSet(new long[]{0xFF00B000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer3774 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_arrayInitializer3778 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer3782 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_arrayInitializer3788 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_arrayInitializer3795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifier_in_modifier3826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_modifier3838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_modifier3850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_modifier3862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_modifier3874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_enumConstantName3901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_typeName3928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_type3958 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_type3961 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_type3963 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_type3986 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_type3989 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_type3991 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_classOrInterfaceType4020 = new BitSet(new long[]{0x0000010020000002L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType4049 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_29_in_classOrInterfaceType4092 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_classOrInterfaceType4096 = new BitSet(new long[]{0x0000010020000002L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType4125 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_56_in_primitiveType4169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_primitiveType4181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_primitiveType4193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_primitiveType4205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_primitiveType4217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_primitiveType4229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_primitiveType4241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_primitiveType4253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_variableModifier4278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier4290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_typeArguments4317 = new BitSet(new long[]{0xFF00000000200000L,0x0000000000000001L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments4331 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_41_in_typeArguments4344 = new BitSet(new long[]{0xFF00000000200000L,0x0000000000000001L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments4348 = new BitSet(new long[]{0x0000060000000000L});
    public static final BitSet FOLLOW_42_in_typeArguments4363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument4396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_typeArgument4408 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_typeArgument4445 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_65_in_typeArgument4449 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_type_in_typeArgument4466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList4531 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_qualifiedNameList4536 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList4540 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_66_in_formalParameters4571 = new BitSet(new long[]{0xFF00000800200000L,0x0000000000000208L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters4576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_formalParameters4582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameterDecls4611 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls4615 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls4619 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_formalParameterDecls4631 = new BitSet(new long[]{0xFF00000800200000L,0x0000000000000200L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDecls4635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameterDecls4661 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls4665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_formalParameterDecls4667 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls4671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody4716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_constructorBody4741 = new BitSet(new long[]{0xFF20F13F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_constructorBody4758 = new BitSet(new long[]{0xFF20F03F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_blockStatement_in_constructorBody4777 = new BitSet(new long[]{0xFF20F03F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_45_in_constructorBody4783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_explicitConstructorInvocation4813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation4817 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_explicitConstructorInvocation4819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_explicitConstructorInvocation4839 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_explicitConstructorInvocation4841 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_explicitConstructorInvocation4850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation4854 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_explicitConstructorInvocation4856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_qualifiedName4895 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_29_in_qualifiedName4899 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_qualifiedName4903 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal4936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal4950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal4964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal4978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal4992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_literal5004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HexLiteral_in_integerLiteral5031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OctalLiteral_in_integerLiteral5045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DecimalLiteral_in_integerLiteral5059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_booleanLiteral5084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_booleanLiteral5096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations5130 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_annotation5157 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_annotationName_in_annotation5161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_annotation5167 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000003EEL});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation5171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_elementValue_in_annotation5175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_annotation5180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_annotationName5204 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_29_in_annotationName5207 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_annotationName5209 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs5230 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_elementValuePairs5233 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs5235 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_identifierRule_in_elementValuePair5256 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_elementValuePair5258 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair5260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue5283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue5293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue5303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_elementValueArrayInitializer5326 = new BitSet(new long[]{0xFF00B200002069C0L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer5329 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_elementValueArrayInitializer5332 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer5334 = new BitSet(new long[]{0x0000220000000000L});
    public static final BitSet FOLLOW_41_in_elementValueArrayInitializer5341 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_elementValueArrayInitializer5345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_annotationTypeDeclaration5372 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_46_in_annotationTypeDeclaration5374 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_annotationTypeDeclaration5378 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration5412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_annotationTypeBody5445 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody5448 = new BitSet(new long[]{0x00F0301F94000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_45_in_annotationTypeBody5452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_annotationTypeElementDeclaration5481 = new BitSet(new long[]{0xFF00403F92220000L,0x0000000000000200L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration5485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest5524 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest5528 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest5547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_annotationTypeElementRest5560 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest5563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementRest5576 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest5579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest5592 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest5596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest5609 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_26_in_annotationTypeElementRest5613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest5644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest5659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_annotationMethodRest5692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_annotationMethodRest5694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_annotationMethodRest5696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest5710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest5744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_defaultValue5778 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue5780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_block5805 = new BitSet(new long[]{0xFF20F03F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_blockStatement_in_block5812 = new BitSet(new long[]{0xFF20F03F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_45_in_block5818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_blockStatement5851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement5865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement5879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement5911 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_localVariableDeclarationStatement5915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_localVariableDeclaration5940 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration5944 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration5950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_variableModifiers5996 = new BitSet(new long[]{0x0000000800000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_block_in_statement6027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement6039 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_statement6043 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_statement6047 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_statement6051 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement6057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_statement6069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_parExpression_in_statement6073 = new BitSet(new long[]{0xFF20D03F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement6077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_statement6089 = new BitSet(new long[]{0xFF20D03F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement6093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_statement6119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_statement6121 = new BitSet(new long[]{0xFF009008042069C0L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_forControl_in_statement6125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_statement6127 = new BitSet(new long[]{0xFF20D03F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement6131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_statement6154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_parExpression_in_statement6158 = new BitSet(new long[]{0xFF20D03F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement6162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_statement6185 = new BitSet(new long[]{0xFF20D03F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement6189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_statement6193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_parExpression_in_statement6197 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement6199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_statement6222 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement6226 = new BitSet(new long[]{0x0000000000000000L,0x0000000001040000L});
    public static final BitSet FOLLOW_catches_in_statement6251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_statement6255 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement6259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement6287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_statement6305 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement6309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_statement6345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_parExpression_in_statement6349 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_statement6374 = new BitSet(new long[]{0x0000200000000000L,0x0000000002000400L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement6378 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_45_in_statement6381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_statement6393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_parExpression_in_statement6397 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_statement6401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_statement6426 = new BitSet(new long[]{0xFF009000042069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_statement6457 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement6463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_statement6475 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_statement6479 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement6500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_statement6512 = new BitSet(new long[]{0x0000000004200000L});
    public static final BitSet FOLLOW_identifierRule_in_statement6537 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement6543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_statement6555 = new BitSet(new long[]{0x0000000004200000L});
    public static final BitSet FOLLOW_identifierRule_in_statement6580 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement6586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_statement6596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement6610 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_statement6614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_statement6626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_statement6628 = new BitSet(new long[]{0xFF20D03F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_statement6632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches6670 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_catchClause6707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_catchClause6709 = new BitSet(new long[]{0xFF00000800200000L,0x0000000000000200L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause6713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_catchClause6715 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_catchClause6719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameter6759 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_type_in_formalParameter6763 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter6767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCase_in_switchBlockStatementGroups6817 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000400L});
    public static final BitSet FOLLOW_switchLabel_in_switchCase6856 = new BitSet(new long[]{0xFF20D03F962669C2L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_blockStatement_in_switchCase6860 = new BitSet(new long[]{0xFF20D03F962669C2L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_89_in_switchLabel6892 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel6896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_switchLabel6898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_switchLabel6910 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel6914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_switchLabel6916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_switchLabel6928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_switchLabel6930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancedForControl_in_forControl6972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl6986 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_forControl6989 = new BitSet(new long[]{0xFF009000042069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_forControl6993 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_forControl6996 = new BitSet(new long[]{0xFF009008002069C2L,0x0003E600000003E6L});
    public static final BitSet FOLLOW_forUpdate_in_forControl7000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit7032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit7046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_enhancedForControl7081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_enhancedForControl7083 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_enhancedForControl7087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate7114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_parExpression7151 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_parExpression7155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_parExpression7161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList7202 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_expressionList7225 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_expressionList7229 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_expression_in_statementExpression7258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression7289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression7320 = new BitSet(new long[]{0x0008050000000002L,0x00000003FC000000L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression7327 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_expression7331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_assignmentOperator7376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_assignmentOperator7386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_assignmentOperator7396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_assignmentOperator7406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_assignmentOperator7416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_assignmentOperator7426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_assignmentOperator7436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_assignmentOperator7446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_assignmentOperator7456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_assignmentOperator7477 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_assignmentOperator7481 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_assignmentOperator7485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_assignmentOperator7519 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_assignmentOperator7523 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_assignmentOperator7527 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_assignmentOperator7531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_assignmentOperator7562 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_assignmentOperator7566 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_assignmentOperator7570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression7605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_conditionalExpression7610 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression7614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_conditionalExpression7616 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression7620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression7663 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_conditionalOrExpression7669 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression7673 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7711 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_conditionalAndExpression7717 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7721 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7759 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_100_in_inclusiveOrExpression7765 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7769 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression7807 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_101_in_exclusiveOrExpression7813 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression7817 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression7851 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_43_in_andExpression7857 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression7861 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7899 = new BitSet(new long[]{0x0000000000000002L,0x000000C000000000L});
    public static final BitSet FOLLOW_102_in_equalityExpression7918 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_103_in_equalityExpression7924 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7931 = new BitSet(new long[]{0x0000000000000002L,0x000000C000000000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression7974 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_104_in_instanceOfExpression7987 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression7991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression8028 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression8036 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression8040 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_40_in_relationalOp8090 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_relationalOp8094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_relationalOp8124 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_relationalOp8128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_relationalOp8149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_relationalOp8160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression8186 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression8194 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression8198 = new BitSet(new long[]{0x0000050000000002L});
    public static final BitSet FOLLOW_40_in_shiftOp8240 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_shiftOp8244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_shiftOp8276 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_shiftOp8280 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_shiftOp8284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_shiftOp8314 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_shiftOp8318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression8358 = new BitSet(new long[]{0x0000000000000002L,0x0000060000000000L});
    public static final BitSet FOLLOW_105_in_additiveExpression8365 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_106_in_additiveExpression8371 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression8378 = new BitSet(new long[]{0x0000000000000002L,0x0000060000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression8416 = new BitSet(new long[]{0x0000000040000002L,0x0000180000000000L});
    public static final BitSet FOLLOW_30_in_multiplicativeExpression8424 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_107_in_multiplicativeExpression8430 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_108_in_multiplicativeExpression8436 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression8443 = new BitSet(new long[]{0x0000000040000002L,0x0000180000000000L});
    public static final BitSet FOLLOW_105_in_unaryExpression8479 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_unaryExpression8495 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_unaryExpression8511 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_unaryExpression8527 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression8545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_unaryExpressionNotPlusMinus8582 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_unaryExpressionNotPlusMinus8611 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus8640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus8654 = new BitSet(new long[]{0x0001000020000002L,0x0000600000000000L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus8680 = new BitSet(new long[]{0x0001000020000002L,0x0000600000000000L});
    public static final BitSet FOLLOW_109_in_unaryExpressionNotPlusMinus8730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_unaryExpressionNotPlusMinus8747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector8787 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_selector8791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_selector8814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector8849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_selector8853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector8865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_selector8869 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_superSuffix_in_selector8886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_selector8911 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_selector8915 = new BitSet(new long[]{0x0000010000200000L});
    public static final BitSet FOLLOW_innerCreator_in_selector8919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_selector8931 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_selector8935 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_selector8939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_castExpression8982 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression8986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_castExpression8988 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression8992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_castExpression9003 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_type_in_castExpression9007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_castExpression9009 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression9013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary9049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffixRubbush_in_primary9063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_primary9078 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_superSuffix_in_primary9093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonTargetPrimary_in_primary9116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_primary9130 = new BitSet(new long[]{0xFF00010000200000L});
    public static final BitSet FOLLOW_creator_in_primary9136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moreidentifierRuleSuffixRubbish_in_primary9150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidType_in_primary9164 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_primary9166 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_primary9170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_primary9184 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_primary9186 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_primary9190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_nonTargetPrimary9219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish9254 = new BitSet(new long[]{0x0001000020000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_29_in_moreidentifierRuleSuffixRubbish9275 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish9279 = new BitSet(new long[]{0x0001000020000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_48_in_moreidentifierRuleSuffixRubbish9311 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_moreidentifierRuleSuffixRubbish9313 = new BitSet(new long[]{0x0001000020000000L});
    public static final BitSet FOLLOW_29_in_moreidentifierRuleSuffixRubbish9317 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_moreidentifierRuleSuffixRubbish9319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_moreidentifierRuleSuffixRubbish9340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argumentsSuffixRubbish_in_moreidentifierRuleSuffixRubbish9354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_moreidentifierRuleSuffixRubbish9367 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_moreidentifierRuleSuffixRubbish9371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_moreidentifierRuleSuffixRubbish9393 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_moreidentifierRuleSuffixRubbish9397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_moreidentifierRuleSuffixRubbish9410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_moreidentifierRuleSuffixRubbish9414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_moreidentifierRuleSuffixRubbish9435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_moreidentifierRuleSuffixRubbish9439 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_superSuffix_in_moreidentifierRuleSuffixRubbish9457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_moreidentifierRuleSuffixRubbish9469 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_moreidentifierRuleSuffixRubbish9473 = new BitSet(new long[]{0x0000010000200000L});
    public static final BitSet FOLLOW_innerCreator_in_moreidentifierRuleSuffixRubbish9477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_identifierSuffixRubbush9501 = new BitSet(new long[]{0x0001000020000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_29_in_identifierSuffixRubbush9505 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_identifierSuffixRubbush9509 = new BitSet(new long[]{0x0001000020000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_identifierSuffixRubbush9534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argumentsSuffixRubbish_in_identifierSuffixRubbush9548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffixRubbush9560 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_identifierSuffixRubbush9562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffixRubbush9574 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_identifierSuffixRubbush9578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffixRubbush9590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_identifierSuffixRubbush9594 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_superSuffix_in_identifierSuffixRubbush9598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_identifierSuffixRubbush9610 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_identifierSuffixRubbush9614 = new BitSet(new long[]{0x0000010000200000L});
    public static final BitSet FOLLOW_innerCreator_in_identifierSuffixRubbush9618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_argumentsSuffixRubbish9645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_arrayAccessSuffixRubbish9692 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_arrayAccessSuffixRubbish9696 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_arrayAccessSuffixRubbish9700 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator9757 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_createdName_in_creator9761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator9765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_creator9789 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_creator9808 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_creator9810 = new BitSet(new long[]{0x0001100000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_creator9818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_creator9842 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_creator9859 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_creator9863 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_creator9865 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_creator9885 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_creator9887 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_createdName_in_creator9903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator9907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_createdName9956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_createdName9970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_innerCreator10000 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_innerCreator10015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator10019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest10056 = new BitSet(new long[]{0x000010C000000002L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest10062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation10096 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_explicitGenericInvocation10100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocation10104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nonWildcardTypeArguments10143 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments10147 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_nonWildcardTypeArguments10150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_superSuffix10196 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_superSuffix10200 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_superSuffix10216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_arguments10276 = new BitSet(new long[]{0xFF009008002069C0L,0x0003E600000003EEL});
    public static final BitSet FOLLOW_expressionList_in_arguments10281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_arguments10288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred5_JavaP141 = new BitSet(new long[]{0x0000403F92020000L,0x0000000000000200L});
    public static final BitSet FOLLOW_packageDeclaration_in_synpred5_JavaP157 = new BitSet(new long[]{0x0000403F9E020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_importDeclaration_in_synpred5_JavaP193 = new BitSet(new long[]{0x0000403F9E020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred5_JavaP214 = new BitSet(new long[]{0x0000403F96020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred5_JavaP263 = new BitSet(new long[]{0x0000403F96020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred5_JavaP298 = new BitSet(new long[]{0x0000403F96020002L,0x0000000000000200L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred52_JavaP2448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceConstant_in_synpred60_JavaP2886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_synpred105_JavaP4611 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_type_in_synpred105_JavaP4615 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_synpred105_JavaP4619 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_synpred105_JavaP4631 = new BitSet(new long[]{0xFF00000800200000L,0x0000000000000200L});
    public static final BitSet FOLLOW_formalParameterDecls_in_synpred105_JavaP4635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_synpred106_JavaP4758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred109_JavaP4810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_synpred109_JavaP4813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_arguments_in_synpred109_JavaP4817 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_26_in_synpred109_JavaP4819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred121_JavaP5130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_synpred144_JavaP5851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred145_JavaP5865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_synpred150_JavaP6089 = new BitSet(new long[]{0xFF20D03F962669C0L,0x0003E60000FBD3E6L});
    public static final BitSet FOLLOW_statement_in_synpred150_JavaP6093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred155_JavaP6251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_82_in_synpred155_JavaP6255 = new BitSet(new long[]{0x0000100010000000L});
    public static final BitSet FOLLOW_block_in_synpred155_JavaP6259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred156_JavaP6287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_synpred172_JavaP6892 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_constantExpression_in_synpred172_JavaP6896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_synpred172_JavaP6898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_synpred173_JavaP6910 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred173_JavaP6914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_synpred173_JavaP6916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancedForControl_in_synpred174_JavaP6972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred178_JavaP7032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred180_JavaP7327 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_synpred180_JavaP7331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_synpred190_JavaP7467 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_synpred190_JavaP7469 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred190_JavaP7471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred191_JavaP7507 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred191_JavaP7509 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred191_JavaP7511 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred191_JavaP7513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred192_JavaP7552 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred192_JavaP7554 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred192_JavaP7556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_synpred203_JavaP8082 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred203_JavaP8084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred204_JavaP8116 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_synpred204_JavaP8118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_synpred207_JavaP8232 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_synpred207_JavaP8234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred208_JavaP8266 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred208_JavaP8268 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred208_JavaP8270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_synpred209_JavaP8306 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred209_JavaP8308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred221_JavaP8640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_synpred230_JavaP8982 = new BitSet(new long[]{0xFF00000000200000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred230_JavaP8986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_synpred230_JavaP8988 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred230_JavaP8992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moreidentifierRuleSuffixRubbish_in_synpred236_JavaP9150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred238_JavaP9275 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_synpred238_JavaP9279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_synpred240_JavaP9311 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred240_JavaP9313 = new BitSet(new long[]{0x0001000020000000L});
    public static final BitSet FOLLOW_29_in_synpred240_JavaP9317 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_synpred240_JavaP9319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_synpred241_JavaP9340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred243_JavaP9367 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_synpred243_JavaP9371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred244_JavaP9393 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_synpred244_JavaP9397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred245_JavaP9410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_synpred245_JavaP9414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred246_JavaP9435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred246_JavaP9439 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_superSuffix_in_synpred246_JavaP9457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred247_JavaP9469 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_synpred247_JavaP9473 = new BitSet(new long[]{0x0000010000200000L});
    public static final BitSet FOLLOW_innerCreator_in_synpred247_JavaP9477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred248_JavaP9505 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_identifierRule_in_synpred248_JavaP9509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_synpred249_JavaP9534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred251_JavaP9560 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_synpred251_JavaP9562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred252_JavaP9574 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_synpred252_JavaP9578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred253_JavaP9590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred253_JavaP9594 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_superSuffix_in_synpred253_JavaP9598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_synpred254_JavaP9610 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_synpred254_JavaP9614 = new BitSet(new long[]{0x0000010000200000L});
    public static final BitSet FOLLOW_innerCreator_in_synpred254_JavaP9618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_synpred255_JavaP9692 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_synpred255_JavaP9696 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred255_JavaP9700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_synpred258_JavaP9789 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_synpred258_JavaP9808 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred258_JavaP9810 = new BitSet(new long[]{0x0001100000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred258_JavaP9818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_synpred259_JavaP9859 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_synpred259_JavaP9863 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred259_JavaP9865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_synpred261_JavaP9842 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_synpred261_JavaP9859 = new BitSet(new long[]{0xFF009000002069C0L,0x0003E600000001E6L});
    public static final BitSet FOLLOW_expression_in_synpred261_JavaP9863 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred261_JavaP9865 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_synpred261_JavaP9885 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_49_in_synpred261_JavaP9887 = new BitSet(new long[]{0x0001000000000002L});

}